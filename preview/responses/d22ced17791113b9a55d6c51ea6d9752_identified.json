{
    "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?> <iCalendar xmlns:xCal=\"urn:ietf:params:xml:ns:xcal\" xmlns:pentabarf=\"http://pentabarf.org\">   <vcalendar>     <version>2.0</version>     <prodid>-//Pentabarf//Schedule 1.0//EN</prodid>     <x-wr-caldesc/>     <x-wr-calname>Schedule for sessions at </x-wr-calname>     <vevent>       <method>PUBLISH</method>       <uid>3356@FOSDEM15@pentabarf.org</uid>       <pentabarf:event-id>3356</pentabarf:event-id>       <pentabarf:event-slug>youd_better_have_tested_backups</pentabarf:event-slug>       <pentabarf:event-tag>youd_better_have_tested_backups</pentabarf:event-tag>       <pentabarf:title>You'd better have tested backups...</pentabarf:title>       <pentabarf:subtitle/>       <pentabarf:language>en</pentabarf:language>       <pentabarf:language-code>en_US</pentabarf:language-code>       <pentabarf:track>PostgreSQL</pentabarf:track>       <pentabarf:start>2015-01-31 11:00:00 +0100</pentabarf:start>       <pentabarf:end>2015-01-31 11:50:00 +0100</pentabarf:end>       <pentabarf:duration>00:50:00:00</pentabarf:duration>       <dtstart>20150131T110000</dtstart>       <dtend>20150131T115000</dtend>       <duration>00:50:00:00</duration>       <summary>You'd better have tested backups...</summary>       <description>&lt;p&gt;A PostgreSQL data recovery tale from a true story, where we dig deeper and deeper into the PostgreSQL internals in order to be able to get back some data from a destroyed cluster.&lt;/p&gt;  &lt;p&gt;If that story doesn't leave you wanting to check all your backups before the talk has ended, I don't know what will.&lt;/p&gt;</description>       <class>PUBLIC</class>       <status>CONFIRMED</status>       <categories>PostgreSQL</categories>       <url>https:/fosdem.org/2015/schedule/2015/schedule/event/youd_better_have_tested_backups/</url>       <location>AW1.126</location>       <attendee>Dimitri Fontaine</attendee>     </vevent>     <vevent>       <method>PUBLISH</method>       <uid>3357@FOSDEM15@pentabarf.org</uid>       <pentabarf:event-id>3357</pentabarf:event-id>       <pentabarf:event-slug>new_wal_record_format_in_postgresql_95</pentabarf:event-slug>       <pentabarf:event-tag>new_wal_record_format_in_postgresql_95</pentabarf:event-tag>       <pentabarf:title>New WAL record format in PostgreSQL 9.5</pentabarf:title>       <pentabarf:subtitle/>       <pentabarf:language>en</pentabarf:language>       <pentabarf:language-code>en_US</pentabarf:language-code>       <pentabarf:track>PostgreSQL</pentabarf:track>       <pentabarf:start>2015-01-31 12:00:00 +0100</pentabarf:start>       <pentabarf:end>2015-01-31 12:50:00 +0100</pentabarf:end>       <pentabarf:duration>00:50:00:00</pentabarf:duration>       <dtstart>20150131T120000</dtstart>       <dtend>20150131T125000</dtend>       <duration>00:50:00:00</duration>       <summary>New WAL record format in PostgreSQL 9.5</summary>       <description>&lt;p&gt;The WAL record format was revamped in version 9.5. This presentation goes into the details of the WAL format, and the reasons for the change.&lt;/p&gt;</description>       <class>PUBLIC</class>       <status>CONFIRMED</status>       <categories>PostgreSQL</categories>       <url>https:/fosdem.org/2015/schedule/2015/schedule/event/new_wal_record_format_in_postgresql_95/</url>       <location>AW1.126</location>       <attendee>Heikki Linnakangas</attendee>     </vevent>     <vevent>       <method>PUBLISH</method>       <uid>3358@FOSDEM15@pentabarf.org</uid>       <pentabarf:event-id>3358</pentabarf:event-id>       <pentabarf:event-slug>json_and_postgresql_the_state_of_the_art</pentabarf:event-slug>       <pentabarf:event-tag>json_and_postgresql_the_state_of_the_art</pentabarf:event-tag>       <pentabarf:title>JSON and PostgreSQL, the State of the Art</pentabarf:title>       <pentabarf:subtitle/>       <pentabarf:language>en</pentabarf:language>       <pentabarf:language-code>en_US</pentabarf:language-code>       <pentabarf:track>PostgreSQL</pentabarf:track>       <pentabarf:start>2015-01-31 13:00:00 +0100</pentabarf:start>       <pentabarf:end>2015-01-31 13:50:00 +0100</pentabarf:end>       <pentabarf:duration>00:50:00:00</pentabarf:duration>       <dtstart>20150131T130000</dtstart>       <dtend>20150131T135000</dtend>       <duration>00:50:00:00</duration>       <summary>JSON and PostgreSQL, the State of the Art</summary>       <description>&lt;p&gt;PostgreSQL 9.4 introduces a new type, JSONB, index types, operators... all kinds of new infrastructure for processing JSON. It's all rather overwhelming.&lt;/p&gt;  &lt;p&gt;We'll look at the current set of tools, including real-life applications and performance metrics, and talk about options as to when it is a great and perhaps still not-as-great idea to use JSON.&lt;/p&gt;</description>       <class>PUBLIC</class>       <status>CONFIRMED</status>       <categories>PostgreSQL</categories>       <url>https:/fosdem.org/2015/schedule/2015/schedule/event/json_and_postgresql_the_state_of_the_art/</url>       <location>AW1.126</location>       <attendee>Christophe Pettus</attendee>     </vevent>     <vevent>       <method>PUBLISH</method>       <uid>3359@FOSDEM15@pentabarf.org</uid>       <pentabarf:event-id>3359</pentabarf:event-id>       <pentabarf:event-slug>foreign_data_wrappers_in_postgresql_where_are_we_now</pentabarf:event-slug>       <pentabarf:event-tag>foreign_data_wrappers_in_postgresql_where_are_we_now</pentabarf:event-tag>       <pentabarf:title>Foreign Data Wrappers in PostgreSQL : Where are we now ?</pentabarf:title>       <pentabarf:subtitle/>       <pentabarf:language>en</pentabarf:language>       <pentabarf:language-code>en_US</pentabarf:language-code>       <pentabarf:track>PostgreSQL</pentabarf:track>       <pentabarf:start>2015-01-31 14:00:00 +0100</pentabarf:start>       <pentabarf:end>2015-01-31 14:50:00 +0100</pentabarf:end>       <pentabarf:duration>00:50:00:00</pentabarf:duration>       <dtstart>20150131T140000</dtstart>       <dtend>20150131T145000</dtend>       <duration>00:50:00:00</duration>       <summary>Foreign Data Wrappers in PostgreSQL : Where are we now ?</summary>       <description>&lt;p&gt;Since the introduction of the Foreign Data Wrapper API in 9.1, things have evolved rather quickly on the SQL-MED front&lt;/p&gt;  &lt;p&gt;We will look at the promising things coming (hopefully!) for 9.5 in core, but also at the numerous innovative use-cases for FDW: IMPORT FOREIGN SCHEMA, foreign table inheritance, new ways of storing data, and how to combine those features to use PostgreSQL as an ETL.&lt;/p&gt;</description>       <class>PUBLIC</class>       <status>CONFIRMED</status>       <categories>PostgreSQL</categories>       <url>https:/fosdem.org/2015/schedule/2015/schedule/event/foreign_data_wrappers_in_postgresql_where_are_we_now/</url>       <location>AW1.126</location>       <attendee>Ronan Dunklau</attendee>     </vevent>     <vevent>       <method>PUBLISH</method>       <uid>3360@FOSDEM15@pentabarf.org</uid>       <pentabarf:event-id>3360</pentabarf:event-id>       <pentabarf:event-slug>modern_sql_in_postgresql</pentabarf:event-slug>       <pentabarf:event-tag>modern_sql_in_postgresql</pentabarf:event-tag>       <pentabarf:title>Modern SQL in PostgreSQL</pentabarf:title>       <pentabarf:subtitle/>       <pentabarf:language>en</pentabarf:language>       <pentabarf:language-code>en_US</pentabarf:language-code>       <pentabarf:track>PostgreSQL</pentabarf:track>       <pentabarf:start>2015-01-31 15:00:00 +0100</pentabarf:start>       <pentabarf:end>2015-01-31 15:50:00 +0100</pentabarf:end>       <pentabarf:duration>00:50:00:00</pentabarf:duration>       <dtstart>20150131T150000</dtstart>       <dtend>20150131T155000</dtend>       <duration>00:50:00:00</duration>       <summary>Modern SQL in PostgreSQL</summary>       <description>&lt;p&gt;SQL has gone out of fashion lately\\ufffd\\ufffd\\ufffdpartly due to the NoSQL movement, but mostly because SQL is often still used like 20 years ago. As a matter of fact, the SQL standard continued to evolve during the past decades resulting in the current release of 2011. In this session, we will go through the most important additions since the widely known SQL-92, explain how they work and how PostgreSQL supports and extends them. We will cover common table expressions and window functions in detail and have a very short look at the temporal features of SQL:2011 and the related features of PostgreSQL.&lt;/p&gt;</description>       <class>PUBLIC</class>       <status>CONFIRMED</status>       <categories>PostgreSQL</categories>       <url>https:/fosdem.org/2015/schedule/2015/schedule/event/modern_sql_in_postgresql/</url>       <location>AW1.126</location>       <attendee>Markus Winand</attendee>     </vevent>     <vevent>       <method>PUBLISH</method>       <uid>3361@FOSDEM15@pentabarf.org</uid>       <pentabarf:event-id>3361</pentabarf:event-id>       <pentabarf:event-slug>large_scale_quality_assurance_in_the_postgresql_ecosystem</pentabarf:event-slug>       <pentabarf:event-tag>large_scale_quality_assurance_in_the_postgresql_ecosystem</pentabarf:event-tag>       <pentabarf:title>Large Scale Quality Assurance in the PostgreSQL Ecosystem</pentabarf:title>       <pentabarf:subtitle/>       <pentabarf:language>en</pentabarf:language>       <pentabarf:language-code>en_US</pentabarf:language-code>       <pentabarf:track>PostgreSQL</pentabarf:track>       <pentabarf:start>2015-01-31 16:00:00 +0100</pentabarf:start>       <pentabarf:end>2015-01-31 16:50:00 +0100</pentabarf:end>       <pentabarf:duration>00:50:00:00</pentabarf:duration>       <dtstart>20150131T160000</dtstart>       <dtend>20150131T165000</dtend>       <duration>00:50:00:00</duration>       <summary>Large Scale Quality Assurance in the PostgreSQL Ecosystem</summary>       <description>&lt;p&gt;The apt.postgresql.org repository hosts PostgreSQL server packages for seven major releases: all the stable branches plus beta and the devel versions. Targetting two architectures and seven Debian and Ubuntu releases, this is almost 100 combinations in the cross product. On top of that, we build binary packages for various PostgreSQL extensions and applications. Of course no one is able to test thousands of packages manually.&lt;/p&gt;  &lt;p&gt;We are putting much effort into running regression tests on all extensions using pg_regress, and creating system integration tests to be run with the autopkgtest tool. All tests are integrated with our Jenkins build server.&lt;/p&gt;  &lt;p&gt;This talk presents recent advances made in the area and includes examples of bugs found.&lt;/p&gt;</description>       <class>PUBLIC</class>       <status>CONFIRMED</status>       <categories>PostgreSQL</categories>       <url>https:/fosdem.org/2015/schedule/2015/schedule/event/large_scale_quality_assurance_in_the_postgresql_ecosystem/</url>       <location>AW1.126</location>       <attendee>Christoph Berg</attendee>     </vevent>   </vcalendar> </iCalendar>  ", 
    "identity": {
        "subtype": "", 
        "is_error": false, 
        "version": "", 
        "protocol": "", 
        "language": "", 
        "service": "", 
        "has_dataset": false, 
        "has_metadata": false
    }, 
    "digest": "d22ced17791113b9a55d6c51ea6d9752", 
    "source_url": "https://fosdem.org/2015/schedule/track/postgresql.xcs"
}