{
    "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?> <feed xmlns=\"http://www.w3.org/2005/Atom\">   <title>ImperialViolet</title>  <link href=\"http://www.imperialviolet.org/iv-rss.xml\" rel=\"self\"/>  <link href=\"http://www.imperialviolet.org/\"/>  <updated>2015-02-22T11:46:14-05:00</updated>  <id>http://www.imperialviolet.org/</id>  <author>    <name>Adam Langley</name>  </author>     <entry>    <title>Why not DANE in browsers</title>    <link href=\"http://www.imperialviolet.org/2015/01/17/notdane.html\"/>    <updated>2015-01-17T00:00:00-05:00</updated>    <id>http://www.imperialviolet.org/2015/01/17/notdane</id>    <content type=\"html\">&lt;p&gt;Thomas Ptacek laid out a number of &lt;a href=&quot;http://sockpuppet.org/blog/2015/01/15/against-dnssec/&quot;&gt;arguments against DNSSEC&lt;/a&gt; recently (and in a &lt;a href=&quot;http://sockpuppet.org/stuff/dnssec-qa.html&quot;&gt;follow up&lt;/a&gt;). We don&#39;t fully agree on everything, but it did prompt me to write why, even if you assume DNSSEC, &lt;a href=&quot;https://tools.ietf.org/html/rfc6698&quot;&gt;DANE&lt;/a&gt; (the standard for speaking about the intersection of TLS and DNSSEC) is not a foregone conclusion in web browsers.&lt;/p&gt;  &lt;p&gt;There are two ways that you might wish to use DANE in a web browser: either to block a certificate that would normally be considered valid, or to bless a certificate that would normally be rejected. The first, obviously, requires that DANE information always be obtained&amp;mdash;if a lookup failure was ignored, a network attacker with a bad certificate would just simulate a lookup failure. But requiring that browsers always obtain DANE information (or a proof of absence) is nearly implausible:&lt;/p&gt;  &lt;p&gt;Some years ago now, Chrome did an experiment where we would lookup a TXT record that we knew existed when we knew the Internet connection was working. At the time, some 4-5% of users couldn&#39;t lookup that record; we assume because the network wasn&#39;t transparent to non-standard DNS resource types. DANE records are going to be even more non-standard, are going to be larger and browsers would have to fetch lots of them because they&#39;ll need the DNSKEY/RRSIG chain up from the root. Even if DNSSEC record lookup worked flawlessly for everyone, we probably still wouldn&#39;t implement this aspect of DANE because each extra lookup is more latency and another chance for packet loss to cause an expensive timeout and retransmit.&lt;/p&gt;  &lt;p&gt;Instead, for this we have &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-websec-key-pinning-21&quot;&gt;HPKP&lt;/a&gt;, which is a memory-based pinning solution using HTTP headers. We also have pre-loaded pinning in Chrome for larger or more obvious targets. Thomas Ptacek seems bullish on pinning but I&#39;m much more lukewarm. HPKP is quite complex and no doubt someone will write a &amp;ldquo;supercookies&amp;rdquo; story about it at some point, as they &lt;a href=&quot;https://arstechnica.com/security/2015/01/browsing-in-privacy-mode-super-cookies-can-track-you-anyway/&quot;&gt;have for HSTS&lt;/a&gt;. Additionally, pinning is quite dangerous. Clients deciding that &amp;ldquo;pinning is good&amp;rdquo; have caused headaches at Google. It&#39;s also worth noting that &lt;a href=&quot;https://crypto.cat&quot;&gt;CryptoCat&lt;/a&gt; has committed pinning-suicide in Chrome at at the moment due to their CA having switched intermediates between renewals. They&#39;re waiting for the release of Chrome 41 to recover.&lt;/p&gt;  &lt;p&gt;But what about the other side of DANE: blessing certificates that would otherwise be considered untrusted? In this case, DNSSEC can be seen as something like another CA. The same problems with looking up DNSSEC records apply, but are much less painful when you only need to depend on the lookup for sites that are using DANE certificates. Indeed, Chrome even &lt;a href=&quot;https://www.imperialviolet.org/2011/06/16/dnssecchrome.html&quot;&gt;supported&lt;/a&gt; something very like DANE for a while. In that case the DNSSEC records were contained in the certificate to avoid the latency and complexity of looking them up in the client. (DNSSEC records contains signatures so need not be transported over the DNS protocol.)&lt;/p&gt;  &lt;p&gt;But support for that was removed because it was a bunch of parsing code outside of the sandbox, wasn&#39;t really being used and it conflicted with two long-term plans for the health of the HTTPS ecosystem: eliminating 1024-bit RSA and Certificate Transparency. The conflicts are probably the most important reasons for not wanting to renew the experiment.&lt;/p&gt;  &lt;p&gt;The effort to remove 1024-bit RSA from HTTPS has been going for years and is, perhaps, nearing completion now. (That noise that you can hear is my colleague, Ryan Sleevi, crying softly.). There are still some 1024-bit root certificates, but they are &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=986019&quot;&gt;nearly gone&lt;/a&gt; from the Mozilla set. The amount of work involved is an order of magnitude greater than you expect because of the interactions of different X.509 validation libraries, intermediate chains and varying root stores on different platforms and versions.&lt;/p&gt;  &lt;p&gt;DNSSEC, however, is littered with 1024-bit RSA. You literally can&#39;t avoid it because the root zone transits through a 1024-bit key. DNSSEC has them because of (I think) concerns about the size of responses and they are usually rotated every two or three months. The RFC &lt;a href=&quot;https://tools.ietf.org/html/rfc6781#section-3.4.2&quot;&gt;suggests&lt;/a&gt; that 1024-bit RSA is good for &amp;ldquo;most zones&amp;rdquo; until 2022. Dan Bernstein&#39;s paper on &lt;a href=&quot;http://cr.yp.to/factorization/batchnfs-20141109.pdf&quot;&gt;Batch NFS&lt;/a&gt; deals well with the question of whether that&#39;s wise.&lt;/p&gt;  &lt;p&gt;Next, &lt;a href=&quot;http://www.certificate-transparency.org/&quot;&gt;Certificate Transparency&lt;/a&gt; is our effort to add strong, technical audits to the CA system by creating a trustworthy log of all valid certificates. CT logs only accept certificates from CA as an anti-spam measure but people can create DANE certificates for domains at will. This is far from an insurmountable problem, but it is a problem that would need to be solved and the CT team already have their hands full with the staged rollout of CT in Chrome.&lt;/p&gt;  &lt;p&gt;The 1024-bit RSA problem isn&#39;t insurmountable either (although it&#39;s baked in much deeper), so it&#39;s possible that browsers might accept a DNSSEC signature chain in a certificate in the future, but it&#39;s a long way out.&lt;/p&gt; </content>  </entry>    <entry>    <title>The POODLE bites again</title>    <link href=\"http://www.imperialviolet.org/2014/12/08/poodleagain.html\"/>    <updated>2014-12-08T00:00:00-05:00</updated>    <id>http://www.imperialviolet.org/2014/12/08/poodleagain</id>    <content type=\"html\">&lt;p&gt;October&#39;s &lt;a href=&quot;https://www.imperialviolet.org/2014/10/14/poodle.html&quot;&gt;POODLE attack&lt;/a&gt; affected CBC-mode cipher suites in SSLv3 due to SSLv3&#39;s under-specification of the contents of the CBC padding bytes. Since SSLv3 didn&#39;t say what the padding bytes should be, implementations couldn&#39;t check them and that opened SSLv3 up to an oracle attack.&lt;/p&gt;  &lt;p&gt;We&#39;re done pretty well at killing off SSLv3 in response to that. Chrome 39 (released Nov 18&lt;sup&gt;th&lt;/sup&gt;) removed fallback to SSLv3 and Chrome 40 &lt;a href=&quot;https://groups.google.com/a/chromium.org/forum/#!topic/security-dev/Vnhy9aKM_l4&quot;&gt;is scheduled&lt;/a&gt; to remove SSLv3 completely. Firefox 34 (released Dec 1&lt;sup&gt;st&lt;/sup&gt;) has already &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/34.0/releasenotes/&quot;&gt;removed SSLv3 support&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;We&#39;re removing SSLv3 in favour of TLS because TLS fully specifies the contents of the padding bytes and thus stops the attack. However, TLS&#39;s padding is a &lt;i&gt;subset&lt;/i&gt; of SSLv3&#39;s padding so, technically, you could use an SSLv3 decoding function with TLS and it would still work fine. It wouldn&#39;t check the padding bytes but that wouldn&#39;t cause any problems in normal operation. However, if an SSLv3 decoding function was used with TLS, then the POODLE attack would work, even against TLS connections.&lt;/p&gt;  &lt;p&gt;This was noted by, at least, Brian Smith on the TLS list ([&lt;a href=&quot;https://www.ietf.org/mail-archive/web/tls/current/msg14058.html&quot;&gt;1&lt;/a&gt;][&lt;a href=&quot;https://www.ietf.org/mail-archive/web/tls/current/msg14072.html&quot;&gt;2&lt;/a&gt;]) and I was sufficiently cynical to assume that there were probably more instances of this than the old versions of NSS that Brian cited, and so wrote a scanner for the issue.&lt;/p&gt;  &lt;p&gt;Unfortunately, I found a number of major sites that had this problem. At least one of whom I had good enough contacts at to quickly find that they used an F5 device to terminate connections. I contacted F5 on October 21&lt;sup&gt;st&lt;/sup&gt; and they started working on a fix. Yngve Pettersen also &lt;a href=&quot;https://vivaldi.net/blogs/entry/not-out-of-the-woods-yet-there-are-more-poodles&quot;&gt;independently found&lt;/a&gt; this issue and contacted me about it around this time.&lt;/p&gt;  &lt;p&gt;F5 reported that some of the affected sites weren&#39;t customers of theirs, which meant that there was (at least) a second vendor with the same issue. After more digging, I found that some A10 devices also have this problem. I emailed a number of contacts at A10 on October 30&lt;sup&gt;th&lt;/sup&gt; but sadly didn&#39;t get a reply from any of them. It wasn&#39;t until November 13&lt;sup&gt;th&lt;/sup&gt; that I found the right person at A10 to deal with this.&lt;/p&gt;  &lt;p&gt;F5 and A10 have posted patches for their products (F5&#39;s are &lt;a href=&quot;https://support.f5.com/kb/en-us/solutions/public/15000/800/sol15882.html&quot;&gt;here&lt;/a&gt; and A10&#39;s are &lt;a href=&quot;https://www.a10networks.com/support-axseries/downloads/downloads.php&quot;&gt;here&lt;/a&gt; and they have an advisory &lt;a href=&quot;https://www.a10networks.com/support/advisories/A10-RapidResponse_CVE-2014-8730.pdf&quot;&gt;here&lt;/a&gt;). I&#39;m not completely sure that I&#39;ve found every affected vendor but, now that this issue is public, any other affected products should quickly come to light. (Citrix devices have an odd behaviour in this area in that they&#39;ll accept padding bytes that are all zeros, but not random padding. That&#39;s unexpected but I can&#39;t make an attack out of it.)&lt;/p&gt;  &lt;p&gt;(&lt;b&gt;Update&lt;/b&gt;: since posting this, it appears that products from Fortinet, &lt;a href=&quot;http://tools.cisco.com/security/center/content/CiscoSecurityNotice/CVE-2014-8730&quot;&gt;Cisco&lt;/a&gt;, IBM (&lt;a href=&quot;http://www-01.ibm.com/support/docview.wss?uid=swg21692552&quot;&gt;WebSphere&lt;/a&gt;, &lt;a href=&quot;http://www-01.ibm.com/support/docview.wss?uid=swg21693142&quot;&gt;Domino&lt;/a&gt;, &lt;a href=&quot;http://www-01.ibm.com/support/docview.wss?uid=swg21692802&quot;&gt;Tivoli&lt;/a&gt;) and &lt;a href=&quot;http://kb.juniper.net/InfoCenter/index?page=content&amp;id=TSB16579&amp;actp=RSS&quot;&gt;Juniper&lt;/a&gt; may also be affected.)&lt;/p&gt;  &lt;p&gt;Ivan Risti\\ufffd\\ufffd has added a test for this issue to his excellent scanner at &lt;a href=&quot;https://www.ssllabs.com/ssltest/&quot;&gt;SSLLabs&lt;/a&gt;. Affected sites will have their grade set to F and will report &amp;ldquo;This server is vulnerable to the POODLE attack against TLS servers&amp;rdquo;.&lt;/p&gt;  &lt;p&gt;This seems like a good moment to reiterate that &lt;i&gt;everything&lt;/i&gt; less than TLS 1.2 with an AEAD cipher suite is cryptographically broken. An IETF &lt;a href=&quot;https://datatracker.ietf.org/doc/draft-ietf-tls-prohibiting-rc4/&quot;&gt;draft to prohibit RC4&lt;/a&gt; is in Last Call at the moment but it would be wrong to believe that RC4 is uniquely bad. While RC4 is fundamentally broken and no implementation can save it, attacks against MtE-CBC ciphers have repeatedly been shown to be far more practical. Thankfully, TLS 1.2 support is &lt;a href=&quot;https://www.trustworthyinternet.org/ssl-pulse/&quot;&gt;about to hit&lt;/a&gt; 50% at the time of writing.&lt;/p&gt; </content>  </entry>    <entry>    <title>POODLE attacks on SSLv3</title>    <link href=\"http://www.imperialviolet.org/2014/10/14/poodle.html\"/>    <updated>2014-10-14T00:00:00-04:00</updated>    <id>http://www.imperialviolet.org/2014/10/14/poodle</id>    <content type=\"html\">&lt;p&gt;My colleague, Bodo M&amp;ouml;ller, in collaboration with Thai Duong and Krzysztof Kotowicz (also Googlers), just &lt;a href=&quot;https://www.openssl.org/~bodo/ssl-poodle.pdf&quot;&gt;posted details&lt;/a&gt; about a padding oracle attack against CBC-mode ciphers in SSLv3. This attack, called POODLE, is similar to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security#BEAST_attack&quot;&gt;BEAST attack&lt;/a&gt; and also allows a network attacker to extract the plaintext of targeted parts of an SSL connection, usually cookie data. Unlike the BEAST attack, it doesn&#39;t require such extensive control of the format of the plaintext and thus is more practical.&lt;/p&gt;  &lt;p&gt;Fundamentally, the design flaw in SSL/TLS that allows this is the same as with &lt;a href=&quot;http://www.isg.rhul.ac.uk/tls/Lucky13.html&quot;&gt;Lucky13&lt;/a&gt; and &lt;a href=&quot;https://www.iacr.org/cryptodb/archive/2003/CRYPTO/1069/1069.pdf&quot;&gt;Vaudenay&#39;s two attacks&lt;/a&gt;: SSL &lt;a href=&quot;http://www.thoughtcrime.org/blog/the-cryptographic-doom-principle/&quot;&gt;got encryption and authentication the wrong way around&lt;/a&gt; &amp;ndash; it authenticates before encrypting.&lt;/p&gt;  &lt;p&gt;Consider the following plaintext HTTP request, which I&#39;ve broken into 8-byte blocks (as in 3DES), but the same idea works for 16-byte blocks (as in AES) just as well:&lt;/p&gt;  &lt;svg style=&quot;margin-left: 1cm;&quot; xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;27.777&quot; width=&quot;767.17&quot; version=&quot;1.1&quot; xmlns:cc=&quot;http://creativecommons.org/ns#&quot; xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot;&gt; &lt;metadata&gt; &lt;rdf:RDF&gt; &lt;cc:Work rdf:about=&quot;&quot;&gt; &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt; &lt;dc:type rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot;/&gt; &lt;dc:title/&gt; &lt;/cc:Work&gt; &lt;/rdf:RDF&gt; &lt;/metadata&gt; &lt;g transform=&quot;translate(-20.179504,-567.18392)&quot;&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; line-height=&quot;125%&quot; font-weight=&quot;normal&quot; font-size=&quot;40px&quot; transform=&quot;matrix(0.63919169,0,0,0.63919169,-41.721643,418.85171)&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-style=&quot;normal&quot; font-family=&quot;Ubuntu Mono&quot; fill=&quot;#000&quot;&gt; &lt;path d=&quot;m114.42,252.27,3.28,0,0,11.6c-0.50668,0.18667-1.32,0.41334-2.44,0.68-1.12,0.29334-2.44,0.44-3.96,0.44-1.4933,0-2.8533-0.28-4.08-0.84-1.2267-0.58666-2.28-1.4267-3.16-2.52-0.85333-1.0933-1.52-2.44-2-4.04-0.48-1.6266-0.72-3.4666-0.72-5.52,0-2.08,0.26667-3.92,0.8-5.52s1.2533-2.9466,2.16-4.04c0.93333-1.0933,2.0133-1.92,3.24-2.48,1.2267-0.58664,2.5467-0.87997,3.96-0.88,0.90666,0.00003,1.7067,0.0667,2.4,0.2,0.69332,0.13336,1.28,0.29336,1.76,0.48,0.50665,0.1867,0.91999,0.3867,1.24,0.6,0.31999,0.18669,0.55999,0.33336,0.72,0.44l-1.08,2.76c-0.61335-0.47997-1.3467-0.86664-2.2-1.16-0.82668-0.31997-1.7067-0.47997-2.64-0.48-1.0133,0.00003-1.96,0.24003-2.84,0.72-0.85334,0.48003-1.5867,1.16-2.2,2.04-0.61334,0.88002-1.0933,1.9467-1.44,3.2-0.34667,1.2267-0.52,2.6-0.52,4.12,0,1.4934,0.14666,2.8534,0.44,4.08,0.32,1.2267,0.77333,2.28,1.36,3.16,0.58666,0.88001,1.3067,1.5733,2.16,2.08,0.87999,0.48001,1.88,0.72001,3,0.72,0.77332,0.00001,1.3733-0.0533,1.8-0.16,0.42666-0.10666,0.74666-0.21333,0.96-0.32v-9.36&quot;/&gt; &lt;path d=&quot;m123.14,264.47,0-24.76,13.88,0,0,2.8-10.6,0,0,7.6,9.28,0,0,2.8-9.28,0,0,8.76,11.48,0,0,2.8-14.76,0&quot;/&gt; &lt;path d=&quot;m157.94,239.71,0,2.8-6.8,0,0,21.96-3.28,0,0-21.96-6.8,0,0-2.8,16.88,0&quot;/&gt; &lt;path d=&quot;m185.66,271.07-3.4,0,11.16-34.56,3.32,0-11.08,34.56&quot;/&gt; &lt;path d=&quot;m234.42,239.71,3.28,0,0,24.76-3.28,0,0-11.52-9.84,0,0,11.52-3.28,0,0-24.76,3.28,0,0,10.44,9.84,0,0-10.44&quot;/&gt; &lt;path d=&quot;m257.94,239.71,0,2.8-6.8,0,0,21.96-3.28,0,0-21.96-6.8,0,0-2.8,16.88,0&quot;/&gt; &lt;/g&gt; &lt;path stroke-linejoin=&quot;round&quot; d=&quot;m20.371,567.38,105.47,0,0,27.394-105.47,0z&quot; stroke=&quot;#000&quot; stroke-linecap=&quot;round&quot; stroke-miterlimit=&quot;4&quot; stroke-width=&quot;0.38351503&quot; fill=&quot;none&quot;/&gt; &lt;g transform=&quot;matrix(0.63919169,0,0,0.63919169,-40.621841,419.07999)&quot;&gt; &lt;path stroke-linejoin=&quot;round&quot; d=&quot;m267.86,232.01,165,0,0,42.857-165,0z&quot; stroke=&quot;#000&quot; stroke-linecap=&quot;round&quot; stroke-miterlimit=&quot;4&quot; stroke-width=&quot;0.60000002&quot; fill=&quot;none&quot;/&gt; &lt;g transform=&quot;translate(0,-0.35714943)&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; fill=&quot;#000&quot;&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; font-size=&quot;40px&quot; font-family=&quot;Ubuntu Mono&quot; line-height=&quot;125%&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m288.66,239.71,0,2.8-6.8,0,0,21.96-3.28,0,0-21.96-6.8,0,0-2.8,16.88,0&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m299.62,239.47c1.4666,0.00003,2.7466,0.1867,3.84,0.56,1.12,0.37336,2.04,0.90669,2.76,1.6,0.74665,0.66669,1.2933,1.4667,1.64,2.4,0.37331,0.93336,0.55998,1.9734,0.56,3.12-0.00002,2.5867-0.76002,4.5867-2.28,6-1.52,1.3867-3.8,2.08-6.84,2.08h-2.88v9.24h-3.28v-24.4c0.47999-0.10664,0.99999-0.19997,1.56-0.28,0.58666-0.08,1.16-0.14664,1.72-0.2,0.58666-0.0533,1.1467-0.08,1.68-0.08,0.55999-0.0266,1.0667-0.04,1.52-0.04m0.24,2.84c-0.69334,0.00003-1.36,0.0134-2,0.04-0.64001,0.00003-1.12,0.0267-1.44,0.08v10h2.72c2,0.00002,3.48-0.39998,4.44-1.2,0.98665-0.79998,1.48-2.12,1.48-3.96-0.00002-3.3066-1.7334-4.96-5.2-4.96&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m316.38,271.07-3.4,0,11.16-34.56,3.32,0-11.08,34.56&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m333.22,244.83c1.36-0.53331,2.68-1.2,3.96-2,1.28-0.82664,2.4667-1.8666,3.56-3.12h2.32v21.96h4.68v2.8h-13.32v-2.8h5.36v-17.36c-0.29334,0.26669-0.65334,0.54669-1.08,0.84-0.40001,0.26669-0.85334,0.53336-1.36,0.8-0.48001,0.26669-0.98667,0.52002-1.52,0.76-0.53334,0.24002-1.0533,0.44002-1.56,0.6l-1.04-2.48&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m363.18,261.91c-0.00002,0.80001-0.26668,1.5067-0.8,2.12-0.53335,0.61334-1.24,0.92-2.12,0.92-0.90668,0-1.6267-0.30666-2.16-0.92-0.53334-0.61333-0.80001-1.32-0.8-2.12-0.00001-0.82666,0.26666-1.5467,0.8-2.16,0.53332-0.61332,1.2533-0.91999,2.16-0.92,0.87999,0.00001,1.5866,0.30668,2.12,0.92,0.53332,0.61334,0.79998,1.3333,0.8,2.16&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m373.22,244.83c1.36-0.53331,2.68-1.2,3.96-2,1.28-0.82664,2.4667-1.8666,3.56-3.12h2.32v21.96h4.68v2.8h-13.32v-2.8h5.36v-17.36c-0.29334,0.26669-0.65334,0.54669-1.08,0.84-0.40001,0.26669-0.85334,0.53336-1.36,0.8-0.48001,0.26669-0.98667,0.52002-1.52,0.76-0.53334,0.24002-1.0533,0.44002-1.56,0.6l-1.04-2.48&quot;/&gt; &lt;/g&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; font-size=&quot;20px&quot; font-family=&quot;Sans&quot; line-height=&quot;125%&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m394.86,244.81,5.0781,16.436-1.6602,0-5.0781-16.436,1.6602,0&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m408.18,250.13c-0.20183-0.11718-0.42318-0.20181-0.66406-0.2539-0.23438-0.0586-0.4948-0.0879-0.78125-0.0879-1.0156,0.00001-1.7969,0.33204-2.3438,0.99609-0.54037,0.65756-0.81055,1.6048-0.81055,2.8418v5.7617h-1.8066v-10.938h1.8066v1.6992c0.3776-0.66405,0.86914-1.1556,1.4746-1.4746,0.60547-0.3255,1.3411-0.48827,2.207-0.48828,0.12369,0.00001,0.26041,0.01,0.41016,0.0293,0.14973,0.013,0.31575,0.0358,0.49805,0.0684l0.01,1.8457&quot;/&gt; &lt;/g&gt; &lt;/g&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; font-weight=&quot;normal&quot; font-size=&quot;20px&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-style=&quot;normal&quot; font-family=&quot;Sans&quot; line-height=&quot;125%&quot; fill=&quot;#000&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m414.05,245.22,5.0781,16.436-1.6602,0-5.0781-16.436,1.6602,0&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m430.13,253.19,0,6.6016-1.7969,0,0-6.543c-0.00001-1.0352-0.20184-1.8099-0.60547-2.3242-0.40366-0.51431-1.0091-0.77147-1.8164-0.77148-0.97006,0.00001-1.735,0.30925-2.2949,0.92773-0.5599,0.6185-0.83985,1.4616-0.83985,2.5293v6.1816h-1.8066v-10.938h1.8066v1.6992c0.42969-0.65754,0.93424-1.1491,1.5137-1.4746,0.58593-0.32551,1.2598-0.48827,2.0215-0.48828,1.2565,0.00001,2.207,0.39063,2.8516,1.1719,0.64452,0.77475,0.96679,1.9173,0.9668,3.4277&quot;/&gt; &lt;/g&gt; &lt;/g&gt; &lt;g transform=&quot;matrix(0.63919169,0,0,0.63919169,-38.60796,418.85171)&quot;&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; font-weight=&quot;normal&quot; font-size=&quot;40px&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-style=&quot;normal&quot; font-family=&quot;Ubuntu Mono&quot; line-height=&quot;125%&quot; fill=&quot;#000&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m457.9,263.43c-0.93335,0.53334-1.9334,0.92-3,1.16-1.04,0.26667-2.16,0.4-3.36,0.4-1.4667,0-2.8267-0.25333-4.08-0.76-1.2267-0.53333-2.2933-1.32-3.2-2.36-0.90667-1.0667-1.6267-2.4133-2.16-4.04-0.50667-1.6266-0.76-3.5466-0.76-5.76,0-2.1066,0.26667-3.96,0.8-5.56,0.56-1.6,1.3067-2.9466,2.24-4.04,0.93333-1.0933,2.0267-1.92,3.28-2.48,1.2533-0.55997,2.5867-0.83997,4-0.84,0.98666,0.00003,1.9867,0.13336,3,0.4,1.04,0.2667,2.0533,0.7067,3.04,1.32l-0.96,2.72c-1.76-1.0133-3.4133-1.52-4.96-1.52-1.0933,0.00003-2.08,0.24003-2.96,0.72-0.85334,0.45336-1.5867,1.12-2.2,2-0.61334,0.88002-1.0933,1.9334-1.44,3.16-0.32,1.2267-0.48,2.6-0.48,4.12,0,1.7067,0.17333,3.1867,0.52,4.44,0.37333,1.2533,0.88,2.2933,1.52,3.12,0.64,0.82667,1.4,1.44,2.28,1.84,0.90666,0.40001,1.88,0.60001,2.92,0.6,0.77332,0.00001,1.5867-0.0933,2.44-0.28,0.85332-0.21333,1.7333-0.57333,2.64-1.08l0.88,2.72&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m477.9,255.19c-0.00001,1.4667-0.21335,2.8-0.64,4-0.40001,1.1733-0.97335,2.1867-1.72,3.04-0.74668,0.85334-1.64,1.52-2.68,2-1.04,0.45334-2.1733,0.68-3.4,0.68-1.2,0-2.32-0.22666-3.36-0.68-1.0133-0.48-1.8933-1.1467-2.64-2-0.74667-0.85333-1.3333-1.8667-1.76-3.04-0.4-1.2-0.6-2.5333-0.6-4,0-1.4666,0.2-2.8,0.6-4,0.42667-1.2,1.0133-2.2133,1.76-3.04,0.74667-0.85331,1.6267-1.5066,2.64-1.96,1.04-0.47998,2.16-0.71998,3.36-0.72,1.2267,0.00002,2.36,0.24002,3.4,0.72,1.04,0.45336,1.9333,1.1067,2.68,1.96,0.74665,0.82669,1.32,1.84,1.72,3.04,0.42665,1.2,0.63999,2.5334,0.64,4m-3.4,0c-0.00001-2.1066-0.45334-3.76-1.36-4.96-0.90668-1.2266-2.1333-1.84-3.68-1.84-1.52,0.00002-2.7333,0.61335-3.64,1.84-0.88,1.2-1.32,2.8534-1.32,4.96,0,2.08,0.44,3.7333,1.32,4.96,0.90666,1.2,2.12,1.8,3.64,1.8,1.5467,0.00001,2.7733-0.59999,3.68-1.8,0.90666-1.2267,1.36-2.88,1.36-4.96&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m497.9,255.19c-0.00001,1.4667-0.21335,2.8-0.64,4-0.40001,1.1733-0.97335,2.1867-1.72,3.04-0.74668,0.85334-1.64,1.52-2.68,2-1.04,0.45334-2.1733,0.68-3.4,0.68-1.2,0-2.32-0.22666-3.36-0.68-1.0133-0.48-1.8933-1.1467-2.64-2-0.74667-0.85333-1.3333-1.8667-1.76-3.04-0.4-1.2-0.6-2.5333-0.6-4,0-1.4666,0.2-2.8,0.6-4,0.42667-1.2,1.0133-2.2133,1.76-3.04,0.74667-0.85331,1.6267-1.5066,2.64-1.96,1.04-0.47998,2.16-0.71998,3.36-0.72,1.2267,0.00002,2.36,0.24002,3.4,0.72,1.04,0.45336,1.9333,1.1067,2.68,1.96,0.74665,0.82669,1.32,1.84,1.72,3.04,0.42665,1.2,0.63999,2.5334,0.64,4m-3.4,0c-0.00001-2.1066-0.45334-3.76-1.36-4.96-0.90668-1.2266-2.1333-1.84-3.68-1.84-1.52,0.00002-2.7333,0.61335-3.64,1.84-0.88,1.2-1.32,2.8534-1.32,4.96,0,2.08,0.44,3.7333,1.32,4.96,0.90666,1.2,2.12,1.8,3.64,1.8,1.5467,0.00001,2.7733-0.59999,3.68-1.8,0.90666-1.2267,1.36-2.88,1.36-4.96&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m509.02,254.27c0.71999,0.53335,1.5333,1.2134,2.44,2.04,0.90666,0.80001,1.8,1.6667,2.68,2.6,0.90665,0.93334,1.76,1.8933,2.56,2.88,0.79999,0.96001,1.44,1.8533,1.92,2.68h-3.92c-0.50668-0.82666-1.1333-1.6667-1.88-2.52-0.74668-0.87999-1.5467-1.72-2.4-2.52-0.82667-0.79999-1.6667-1.5333-2.52-2.2-0.82667-0.66665-1.5733-1.2266-2.24-1.68v8.92h-3.32v-27.16l3.32-0.56v16.92c1.4667-1.28,2.9333-2.5466,4.4-3.8,1.4667-1.28,2.7867-2.6,3.96-3.96h3.88c-1.1467,1.36-2.5334,2.76-4.16,4.2-1.6,1.44-3.1733,2.8267-4.72,4.16&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m527.86,243.03c-0.69334,0.00003-1.2933-0.23997-1.8-0.72-0.50667-0.47997-0.76-1.1333-0.76-1.96,0-0.82664,0.25333-1.48,0.76-1.96,0.50666-0.47997,1.1067-0.71997,1.8-0.72,0.71999,0.00003,1.32,0.24003,1.8,0.72,0.50666,0.48003,0.75999,1.1334,0.76,1.96-0.00001,0.82669-0.25334,1.48-0.76,1.96-0.48001,0.48003-1.08,0.72003-1.8,0.72m-0.84,5.64-5.36,0,0-2.76,8.64,0,0,11.4c-0.00001,1.84,0.25333,3.08,0.76,3.72,0.50666,0.61334,1.2667,0.92001,2.28,0.92,0.77332,0.00001,1.48-0.0933,2.12-0.28,0.66665-0.18666,1.1866-0.38666,1.56-0.6l0.48,2.8c-0.16001,0.08-0.38668,0.18667-0.68,0.32-0.29335,0.10667-0.64001,0.21334-1.04,0.32-0.37335,0.10667-0.80001,0.2-1.28,0.28-0.45334,0.08-0.93334,0.12-1.44,0.12-1.1733,0-2.1467-0.16-2.92-0.48-0.77334-0.32-1.4-0.79999-1.88-1.44-0.45334-0.63999-0.77334-1.4267-0.96-2.36-0.18667-0.95999-0.28-2.0667-0.28-3.32v-8.64&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m549.86,245.47c2.5067,0.00002,4.44,0.78669,5.8,2.36,1.36,1.5467,2.04,3.9067,2.04,7.08v1.16h-13.28c0.13333,1.92,0.76,3.3867,1.88,4.4,1.1467,0.98667,2.7467,1.48,4.8,1.48,1.1733,0.00001,2.1733-0.0933,3-0.28,0.82665-0.18666,1.4533-0.38666,1.88-0.6l0.44,2.8c-0.40001,0.21334-1.12,0.44-2.16,0.68s-2.2133,0.36-3.52,0.36c-1.6,0-3.0133-0.24-4.24-0.72-1.2-0.50666-2.2-1.1867-3-2.04-0.8-0.85333-1.4-1.8667-1.8-3.04-0.4-1.2-0.6-2.4933-0.6-3.88,0-1.6533,0.25333-3.0933,0.76-4.32,0.50667-1.2266,1.1733-2.24,2-3.04,0.82666-0.79998,1.76-1.4,2.8-1.8,1.04-0.39998,2.1067-0.59998,3.2-0.6m4.48,7.92c-0.00001-1.5733-0.41334-2.8133-1.24-3.72-0.82668-0.93331-1.92-1.4-3.28-1.4-0.77334,0.00002-1.48,0.14669-2.12,0.44-0.61334,0.29335-1.1467,0.68002-1.6,1.16-0.45334,0.48002-0.81334,1.0267-1.08,1.64-0.26667,0.61335-0.44,1.24-0.52,1.88h9.84&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m572.46,261.91c-0.00001,0.80001-0.26668,1.5067-0.8,2.12-0.53334,0.61334-1.24,0.92-2.12,0.92-0.90667,0-1.6267-0.30666-2.16-0.92-0.53334-0.61333-0.8-1.32-0.8-2.12,0-0.82666,0.26666-1.5467,0.8-2.16,0.53333-0.61332,1.2533-0.91999,2.16-0.92,0.87999,0.00001,1.5867,0.30668,2.12,0.92,0.53332,0.61334,0.79999,1.3333,0.8,2.16m0-12.92c-0.00001,0.80002-0.26668,1.5067-0.8,2.12-0.53334,0.61335-1.24,0.92002-2.12,0.92-0.90667,0.00002-1.6267-0.30665-2.16-0.92-0.53334-0.61332-0.8-1.32-0.8-2.12,0-0.82665,0.26666-1.5466,0.8-2.16,0.53333-0.61331,1.2533-0.91998,2.16-0.92,0.87999,0.00002,1.5867,0.30669,2.12,0.92,0.53332,0.61335,0.79999,1.3334,0.8,2.16&quot;/&gt; &lt;/g&gt; &lt;path stroke-linejoin=&quot;round&quot; d=&quot;m437.14,232.36,165,0,0,42.857-165,0z&quot; stroke=&quot;#000&quot; stroke-linecap=&quot;round&quot; stroke-miterlimit=&quot;4&quot; stroke-width=&quot;0.60000002&quot; fill=&quot;none&quot;/&gt; &lt;/g&gt; &lt;g transform=&quot;matrix(0.63919169,0,0,0.63919169,-39.560748,419.30827)&quot;&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; font-weight=&quot;normal&quot; font-size=&quot;40px&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-style=&quot;normal&quot; font-family=&quot;Ubuntu Mono&quot; line-height=&quot;125%&quot; fill=&quot;#000&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m623.63,261.4c0.82665,0,1.56-0.0267,2.2-0.08,0.66665-0.0533,1.2133-0.12,1.64-0.2v-5.52c-0.42668-0.13332-0.94668-0.23999-1.56-0.32-0.58668-0.08-1.2134-0.11999-1.88-0.12-0.61335,0.00001-1.2134,0.0533-1.8,0.16-0.58668,0.08-1.1067,0.24001-1.56,0.48-0.45334,0.24001-0.82668,0.56001-1.12,0.96-0.29334,0.37334-0.44001,0.85334-0.44,1.44-0.00001,1.2,0.39999,2.04,1.2,2.52,0.82666,0.45334,1.9333,0.68,3.32,0.68m-0.32-16.64c1.3866,0.00002,2.5466,0.17335,3.48,0.52,0.95998,0.34669,1.7333,0.82668,2.32,1.44,0.58665,0.61335,0.99998,1.36,1.24,2.24,0.23998,0.88001,0.35998,1.84,0.36,2.88v11.6c-0.77335,0.13333-1.8,0.29333-3.08,0.48-1.2534,0.18667-2.5467,0.28-3.88,0.28-1.0134,0-2-0.0933-2.96-0.28-0.96001-0.16-1.8133-0.45333-2.56-0.88-0.74667-0.45333-1.3467-1.0667-1.8-1.84-0.45334-0.77333-0.68001-1.76-0.68-2.96-0.00001-1.0667,0.22666-1.96,0.68-2.68,0.47999-0.74666,1.08-1.3467,1.8-1.8,0.74666-0.45332,1.5867-0.77332,2.52-0.96,0.95999-0.21332,1.92-0.31999,2.88-0.32,1.3066,0.00001,2.5866,0.14668,3.84,0.44v-0.92c-0.00002-0.55999-0.0667-1.0933-0.2-1.6-0.10668-0.53332-0.33335-1.0133-0.68-1.44-0.32002-0.42665-0.77335-0.75998-1.36-1-0.56001-0.26665-1.2934-0.39998-2.2-0.4-1.1467,0.00002-2.1467,0.08-3,0.24-0.85334,0.16002-1.5067,0.32002-1.96,0.48l-0.4-2.72c0.45333-0.21331,1.2-0.39998,2.24-0.56,1.0667-0.15998,2.2-0.23998,3.4-0.24&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m639.59,245.88c0.39999-0.23998,0.97332-0.47998,1.72-0.72,0.77332-0.26665,1.6266-0.39998,2.56-0.4,1.2533,0.00002,2.3733,0.24002,3.36,0.72,0.98665,0.48002,1.8133,1.1467,2.48,2,0.69331,0.85335,1.2133,1.88,1.56,3.08,0.37331,1.1734,0.55998,2.48,0.56,3.92-0.00002,1.4933-0.21336,2.84-0.64,4.04-0.42669,1.2-1.0267,2.2267-1.8,3.08-0.77335,0.82667-1.7067,1.4667-2.8,1.92-1.0934,0.45333-2.3067,0.68-3.64,0.68-1.4667,0-2.7733-0.10667-3.92-0.32s-2.0667-0.42667-2.76-0.64v-26.64l3.32-0.56v9.84m0,15c0.50666,0.13334,1.0133,0.24,1.52,0.32,0.50665,0.0533,0.98665,0.08,1.44,0.08,1.84,0,3.28-0.56,4.32-1.68,1.04-1.1467,1.56-2.8533,1.56-5.12-0.00002-0.95999-0.0934-1.8533-0.28-2.68-0.18668-0.85332-0.48002-1.5733-0.88-2.16-0.40002-0.61332-0.92002-1.0933-1.56-1.44-0.61335-0.34665-1.36-0.51998-2.24-0.52-0.77335,0.00002-1.52,0.16002-2.24,0.48-0.72001,0.29335-1.2667,0.61335-1.64,0.96v11.76&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m655.39,254.52c-0.00001-1.68,0.26666-3.1333,0.8-4.36,0.53333-1.2266,1.2667-2.24,2.2-3.04,0.93332-0.79998,2.0133-1.3866,3.24-1.76,1.2533-0.39998,2.5866-0.59998,4-0.6,0.90665,0.00002,1.8,0.0667,2.68,0.2,0.90665,0.10669,1.8666,0.32002,2.88,0.64l-0.76,2.84c-0.88002-0.31998-1.6934-0.51998-2.44-0.6-0.72002-0.10665-1.4534-0.15998-2.2-0.16-0.96001,0.00002-1.8667,0.13335-2.72,0.4-0.85335,0.24002-1.6,0.64002-2.24,1.2-0.61334,0.53335-1.1067,1.24-1.48,2.12-0.37334,0.85335-0.56001,1.8933-0.56,3.12-0.00001,1.1733,0.17332,2.1867,0.52,3.04,0.34666,0.82667,0.82666,1.52,1.44,2.08,0.63999,0.53334,1.4,0.93334,2.28,1.2,0.87999,0.26667,1.8533,0.4,2.92,0.4,0.85332,0,1.6666-0.04,2.44-0.12,0.79998-0.10666,1.6666-0.32,2.6-0.64l0.48,2.76c-0.93335,0.34667-1.88,0.58667-2.84,0.72-0.96002,0.16-2,0.24-3.12,0.24-1.4934,0-2.8667-0.2-4.12-0.6-1.2267-0.42667-2.2933-1.04-3.2-1.84-0.88001-0.8-1.5733-1.8-2.08-3-0.48001-1.2267-0.72001-2.64-0.72-4.24&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m687.27,249.12c-0.37335-0.34665-0.92002-0.66665-1.64-0.96-0.72001-0.31998-1.4667-0.47998-2.24-0.48-0.88001,0.00002-1.64,0.17335-2.28,0.52-0.61334,0.34668-1.12,0.82668-1.52,1.44-0.40001,0.58668-0.69334,1.3067-0.88,2.16-0.18668,0.82668-0.28001,1.72-0.28,2.68-0.00001,2.16,0.50666,3.8267,1.52,5s2.3333,1.76,3.96,1.76c0.82665,0,1.52-0.04,2.08-0.12,0.58665-0.08,1.0133-0.16,1.28-0.24v-11.76m0-12.52,3.32-0.56,0,27.2c-0.72002,0.21333-1.64,0.42667-2.76,0.64s-2.4267,0.32-3.92,0.32c-1.3334,0-2.5467-0.22667-3.64-0.68s-2.0267-1.0933-2.8-1.92c-0.77334-0.85333-1.3733-1.88-1.8-3.08-0.42667-1.2-0.64001-2.5467-0.64-4.04-0.00001-1.44,0.17333-2.7466,0.52-3.92,0.37333-1.2,0.90666-2.2266,1.6-3.08,0.69333-0.85332,1.52-1.52,2.48-2,0.98666-0.47998,2.1066-0.71998,3.36-0.72,0.98665,0.00002,1.8533,0.12002,2.6,0.36,0.74665,0.24002,1.3066,0.49335,1.68,0.76v-9.28&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m703.79,244.76c2.5066,0.00002,4.44,0.78669,5.8,2.36,1.36,1.5467,2.04,3.9067,2.04,7.08v1.16h-13.28c0.13332,1.92,0.75999,3.3867,1.88,4.4,1.1467,0.98667,2.7466,1.48,4.8,1.48,1.1733,0,2.1733-0.0933,3-0.28,0.82665-0.18666,1.4533-0.38666,1.88-0.6l0.44,2.8c-0.40002,0.21333-1.12,0.44-2.16,0.68s-2.2134,0.36-3.52,0.36c-1.6,0-3.0134-0.24-4.24-0.72-1.2-0.50667-2.2-1.1867-3-2.04-0.80001-0.85333-1.4-1.8667-1.8-3.04-0.40001-1.2-0.60001-2.4933-0.6-3.88-0.00001-1.6533,0.25333-3.0933,0.76-4.32,0.50666-1.2266,1.1733-2.24,2-3.04,0.82666-0.79998,1.76-1.4,2.8-1.8,1.04-0.39998,2.1066-0.59998,3.2-0.6m4.48,7.92c-0.00002-1.5733-0.41335-2.8133-1.24-3.72-0.82668-0.93332-1.92-1.4-3.28-1.4-0.77335,0.00002-1.48,0.14668-2.12,0.44-0.61334,0.29335-1.1467,0.68002-1.6,1.16-0.45334,0.48001-0.81334,1.0267-1.08,1.64-0.26668,0.61335-0.44001,1.24-0.52,1.88h9.84&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m719.87,263.76,0-15.8-3.92,0,0-2.76,3.92,0,0-1.68c-0.00001-1.44,0.19999-2.6266,0.6-3.56,0.39999-0.95997,0.91999-1.7333,1.56-2.32,0.66665-0.58664,1.4266-0.99997,2.28-1.24,0.87998-0.23997,1.8-0.35997,2.76-0.36,0.95998,0.00003,1.92,0.10669,2.88,0.32,0.98665,0.21336,1.9066,0.46669,2.76,0.76l-0.6,2.84c-0.58669-0.29331-1.32-0.54664-2.2-0.76-0.88002-0.21331-1.7734-0.31997-2.68-0.32-0.56002,0.00003-1.0934,0.08-1.6,0.24-0.48002,0.13336-0.90668,0.38669-1.28,0.76-0.37335,0.34669-0.66668,0.82669-0.88,1.44-0.21335,0.58669-0.32001,1.3334-0.32,2.24v1.64h7.48v2.76h-7.48v15.8h-3.28&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m747.27,262.04c-0.37335,0.21334-0.94668,0.44-1.72,0.68-0.77335,0.24-1.6667,0.36-2.68,0.36-1.0934,0-2.12-0.17333-3.08-0.52-0.93334-0.37333-1.76-0.92-2.48-1.64-0.69334-0.74666-1.2533-1.68-1.68-2.8-0.40001-1.1467-0.60001-2.4933-0.6-4.04-0.00001-1.36,0.18666-2.6,0.56-3.72,0.39999-1.1466,0.95999-2.1333,1.68-2.96,0.74666-0.82665,1.6533-1.4666,2.72-1.92,1.0667-0.47998,2.28-0.71998,3.64-0.72,1.6,0.00002,2.96,0.12002,4.08,0.36,1.1466,0.21335,2.1066,0.42669,2.88,0.64v16.56c-0.00002,2.88-0.73335,4.96-2.2,6.24-1.44,1.28-3.6267,1.92-6.56,1.92-1.2-0.00001-2.2933-0.0933-3.28-0.28-0.96001-0.18667-1.8133-0.41334-2.56-0.68l0.6-2.92c0.69333,0.29333,1.48,0.53333,2.36,0.72,0.90666,0.18666,1.8933,0.28,2.96,0.28,1.92,0,3.2933-0.38667,4.12-1.16,0.82665-0.77333,1.24-2.0267,1.24-3.76v-0.64m0-13.92c-0.32002-0.10665-0.76002-0.19998-1.32-0.28-0.56002-0.10665-1.32-0.15998-2.28-0.16-1.7067,0.00002-3.0133,0.58668-3.92,1.76-0.88001,1.1734-1.32,2.7334-1.32,4.68-0.00001,1.0667,0.11999,1.9867,0.36,2.76,0.26666,0.74667,0.61332,1.3733,1.04,1.88,0.45332,0.48,0.95999,0.84,1.52,1.08,0.55999,0.21334,1.16,0.32,1.8,0.32,0.82665,0,1.6-0.12,2.32-0.36,0.74665-0.24,1.3466-0.52,1.8-0.84v-10.84&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m756.27,263.76,0-27.16,3.32-0.56,0,9.44c0.53332-0.21331,1.1333-0.37331,1.8-0.48,0.66665-0.13331,1.32-0.19998,1.96-0.2,1.4133,0.00002,2.5866,0.21335,3.52,0.64,0.95998,0.40002,1.72,0.97335,2.28,1.72,0.55998,0.74668,0.95998,1.64,1.2,2.68,0.23998,1.04,0.35998,2.1867,0.36,3.44v10.48h-3.28v-9.76c-0.00002-2.2933-0.32002-3.9066-0.96-4.84-0.64002-0.95998-1.7867-1.44-3.44-1.44-0.69335,0.00002-1.3734,0.08-2.04,0.24-0.64001,0.13335-1.1067,0.26668-1.4,0.4v15.4h-3.32&quot;/&gt; &lt;/g&gt; &lt;path stroke-linejoin=&quot;round&quot; d=&quot;m611.07,231.65,165,0,0,42.857-165,0z&quot; stroke=&quot;#000&quot; stroke-linecap=&quot;round&quot; stroke-miterlimit=&quot;4&quot; stroke-width=&quot;0.60000002&quot; fill=&quot;none&quot;/&gt; &lt;/g&gt; &lt;g transform=&quot;matrix(0.63919169,0,0,0.63919169,-41.655947,419.30827)&quot;&gt; &lt;path stroke-linejoin=&quot;round&quot; d=&quot;m786.79,231.65,165,0,0,42.857-165,0z&quot; stroke=&quot;#000&quot; stroke-linecap=&quot;round&quot; stroke-miterlimit=&quot;4&quot; stroke-width=&quot;0.60000002&quot; fill=&quot;none&quot;/&gt; &lt;g font-size=&quot;20px&quot; font-family=&quot;Sans&quot; transform=&quot;translate(-5.7142857,-2.8571491)&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; fill=&quot;#000&quot;&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; line-height=&quot;125%&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m797.48,247.72,5.0781,16.436-1.6602,0-5.0781-16.436,1.6602,0&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m810.8,253.04c-0.20183-0.11718-0.42318-0.20182-0.66406-0.25391-0.23438-0.0586-0.4948-0.0879-0.78125-0.0879-1.0156,0.00001-1.7969,0.33204-2.3438,0.99609-0.54037,0.65756-0.81055,1.6048-0.81055,2.8418v5.7617h-1.8066v-10.938h1.8066v1.6992c0.3776-0.66405,0.86914-1.1556,1.4746-1.4746,0.60546-0.32551,1.3411-0.48827,2.207-0.48828,0.12369,0.00001,0.26041,0.01,0.41016,0.0293,0.14973,0.013,0.31575,0.0358,0.49805,0.0684l0.01,1.8457&quot;/&gt; &lt;/g&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; line-height=&quot;125%&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m816.68,247.72,5.0781,16.436-1.6602,0-5.0781-16.436,1.6602,0&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m832.75,255.69,0,6.6016-1.7969,0,0-6.543c-0.00001-1.0352-0.20183-1.8099-0.60547-2.3242-0.40365-0.51431-1.0091-0.77147-1.8164-0.77148-0.97006,0.00001-1.735,0.30925-2.2949,0.92773-0.5599,0.6185-0.83985,1.4616-0.83985,2.5293v6.1816h-1.8066v-10.938h1.8066v1.6992c0.42969-0.65754,0.93424-1.1491,1.5137-1.4746,0.58594-0.32551,1.2598-0.48827,2.0215-0.48828,1.2565,0.00001,2.207,0.39063,2.8516,1.1719,0.64452,0.77475,0.96679,1.9173,0.9668,3.4277&quot;/&gt; &lt;/g&gt; &lt;/g&gt; &lt;g font-size=&quot;20px&quot; font-family=&quot;Sans&quot; transform=&quot;translate(-25.714285,-2.8571491)&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; fill=&quot;#000&quot;&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; line-height=&quot;125%&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m859.63,247.72,5.0781,16.436-1.6602,0-5.0781-16.436,1.6602,0&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m872.95,253.04c-0.20183-0.11718-0.42318-0.20182-0.66406-0.25391-0.23438-0.0586-0.4948-0.0879-0.78125-0.0879-1.0156,0.00001-1.7969,0.33204-2.3438,0.99609-0.54037,0.65756-0.81055,1.6048-0.81055,2.8418v5.7617h-1.8066v-10.938h1.8066v1.6992c0.3776-0.66405,0.86914-1.1556,1.4746-1.4746,0.60547-0.32551,1.3411-0.48827,2.207-0.48828,0.1237,0.00001,0.26041,0.01,0.41016,0.0293,0.14973,0.013,0.31575,0.0358,0.49805,0.0684l0.01,1.8457&quot;/&gt; &lt;/g&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; line-height=&quot;125%&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m878.82,247.72,5.0781,16.436-1.6602,0-5.0781-16.436,1.6602,0&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m894.89,255.69,0,6.6016-1.7969,0,0-6.543c-0.00001-1.0352-0.20183-1.8099-0.60547-2.3242-0.40366-0.51431-1.0091-0.77147-1.8164-0.77148-0.97006,0.00001-1.735,0.30925-2.2949,0.92773-0.5599,0.6185-0.83985,1.4616-0.83984,2.5293v6.1816h-1.8066v-10.938h1.8066v1.6992c0.42968-0.65754,0.93424-1.1491,1.5137-1.4746,0.58593-0.32551,1.2598-0.48827,2.0215-0.48828,1.2565,0.00001,2.207,0.39063,2.8516,1.1719,0.64452,0.77475,0.96678,1.9173,0.96679,3.4277&quot;/&gt; &lt;/g&gt; &lt;/g&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; font-weight=&quot;normal&quot; font-size=&quot;40px&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-style=&quot;normal&quot; font-family=&quot;Ubuntu Mono&quot; line-height=&quot;125%&quot; fill=&quot;#000&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m885.06,262.36c-0.26668-0.53334-0.60001-1.12-1-1.76-0.37334-0.64-0.78668-1.2933-1.24-1.96-0.45334-0.69333-0.93334-1.3733-1.44-2.04-0.48001-0.66666-0.96001-1.2933-1.44-1.88-0.48001,0.61334-0.98667,1.2533-1.52,1.92-0.53334,0.66667-1.0533,1.3467-1.56,2.04-0.48,0.66667-0.93334,1.32-1.36,1.96-0.42667,0.64-0.78667,1.2133-1.08,1.72h-3.4c0.88-1.6,1.9467-3.24,3.2-4.92,1.28-1.7067,2.5333-3.32,3.76-4.84l-6.68-8.8h3.72l5,6.48,4.6-6.48h3.52l-6.12,8.6c1.2,1.5733,2.4,3.2133,3.6,4.92,1.2266,1.7067,2.2666,3.3867,3.12,5.04h-3.68&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m905.06,262.36c-0.26668-0.53334-0.60001-1.12-1-1.76-0.37334-0.64-0.78668-1.2933-1.24-1.96-0.45334-0.69333-0.93334-1.3733-1.44-2.04-0.48001-0.66666-0.96001-1.2933-1.44-1.88-0.48001,0.61334-0.98667,1.2533-1.52,1.92-0.53334,0.66667-1.0533,1.3467-1.56,2.04-0.48,0.66667-0.93334,1.32-1.36,1.96-0.42667,0.64-0.78667,1.2133-1.08,1.72h-3.4c0.88-1.6,1.9467-3.24,3.2-4.92,1.28-1.7067,2.5333-3.32,3.76-4.84l-6.68-8.8h3.72l5,6.48,4.6-6.48h3.52l-6.12,8.6c1.2,1.5733,2.4,3.2133,3.6,4.92,1.2266,1.7067,2.2666,3.3867,3.12,5.04h-3.68&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m925.06,262.36c-0.26668-0.53334-0.60001-1.12-1-1.76-0.37334-0.64-0.78668-1.2933-1.24-1.96-0.45334-0.69333-0.93334-1.3733-1.44-2.04-0.48001-0.66666-0.96001-1.2933-1.44-1.88-0.48001,0.61334-0.98667,1.2533-1.52,1.92-0.53334,0.66667-1.0533,1.3467-1.56,2.04-0.48,0.66667-0.93334,1.32-1.36,1.96-0.42667,0.64-0.78667,1.2133-1.08,1.72h-3.4c0.88-1.6,1.9467-3.24,3.2-4.92,1.28-1.7067,2.5333-3.32,3.76-4.84l-6.68-8.8h3.72l5,6.48,4.6-6.48h3.52l-6.12,8.6c1.2,1.5733,2.4,3.2133,3.6,4.92,1.2266,1.7067,2.2666,3.3867,3.12,5.04h-3.68&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m945.06,262.36c-0.26668-0.53334-0.60001-1.12-1-1.76-0.37334-0.64-0.78668-1.2933-1.24-1.96-0.45334-0.69333-0.93334-1.3733-1.44-2.04-0.48001-0.66666-0.96001-1.2933-1.44-1.88-0.48001,0.61334-0.98667,1.2533-1.52,1.92-0.53334,0.66667-1.0533,1.3467-1.56,2.04-0.48,0.66667-0.93334,1.32-1.36,1.96-0.42667,0.64-0.78667,1.2133-1.08,1.72h-3.4c0.88-1.6,1.9467-3.24,3.2-4.92,1.28-1.7067,2.5333-3.32,3.76-4.84l-6.68-8.8h3.72l5,6.48,4.6-6.48h3.52l-6.12,8.6c1.2,1.5733,2.4,3.2133,3.6,4.92,1.2266,1.7067,2.2666,3.3867,3.12,5.04h-3.68&quot;/&gt; &lt;/g&gt; &lt;/g&gt; &lt;g transform=&quot;matrix(0.63919169,0,0,0.63919169,68.294977,419.30827)&quot;&gt; &lt;path stroke-linejoin=&quot;round&quot; d=&quot;m959.64,231.65,165,0,0,42.857-165,0z&quot; stroke=&quot;#000&quot; stroke-linecap=&quot;round&quot; stroke-miterlimit=&quot;4&quot; stroke-width=&quot;0.60000002&quot; fill=&quot;none&quot;/&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; font-weight=&quot;normal&quot; font-size=&quot;32px&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-style=&quot;normal&quot; font-family=&quot;Sans&quot; line-height=&quot;125%&quot; fill=&quot;#000&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m969.66,251.75c0-1.2916,0.44791-2.3802,1.3438-3.2656,0.90624-0.89582,2.0156-1.3437,3.3281-1.3438,1.2916,0.00001,2.3802,0.44793,3.2656,1.3438,0.89582,0.88543,1.3437,1.974,1.3438,3.2656-0.00001,1.3021-0.44793,2.401-1.3438,3.2969-0.89584,0.89584-1.9948,1.3438-3.2969,1.3438-1.3021,0.00001-2.401-0.44791-3.2969-1.3438-0.89584-0.89583-1.3438-1.9948-1.3438-3.2969&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m988.53,251.75c0-1.2916,0.44791-2.3802,1.3438-3.2656,0.90624-0.89582,2.0156-1.3437,3.3281-1.3438,1.2916,0.00001,2.3802,0.44793,3.2656,1.3438,0.89582,0.88543,1.3437,1.974,1.3438,3.2656-0.00001,1.3021-0.44793,2.401-1.3438,3.2969-0.89584,0.89584-1.9948,1.3438-3.2969,1.3438-1.3021,0.00001-2.401-0.44791-3.2969-1.3438-0.89584-0.89583-1.3438-1.9948-1.3438-3.2969&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m1007.4,251.75c0-1.2916,0.4479-2.3802,1.3437-3.2656,0.9063-0.89582,2.0156-1.3437,3.3281-1.3438,1.2917,0.00001,2.3802,0.44793,3.2657,1.3438,0.8958,0.88543,1.3437,1.974,1.3437,3.2656,0,1.3021-0.4479,2.401-1.3437,3.2969-0.8959,0.89584-1.9948,1.3438-3.2969,1.3438-1.3021,0.00001-2.4011-0.44791-3.2969-1.3438-0.8958-0.89583-1.3437-1.9948-1.3437-3.2969&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m1026.3,251.75c0-1.2916,0.4479-2.3802,1.3437-3.2656,0.9063-0.89582,2.0156-1.3437,3.3281-1.3438,1.2917,0.00001,2.3802,0.44793,3.2657,1.3438,0.8958,0.88543,1.3437,1.974,1.3437,3.2656,0,1.3021-0.4479,2.401-1.3437,3.2969-0.8959,0.89584-1.9948,1.3438-3.2969,1.3438-1.3021,0.00001-2.4011-0.44791-3.2969-1.3438-0.8958-0.89583-1.3437-1.9948-1.3437-3.2969&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m1045.2,251.75c0-1.2916,0.4479-2.3802,1.3437-3.2656,0.9063-0.89582,2.0156-1.3437,3.3281-1.3438,1.2917,0.00001,2.3802,0.44793,3.2657,1.3438,0.8958,0.88543,1.3437,1.974,1.3437,3.2656,0,1.3021-0.4479,2.401-1.3437,3.2969-0.8959,0.89584-1.9948,1.3438-3.2969,1.3438-1.3021,0.00001-2.4011-0.44791-3.2969-1.3438-0.8958-0.89583-1.3437-1.9948-1.3437-3.2969&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m1064,251.75c0-1.2916,0.4479-2.3802,1.3437-3.2656,0.9063-0.89582,2.0156-1.3437,3.3281-1.3438,1.2917,0.00001,2.3802,0.44793,3.2657,1.3438,0.8958,0.88543,1.3437,1.974,1.3437,3.2656,0,1.3021-0.4479,2.401-1.3437,3.2969-0.8959,0.89584-1.9948,1.3438-3.2969,1.3438-1.3021,0.00001-2.4011-0.44791-3.2969-1.3438-0.8958-0.89583-1.3437-1.9948-1.3437-3.2969&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m1082.9,251.75c0-1.2916,0.4479-2.3802,1.3437-3.2656,0.9063-0.89582,2.0156-1.3437,3.3281-1.3438,1.2917,0.00001,2.3802,0.44793,3.2657,1.3438,0.8958,0.88543,1.3437,1.974,1.3437,3.2656,0,1.3021-0.4479,2.401-1.3437,3.2969-0.8959,0.89584-1.9948,1.3438-3.2969,1.3438-1.3021,0.00001-2.4011-0.44791-3.2969-1.3438-0.8958-0.89583-1.3437-1.9948-1.3437-3.2969&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m1099.6,240.33,15,0,0,1.3438-8.4688,21.984-3.2968,0,7.9687-20.672-11.203,0,0-2.6562&quot;/&gt; &lt;/g&gt; &lt;/g&gt; &lt;g transform=&quot;matrix(0.95076089,0,0,0.95076089,0.79978728,27.937075)&quot;&gt; &lt;path stroke-linejoin=&quot;round&quot; d=&quot;m600.23,567.38,110.93,0,0,28.813-110.93,0z&quot; stroke=&quot;#000&quot; stroke-linecap=&quot;round&quot; stroke-miterlimit=&quot;4&quot; stroke-width=&quot;0.40337694&quot; fill=&quot;none&quot;/&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; font-weight=&quot;normal&quot; font-size=&quot;21.51343727px&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-style=&quot;italic&quot; font-family=&quot;Ubuntu&quot; line-height=&quot;125%&quot; fill=&quot;#000&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m625.12,577.19c-0.22949,0.31554-0.51634,0.7243-0.86054,1.2263-0.34423,0.50199-0.71713,1.0542-1.1187,1.6565-0.4016,0.60238-0.81752,1.2334-1.2478,1.8932-0.43028,0.64541-0.8462,1.2765-1.2478,1.8932-0.40159,0.60238-0.77449,1.1689-1.1187,1.6996-0.34423,0.51632-0.62391,0.93942-0.83903,1.2693h-1.678c-0.0574-0.34421-0.13626-0.77448-0.23664-1.2908-0.0861-0.53066-0.18646-1.0972-0.30119-1.6996-0.11475-0.61671-0.23666-1.2478-0.36573-1.8932-0.11475-0.65974-0.23666-1.2908-0.36573-1.8932-0.11475-0.60237-0.22231-1.1474-0.3227-1.635-0.1004-0.50197-0.18646-0.91073-0.25816-1.2263-0.60239,1.8502-1.1904,3.7577-1.7641,5.7226s-1.133,3.9585-1.678,5.9807h-2.0653c0.34421-1.2908,0.70277-2.5888,1.0757-3.8939,0.38724-1.3195,0.77448-2.6103,1.1617-3.8724,0.40158-1.2765,0.79599-2.5171,1.1832-3.7218,0.40158-1.2047,0.78882-2.345,1.1617-3.4206h2.0438c0.1721,0.63107,0.35137,1.3769,0.53783,2.2374,0.20079,0.86055,0.39441,1.7641,0.58086,2.7107,0.20079,0.93226,0.38007,1.8645,0.53784,2.7967,0.1721,0.93226,0.31552,1.7784,0.43027,2.5386,0.51631-0.77448,1.0828-1.6278,1.6996-2.5601,0.63105-0.93224,1.2621-1.8645,1.8932-2.7968,0.63105-0.94658,1.2406-1.843,1.8286-2.6892,0.60236-0.86052,1.1402-1.6063,1.6135-2.2374h2.0008c-0.24383,2.4239-0.57371,4.8907-0.98961,7.4006-0.40161,2.4956-0.84622,4.9983-1.3338,7.5082h-2.0868c0.43025-2.0653,0.82466-4.066,1.1832-6.0022,0.35854-1.9505,0.67407-3.8509,0.94659-5.7011&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m631.12,585.06-2.1083,3.8294-2.2804,0c1.6063-2.8971,3.1696-5.5648,4.6899-8.003,1.5346-2.4382,3.0477-4.7401,4.5393-6.9058h2.0438c0.21513,1.0757,0.40875,2.1657,0.58087,3.27,0.18643,1.09,0.36571,2.2374,0.53783,3.4422,0.1721,1.2048,0.33703,2.4812,0.49481,3.8294,0.15775,1.3482,0.32269,2.8039,0.49481,4.3672h-2.1083c-0.0717-0.6454-0.13626-1.2908-0.19362-1.9362-0.0574-0.65974-0.12192-1.2908-0.19362-1.8932h-6.4971m6.3034-1.678c-0.11475-1.1617-0.251-2.3163-0.40875-3.4637-0.14344-1.1474-0.31555-2.3306-0.51633-3.5497-0.50199,0.73147-1.1259,1.6781-1.8717,2.8398-0.7458,1.1474-1.592,2.5386-2.5386,4.1736h5.3353&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m647.95,589.22c-0.93226,0-1.7569-0.13625-2.474-0.40875-0.70277-0.27251-1.2908-0.65975-1.7641-1.1617-0.4733-0.50198-0.83185-1.1044-1.0757-1.8071-0.22948-0.71711-0.34422-1.5203-0.34422-2.4095,0-1.2908,0.20079-2.5242,0.60238-3.7003,0.41592-1.1761,0.99679-2.2159,1.7426-3.1194,0.76013-0.90355,1.6709-1.6207,2.7322-2.1514,1.0613-0.54499,2.2446-0.81749,3.5497-0.81751,1.1187,0.00002,2.0079,0.11476,2.6677,0.34422,0.67407,0.22949,1.1545,0.44462,1.4414,0.6454l-0.86054,1.7211c-0.32988-0.21513-0.78167-0.41592-1.3553-0.60238-0.55937-0.20078-1.2263-0.30118-2.0008-0.30119-0.98963,0.00001-1.8788,0.23666-2.6677,0.70994-0.78883,0.45897-1.4558,1.0614-2.0008,1.8071-0.54501,0.73147-0.96094,1.5633-1.2478,2.4956-0.28685,0.91792-0.43027,1.8286-0.43027,2.7322,0,2.7968,1.2119,4.1951,3.6358,4.1951,0.51632,0,0.97527-0.0359,1.3769-0.10757,0.41592-0.0717,0.78165-0.15059,1.0972-0.23665,0.31552-0.10039,0.59519-0.20796,0.83902-0.3227,0.24381-0.11473,0.45894-0.21513,0.64541-0.30119l0.25816,1.8071c-0.17212,0.1004-0.4016,0.20797-0.68843,0.3227-0.27252,0.11474-0.59522,0.22231-0.96811,0.32271-0.37291,0.10039-0.78883,0.17927-1.2478,0.23664-0.45896,0.0717-0.9466,0.10757-1.4629,0.10757&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m668.22,586.68c-0.00002,0.32987,0.0287,0.66691,0.0861,1.0111,0.0574,0.32987,0.15775,0.68843,0.30119,1.0757l-1.7641,0.25816c-0.15778-0.31553-0.27969-0.6956-0.36573-1.1402-0.31554,0.28684-0.73864,0.57369-1.2693,0.86054-0.53067,0.28684-1.1832,0.43026-1.9577,0.43026-0.63106,0-1.1761-0.0932-1.635-0.27967-0.45896-0.20079-0.83903-0.48047-1.1402-0.83902-0.30119-0.35856-0.5235-0.78166-0.66692-1.2693-0.14342-0.50197-0.21513-1.047-0.21513-1.635,0-0.96093,0.15776-1.9004,0.47329-2.8183,0.32987-0.9179,0.81034-1.7354,1.4414-2.4525,0.6454-0.71711,1.4486-1.2908,2.4095-1.7211,0.96092-0.4446,2.0796-0.6669,3.3561-0.66691,0.15776,0.00001,0.31552,0.007,0.4733,0.0215,0.15775,0.0143,0.32269,0.0359,0.49481,0.0645l1.2048-5.0341,2.0868-0.34422-3.0334,12.585c-0.0717,0.32988-0.13626,0.64541-0.19362,0.94659-0.0574,0.3012-0.0861,0.61673-0.0861,0.9466m-4.5608,0.79599c0.60237,0,1.1115-0.12191,1.5274-0.36573,0.43026-0.25815,0.80316-0.55217,1.1187-0.88205,0.0143-0.22947,0.0359-0.47329,0.0645-0.73145,0.043-0.2725,0.10039-0.56652,0.17211-0.88205l1.2908-5.3784c-0.12909-0.0287-0.27251-0.043-0.43027-0.043-0.15777-0.0143-0.30836-0.0215-0.45178-0.0215-0.81752,0.00001-1.5561,0.15777-2.2159,0.47329-0.65975,0.31554-1.2263,0.73864-1.6996,1.2693-0.45896,0.53068-0.81752,1.1474-1.0757,1.8502-0.24383,0.68844-0.36574,1.4127-0.36573,2.1729-0.00001,0.32987,0.0358,0.6454,0.10756,0.94659,0.0717,0.30119,0.18645,0.57369,0.34422,0.81751,0.15776,0.22948,0.36572,0.41593,0.62389,0.55935,0.2725,0.14342,0.60237,0.21513,0.98962,0.21513&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m678.54,589.02c-0.0717-0.15777-0.14343-0.32987-0.21514-0.51632-0.0717-0.20079-0.12909-0.40876-0.1721-0.62389-0.31554,0.28684-0.73864,0.57369-1.2693,0.86054-0.53067,0.28684-1.1832,0.43026-1.9577,0.43026-0.63106,0-1.1761-0.10039-1.635-0.30118-0.44461-0.2008-0.81034-0.48047-1.0972-0.83903-0.28684-0.35855-0.50198-0.78165-0.6454-1.2693-0.12908-0.48764-0.19362-1.0255-0.19362-1.6135,0-0.96093,0.15776-1.9004,0.4733-2.8183,0.32987-0.9179,0.8175-1.7354,1.4629-2.4525,0.6454-0.71711,1.4557-1.298,2.431-1.7426,0.97527-0.4446,2.1155-0.6669,3.4206-0.66692,0.38724,0.00002,0.83902,0.043,1.3554,0.12908,0.51631,0.0861,0.96092,0.22949,1.3338,0.43027l-1.6565,6.7552c-0.0717,0.32988-0.13626,0.64541-0.19362,0.94659-0.043,0.3012-0.0646,0.61673-0.0645,0.9466-0.00001,0.32987,0.0287,0.66691,0.0861,1.0111,0.0574,0.32987,0.15776,0.68843,0.30119,1.0757l-1.7641,0.25816m-3.2055-1.549c0.60237,0,1.1187-0.12908,1.549-0.38724,0.43026-0.25816,0.80316-0.55935,1.1187-0.90356,0.0143-0.24382,0.0358-0.49481,0.0645-0.75297,0.043-0.2725,0.0932-0.54501,0.1506-0.81751l1.2908-5.3353c-0.0717-0.0287-0.19363-0.0502-0.36573-0.0645-0.15777-0.0143-0.30119-0.0215-0.43026-0.0215-0.81752,0.00001-1.5562,0.15777-2.2159,0.47329-0.65975,0.31554-1.2263,0.73864-1.6996,1.2693-0.45896,0.51633-0.81751,1.1259-1.0757,1.8286-0.24382,0.68844-0.36573,1.4127-0.36573,2.1729,0,0.30119,0.0287,0.60955,0.0861,0.92507,0.0574,0.3012,0.15776,0.5737,0.30119,0.81752,0.15776,0.22947,0.35855,0.42309,0.60238,0.58086,0.25815,0.14342,0.58803,0.21513,0.98962,0.21513&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m686.44,589.19c-1.0757,0-1.8645-0.23665-2.3665-0.70995-0.50198-0.47329-0.75297-1.1617-0.75297-2.0653,0-0.58803,0.10039-1.341,0.30119-2.2589l2.3019-9.5735,2.0868-0.34421-0.83903,3.4637h3.8079l-0.40875,1.678h-3.8079l-1.1832,4.9481c-0.17211,0.67409-0.25817,1.2621-0.25816,1.7641-0.00001,0.4733,0.12907,0.81752,0.38724,1.0326,0.25816,0.20079,0.68843,0.30119,1.2908,0.30119,0.41592,0,0.82467-0.0645,1.2263-0.19363,0.40158-0.14342,0.70994-0.2725,0.92508-0.38724l0.15059,1.6996c-0.21514,0.12909-0.58087,0.26534-1.0972,0.40876-0.51633,0.15776-1.1044,0.23665-1.7641,0.23665&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m698.5,589.02c-0.0717-0.15777-0.14343-0.32987-0.21513-0.51632-0.0717-0.20079-0.12909-0.40876-0.17211-0.62389-0.31554,0.28684-0.73864,0.57369-1.2693,0.86054-0.53068,0.28684-1.1832,0.43026-1.9577,0.43026-0.63106,0-1.1761-0.10039-1.635-0.30118-0.44461-0.2008-0.81034-0.48047-1.0972-0.83903-0.28685-0.35855-0.50199-0.78165-0.64541-1.2693-0.12908-0.48764-0.19362-1.0255-0.19362-1.6135,0-0.96093,0.15777-1.9004,0.4733-2.8183,0.32987-0.9179,0.81751-1.7354,1.4629-2.4525,0.6454-0.71711,1.4557-1.298,2.431-1.7426,0.97527-0.4446,2.1155-0.6669,3.4206-0.66692,0.38723,0.00002,0.83901,0.043,1.3553,0.12908,0.51631,0.0861,0.96092,0.22949,1.3338,0.43027l-1.6565,6.7552c-0.0717,0.32988-0.13626,0.64541-0.19362,0.94659-0.043,0.3012-0.0646,0.61673-0.0645,0.9466-0.00001,0.32987,0.0287,0.66691,0.0861,1.0111,0.0574,0.32987,0.15776,0.68843,0.30119,1.0757l-1.7641,0.25816m-3.2055-1.549c0.60237,0,1.1187-0.12908,1.549-0.38724,0.43026-0.25816,0.80316-0.55935,1.1187-0.90356,0.0143-0.24382,0.0358-0.49481,0.0645-0.75297,0.043-0.2725,0.0932-0.54501,0.1506-0.81751l1.2908-5.3353c-0.0717-0.0287-0.19364-0.0502-0.36573-0.0645-0.15778-0.0143-0.3012-0.0215-0.43027-0.0215-0.81752,0.00001-1.5562,0.15777-2.2159,0.47329-0.65975,0.31554-1.2263,0.73864-1.6996,1.2693-0.45896,0.51633-0.81751,1.1259-1.0757,1.8286-0.24382,0.68844-0.36573,1.4127-0.36573,2.1729,0,0.30119,0.0287,0.60955,0.0861,0.92507,0.0574,0.3012,0.15776,0.5737,0.30118,0.81752,0.15776,0.22947,0.35856,0.42309,0.60238,0.58086,0.25816,0.14342,0.58803,0.21513,0.98962,0.21513&quot;/&gt; &lt;/g&gt; &lt;/g&gt; &lt;/g&gt; &lt;/svg&gt;  &lt;p&gt;The last block contains seven bytes of padding (represented as &amp;bull;) and the final byte is the length of the padding. (And I&#39;ve used a fictional, 8-byte MAC, but that doesn&#39;t matter.) Before transmission, those blocks would be encrypted with 3DES or AES in CBC mode to provide confidentiality.&lt;/p&gt;  &lt;p&gt;Now consider how CBC decryption works at the receiver, thanks to this public domain diagram &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:CBC_decryption.svg&quot;&gt;from Wikipedia&lt;/a&gt;:&lt;/p&gt;  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt; &lt;svg    style=&quot;margin-left: 1cm;&quot;    xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot;    xmlns:cc=&quot;http://creativecommons.org/ns#&quot;    xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot;    xmlns:svg=&quot;http://www.w3.org/2000/svg&quot;    xmlns=&quot;http://www.w3.org/2000/svg&quot;    xmlns:sodipodi=&quot;http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd&quot;    xmlns:inkscape=&quot;http://www.inkscape.org/namespaces/inkscape&quot;    width=&quot;601&quot;    height=&quot;200&quot;    id=&quot;svg2&quot;    version=&quot;1.1&quot;    inkscape:version=&quot;0.48.4 r9939&quot;    sodipodi:docname=&quot;CBC decryption.svg&quot;&gt;   &lt;defs      id=&quot;defs4&quot;&gt;     &lt;marker        inkscape:stockid=&quot;Arrow1Mend&quot;        orient=&quot;auto&quot;        refY=&quot;0.0&quot;        refX=&quot;0.0&quot;        id=&quot;Arrow1Mend&quot;        style=&quot;overflow:visible;&quot;&gt;       &lt;path          id=&quot;path4488&quot;          d=&quot;M 0.0,0.0 L 5.0,-5.0 L -12.5,0.0 L 5.0,5.0 L 0.0,0.0 z &quot;          style=&quot;fill-rule:evenodd;stroke:#000000;stroke-width:1.0pt;&quot;          transform=&quot;scale(0.4) rotate(180) translate(10,0)&quot; /&gt;     &lt;/marker&gt;     &lt;marker        inkscape:stockid=&quot;Arrow1Mend&quot;        orient=&quot;auto&quot;        refY=&quot;0&quot;        refX=&quot;0&quot;        id=&quot;marker11421&quot;        style=&quot;overflow:visible&quot;&gt;       &lt;path          inkscape:connector-curvature=&quot;0&quot;          id=&quot;path11423&quot;          d=&quot;M 0,0 5,-5 -12.5,0 5,5 0,0 z&quot;          style=&quot;fill-rule:evenodd;stroke:#000000;stroke-width:1pt&quot;          transform=&quot;matrix(-0.4,0,0,-0.4,-4,0)&quot; /&gt;     &lt;/marker&gt;   &lt;/defs&gt;   &lt;sodipodi:namedview      id=&quot;base&quot;      pagecolor=&quot;#ffffff&quot;      bordercolor=&quot;#666666&quot;      borderopacity=&quot;1.0&quot;      inkscape:pageopacity=&quot;0.0&quot;      inkscape:pageshadow=&quot;2&quot;      inkscape:zoom=&quot;2&quot;      inkscape:cx=&quot;349.78805&quot;      inkscape:cy=&quot;102.66177&quot;      inkscape:document-units=&quot;px&quot;      inkscape:current-layer=&quot;layer2&quot;      showgrid=&quot;true&quot;      inkscape:window-width=&quot;1918&quot;      inkscape:window-height=&quot;1056&quot;      inkscape:window-x=&quot;0&quot;      inkscape:window-y=&quot;22&quot;      inkscape:window-maximized=&quot;0&quot;      fit-margin-top=&quot;0&quot;      fit-margin-left=&quot;0&quot;      fit-margin-right=&quot;0&quot;      fit-margin-bottom=&quot;0&quot;&gt;     &lt;inkscape:grid        type=&quot;xygrid&quot;        id=&quot;grid3175&quot;        empspacing=&quot;5&quot;        visible=&quot;true&quot;        enabled=&quot;true&quot;        snapvisiblegridlinesonly=&quot;true&quot;        originx=&quot;0.5px&quot;        originy=&quot;0.5px&quot; /&gt;   &lt;/sodipodi:namedview&gt;   &lt;metadata      id=&quot;metadata7&quot;&gt;     &lt;rdf:RDF&gt;       &lt;cc:Work          rdf:about=&quot;&quot;&gt;         &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt;         &lt;dc:type            rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot; /&gt;         &lt;dc:title /&gt;       &lt;/cc:Work&gt;     &lt;/rdf:RDF&gt;   &lt;/metadata&gt;   &lt;g      inkscape:groupmode=&quot;layer&quot;      id=&quot;layer2&quot;      inkscape:label=&quot;vectors&quot;      style=&quot;display:inline&quot;&gt;     &lt;g        id=&quot;g3514&quot;        transform=&quot;translate(20,-6)&quot;&gt;       &lt;text          sodipodi:linespacing=&quot;125%&quot;          id=&quot;text3216&quot;          y=&quot;904.67273&quot;          x=&quot;137.96094&quot;          style=&quot;font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:center;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:middle;fill:#000000;fill-opacity:1;stroke:none;font-family:DejaVu Sans;-inkscape-font-specification:DejaVu Sans&quot;          xml:space=&quot;preserve&quot;          transform=&quot;translate(0,-810.36218)&quot;&gt;&lt;tspan            y=&quot;904.67273&quot;            x=&quot;137.96094&quot;            id=&quot;tspan3218&quot;            sodipodi:role=&quot;line&quot;&gt;block cipher&lt;/tspan&gt;&lt;tspan            id=&quot;tspan3220&quot;            y=&quot;919.67273&quot;            x=&quot;137.96094&quot;            sodipodi:role=&quot;line&quot;            style=&quot;font-weight:normal&quot;&gt;decryption&lt;/tspan&gt;&lt;/text&gt;       &lt;rect          y=&quot;80.5&quot;          x=&quot;89.5&quot;          height=&quot;36&quot;          width=&quot;98&quot;          id=&quot;rect3214&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;     &lt;/g&gt;     &lt;g        id=&quot;g3496&quot;        transform=&quot;translate(18,-12)&quot;&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;88.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;96.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;104.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;112.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;120.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;128.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;136.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;144.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;152.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;160.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;168.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;176.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-0&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;184.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-0-7&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;     &lt;/g&gt;     &lt;text        xml:space=&quot;preserve&quot;        style=&quot;font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:DejaVu Sans;-inkscape-font-specification:Sans&quot;        x=&quot;51.643028&quot;        y=&quot;95.625977&quot;        id=&quot;text3562&quot;        sodipodi:linespacing=&quot;125%&quot;&gt;&lt;tspan          sodipodi:role=&quot;line&quot;          id=&quot;tspan3564&quot;          x=&quot;51.643028&quot;          y=&quot;95.625977&quot;&gt;Key&lt;/tspan&gt;&lt;/text&gt;     &lt;g        id=&quot;g3496-2-8&quot;        transform=&quot;translate(18,117)&quot;&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;88.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-7-1&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;96.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-9-7&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;104.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-7-3&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;112.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-61-8&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;120.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-4-0&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;128.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-0-4&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;136.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-4-1&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;144.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-0-3&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;152.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-4-0&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;160.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-9-6&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;168.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-8-5&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;176.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-0-5-9&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;184.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-0-7-7-9&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;     &lt;/g&gt;     &lt;text        xml:space=&quot;preserve&quot;        style=&quot;font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:DejaVu Sans;-inkscape-font-specification:Sans&quot;        x=&quot;158.30957&quot;        y=&quot;190.5&quot;        id=&quot;text3566-6&quot;        sodipodi:linespacing=&quot;125%&quot;&gt;&lt;tspan          sodipodi:role=&quot;line&quot;          id=&quot;tspan3568-9&quot;          x=&quot;158.30957&quot;          y=&quot;190.5&quot;          style=&quot;text-align:center;text-anchor:middle&quot;&gt;Plaintext&lt;/tspan&gt;&lt;/text&gt;     &lt;path        style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Mend)&quot;        d=&quot;m 158.5,113.5 0,47&quot;        id=&quot;path3705&quot;        inkscape:connector-curvature=&quot;0&quot;        sodipodi:nodetypes=&quot;cc&quot; /&gt;     &lt;path        style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Mend)&quot;        d=&quot;m 77.5,92.5 27,0&quot;        id=&quot;path4919&quot;        inkscape:connector-curvature=&quot;0&quot;        sodipodi:nodetypes=&quot;cc&quot; /&gt;     &lt;path        style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Mend)&quot;        d=&quot;m 158.5,51.5 0,19&quot;        id=&quot;path5103&quot;        inkscape:connector-curvature=&quot;0&quot;        sodipodi:nodetypes=&quot;cc&quot; /&gt;     &lt;text        xml:space=&quot;preserve&quot;        style=&quot;font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:center;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:middle;fill:#000000;fill-opacity:1;stroke:none;display:inline;font-family:DejaVu Sans;-inkscape-font-specification:DejaVu Sans&quot;        x=&quot;158.05762&quot;        y=&quot;27.5&quot;        id=&quot;text3520-1-3&quot;        sodipodi:linespacing=&quot;125%&quot;&gt;&lt;tspan          sodipodi:role=&quot;line&quot;          x=&quot;158.05762&quot;          y=&quot;27.5&quot;          id=&quot;tspan3528-0-6&quot;          style=&quot;font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:center;line-height:125%;writing-mode:lr-tb;text-anchor:middle;font-family:DejaVu Sans;-inkscape-font-specification:DejaVu Sans&quot;&gt;Ciphertext&lt;/tspan&gt;&lt;/text&gt;     &lt;g        transform=&quot;translate(20,10)&quot;        style=&quot;display:inline&quot;        id=&quot;g5291&quot;&gt;       &lt;path          transform=&quot;translate(-2,0)&quot;          d=&quot;m 146.5,133.5 c 0,3.31371 -2.68629,6 -6,6 -3.31371,0 -6,-2.68629 -6,-6 0,-3.31371 2.68629,-6 6,-6 3.31371,0 6,2.68629 6,6 z&quot;          sodipodi:ry=&quot;6&quot;          sodipodi:rx=&quot;6&quot;          sodipodi:cy=&quot;133.5&quot;          sodipodi:cx=&quot;140.5&quot;          id=&quot;path5287&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot;          sodipodi:type=&quot;arc&quot; /&gt;       &lt;path          inkscape:connector-curvature=&quot;0&quot;          id=&quot;path5289&quot;          d=&quot;m 132.5,133.5 12,0&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot; /&gt;     &lt;/g&gt;     &lt;g        style=&quot;display:inline&quot;        id=&quot;g3496-4&quot;        transform=&quot;translate(-82,90)&quot;&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;88.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-53&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;96.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-1&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;104.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-2&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;112.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-4&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;120.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-5&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;128.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-3&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;136.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-9&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;144.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-30&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;152.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-9&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;160.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-8&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;168.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-5&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;176.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-0-9&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;184.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-0-7-2&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;     &lt;/g&gt;     &lt;text        xml:space=&quot;preserve&quot;        style=&quot;font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:DejaVu Sans;-inkscape-font-specification:Sans&quot;        x=&quot;4.8222656&quot;        y=&quot;129.25&quot;        id=&quot;text11634&quot;        sodipodi:linespacing=&quot;125%&quot;&gt;&lt;tspan          sodipodi:role=&quot;line&quot;          id=&quot;tspan11636&quot;          x=&quot;4.8222656&quot;          y=&quot;129.25&quot;&gt;Initialization Vector (IV)&lt;/tspan&gt;&lt;/text&gt;     &lt;path        style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker11421)&quot;        d=&quot;m 114.5,143.5 34,0&quot;        id=&quot;path11638&quot;        inkscape:connector-curvature=&quot;0&quot;        sodipodi:nodetypes=&quot;cc&quot; /&gt;     &lt;path        style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker11421)&quot;        d=&quot;m 158.5,59.5 64,0 0,84 109,0&quot;        id=&quot;path12496&quot;        inkscape:connector-curvature=&quot;0&quot;        sodipodi:nodetypes=&quot;cccc&quot; /&gt;     &lt;g        style=&quot;display:inline&quot;        id=&quot;g3514-7&quot;        transform=&quot;translate(204,-6.000002)&quot;&gt;       &lt;text          sodipodi:linespacing=&quot;125%&quot;          id=&quot;text3216-5&quot;          y=&quot;904.67273&quot;          x=&quot;137.96094&quot;          style=&quot;font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:center;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:middle;fill:#000000;fill-opacity:1;stroke:none;font-family:DejaVu Sans;-inkscape-font-specification:DejaVu Sans&quot;          xml:space=&quot;preserve&quot;          transform=&quot;translate(0,-810.36218)&quot;&gt;&lt;tspan            y=&quot;904.67273&quot;            x=&quot;137.96094&quot;            id=&quot;tspan3218-3&quot;            sodipodi:role=&quot;line&quot;&gt;block cipher&lt;/tspan&gt;&lt;tspan            id=&quot;tspan3220-8&quot;            y=&quot;919.67273&quot;            x=&quot;137.96094&quot;            sodipodi:role=&quot;line&quot;            style=&quot;font-weight:normal&quot;&gt;decryption&lt;/tspan&gt;&lt;/text&gt;       &lt;rect          y=&quot;80.5&quot;          x=&quot;89.5&quot;          height=&quot;36&quot;          width=&quot;98&quot;          id=&quot;rect3214-8&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;     &lt;/g&gt;     &lt;g        style=&quot;display:inline&quot;        id=&quot;g3496-9&quot;        transform=&quot;translate(202,-12.000002)&quot;&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;88.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-2&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;96.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-3&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;104.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-4&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;112.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-5&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;120.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-8&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;128.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-8&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;136.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-2&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;144.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-1&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;152.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-98&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;160.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-1&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;168.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-9&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;176.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-0-6&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;184.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-0-7-6&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;     &lt;/g&gt;     &lt;text        xml:space=&quot;preserve&quot;        style=&quot;font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;display:inline;font-family:DejaVu Sans;-inkscape-font-specification:Sans&quot;        x=&quot;235.64304&quot;        y=&quot;95.625977&quot;        id=&quot;text3562-8&quot;        sodipodi:linespacing=&quot;125%&quot;&gt;&lt;tspan          sodipodi:role=&quot;line&quot;          id=&quot;tspan3564-0&quot;          x=&quot;235.64304&quot;          y=&quot;95.625977&quot;&gt;Key&lt;/tspan&gt;&lt;/text&gt;     &lt;g        style=&quot;display:inline&quot;        id=&quot;g3496-2-8-6&quot;        transform=&quot;translate(202,117)&quot;&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;88.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-7-1-2&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;96.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-9-7-9&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;104.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-7-3-3&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;112.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-61-8-9&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;120.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-4-0-3&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;128.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-0-4-5&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;136.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-4-1-0&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;144.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-0-3-4&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;152.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-4-0-4&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;160.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-9-6-7&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;168.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-8-5-9&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;176.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-0-5-9-2&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;184.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-0-7-7-9-6&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;     &lt;/g&gt;     &lt;text        xml:space=&quot;preserve&quot;        style=&quot;font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;display:inline;font-family:DejaVu Sans;-inkscape-font-specification:Sans&quot;        x=&quot;342.30957&quot;        y=&quot;190.5&quot;        id=&quot;text3566-6-0&quot;        sodipodi:linespacing=&quot;125%&quot;&gt;&lt;tspan          sodipodi:role=&quot;line&quot;          id=&quot;tspan3568-9-6&quot;          x=&quot;342.30957&quot;          y=&quot;190.5&quot;          style=&quot;text-align:center;text-anchor:middle&quot;&gt;Plaintext&lt;/tspan&gt;&lt;/text&gt;     &lt;path        style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Mend);display:inline&quot;        d=&quot;m 342.5,113.5 0,47&quot;        id=&quot;path3705-1&quot;        inkscape:connector-curvature=&quot;0&quot;        sodipodi:nodetypes=&quot;cc&quot; /&gt;     &lt;path        style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Mend);display:inline&quot;        d=&quot;m 261.5,92.499997 27,0&quot;        id=&quot;path4919-4&quot;        inkscape:connector-curvature=&quot;0&quot;        sodipodi:nodetypes=&quot;cc&quot; /&gt;     &lt;path        style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Mend);display:inline&quot;        d=&quot;m 342.5,51.499997 0,19&quot;        id=&quot;path5103-1&quot;        inkscape:connector-curvature=&quot;0&quot;        sodipodi:nodetypes=&quot;cc&quot; /&gt;     &lt;text        xml:space=&quot;preserve&quot;        style=&quot;font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:center;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:middle;fill:#000000;fill-opacity:1;stroke:none;display:inline;font-family:DejaVu Sans;-inkscape-font-specification:DejaVu Sans&quot;        x=&quot;342.05762&quot;        y=&quot;27.499998&quot;        id=&quot;text3520-1-3-9&quot;        sodipodi:linespacing=&quot;125%&quot;&gt;&lt;tspan          sodipodi:role=&quot;line&quot;          x=&quot;342.05762&quot;          y=&quot;27.499998&quot;          id=&quot;tspan3528-0-6-4&quot;          style=&quot;font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:center;line-height:125%;writing-mode:lr-tb;text-anchor:middle;font-family:DejaVu Sans;-inkscape-font-specification:DejaVu Sans&quot;&gt;Ciphertext&lt;/tspan&gt;&lt;/text&gt;     &lt;g        transform=&quot;translate(204,9.9999975)&quot;        style=&quot;display:inline&quot;        id=&quot;g5291-6&quot;&gt;       &lt;path          transform=&quot;translate(-2,0)&quot;          d=&quot;m 146.5,133.5 c 0,3.31371 -2.68629,6 -6,6 -3.31371,0 -6,-2.68629 -6,-6 0,-3.31371 2.68629,-6 6,-6 3.31371,0 6,2.68629 6,6 z&quot;          sodipodi:ry=&quot;6&quot;          sodipodi:rx=&quot;6&quot;          sodipodi:cy=&quot;133.5&quot;          sodipodi:cx=&quot;140.5&quot;          id=&quot;path5287-1&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot;          sodipodi:type=&quot;arc&quot; /&gt;       &lt;path          inkscape:connector-curvature=&quot;0&quot;          id=&quot;path5289-3&quot;          d=&quot;m 132.5,133.5 12,0&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot; /&gt;     &lt;/g&gt;     &lt;path        style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#marker11421);display:inline&quot;        d=&quot;m 342.5,59.499999 64,0 0,84.000001 109,0&quot;        id=&quot;path12496-3&quot;        inkscape:connector-curvature=&quot;0&quot;        sodipodi:nodetypes=&quot;cccc&quot; /&gt;     &lt;g        style=&quot;display:inline&quot;        id=&quot;g3514-7-6&quot;        transform=&quot;translate(388,-6.000003)&quot;&gt;       &lt;text          sodipodi:linespacing=&quot;125%&quot;          id=&quot;text3216-5-0&quot;          y=&quot;904.67273&quot;          x=&quot;137.96094&quot;          style=&quot;font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:center;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:middle;fill:#000000;fill-opacity:1;stroke:none;font-family:DejaVu Sans;-inkscape-font-specification:DejaVu Sans&quot;          xml:space=&quot;preserve&quot;          transform=&quot;translate(0,-810.36218)&quot;&gt;&lt;tspan            y=&quot;904.67273&quot;            x=&quot;137.96094&quot;            id=&quot;tspan3218-3-6&quot;            sodipodi:role=&quot;line&quot;&gt;block cipher&lt;/tspan&gt;&lt;tspan            id=&quot;tspan3220-8-8&quot;            y=&quot;919.67273&quot;            x=&quot;137.96094&quot;            sodipodi:role=&quot;line&quot;            style=&quot;font-weight:normal&quot;&gt;decryption&lt;/tspan&gt;&lt;/text&gt;       &lt;rect          y=&quot;80.5&quot;          x=&quot;89.5&quot;          height=&quot;36&quot;          width=&quot;98&quot;          id=&quot;rect3214-8-6&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;     &lt;/g&gt;     &lt;g        style=&quot;display:inline&quot;        id=&quot;g3496-9-2&quot;        transform=&quot;translate(386,-12.000003)&quot;&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;88.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-2-9&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;96.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-3-9&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;104.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-4-6&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;112.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-5-5&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;120.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-8-4&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;128.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-8-1&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;136.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-2-6&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;144.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-1-8&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;152.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-98-4&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;160.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-1-5&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;168.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-9-7&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;176.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-0-6-8&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;184.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-0-7-6-9&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;     &lt;/g&gt;     &lt;text        xml:space=&quot;preserve&quot;        style=&quot;font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;display:inline;font-family:DejaVu Sans;-inkscape-font-specification:Sans&quot;        x=&quot;419.64304&quot;        y=&quot;95.625977&quot;        id=&quot;text3562-8-4&quot;        sodipodi:linespacing=&quot;125%&quot;&gt;&lt;tspan          sodipodi:role=&quot;line&quot;          id=&quot;tspan3564-0-9&quot;          x=&quot;419.64304&quot;          y=&quot;95.625977&quot;&gt;Key&lt;/tspan&gt;&lt;/text&gt;     &lt;g        style=&quot;display:inline&quot;        id=&quot;g3496-2-8-6-8&quot;        transform=&quot;translate(386,117)&quot;&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;88.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-7-1-2-6&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;96.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-9-7-9-4&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;104.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-7-3-3-3&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;112.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-61-8-9-3&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;120.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-4-0-3-8&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;128.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-0-4-5-8&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;136.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-4-1-0-8&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;144.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-0-3-4-6&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;152.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-4-0-4-3&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;160.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-9-6-7-6&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;168.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-8-5-9-8&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;176.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-0-5-9-2-0&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;       &lt;rect          y=&quot;48.5&quot;          x=&quot;184.5&quot;          height=&quot;10&quot;          width=&quot;7.9999995&quot;          id=&quot;rect3222-4-8-5-6-0-9-3-3-6-5-0-7-7-9-6-4&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot; /&gt;     &lt;/g&gt;     &lt;text        xml:space=&quot;preserve&quot;        style=&quot;font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;display:inline;font-family:DejaVu Sans;-inkscape-font-specification:Sans&quot;        x=&quot;526.30957&quot;        y=&quot;190.5&quot;        id=&quot;text3566-6-0-4&quot;        sodipodi:linespacing=&quot;125%&quot;&gt;&lt;tspan          sodipodi:role=&quot;line&quot;          id=&quot;tspan3568-9-6-2&quot;          x=&quot;526.30957&quot;          y=&quot;190.5&quot;          style=&quot;text-align:center;text-anchor:middle&quot;&gt;Plaintext&lt;/tspan&gt;&lt;/text&gt;     &lt;path        style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Mend);display:inline&quot;        d=&quot;m 526.5,113.5 0,47&quot;        id=&quot;path3705-1-5&quot;        inkscape:connector-curvature=&quot;0&quot;        sodipodi:nodetypes=&quot;cc&quot; /&gt;     &lt;path        style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Mend);display:inline&quot;        d=&quot;m 445.5,92.499996 27,0&quot;        id=&quot;path4919-4-3&quot;        inkscape:connector-curvature=&quot;0&quot;        sodipodi:nodetypes=&quot;cc&quot; /&gt;     &lt;path        style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;marker-end:url(#Arrow1Mend);display:inline&quot;        d=&quot;m 526.5,51.499996 0,19&quot;        id=&quot;path5103-1-1&quot;        inkscape:connector-curvature=&quot;0&quot;        sodipodi:nodetypes=&quot;cc&quot; /&gt;     &lt;text        xml:space=&quot;preserve&quot;        style=&quot;font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:center;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:middle;fill:#000000;fill-opacity:1;stroke:none;display:inline;font-family:DejaVu Sans;-inkscape-font-specification:DejaVu Sans&quot;        x=&quot;526.05762&quot;        y=&quot;27.499998&quot;        id=&quot;text3520-1-3-9-1&quot;        sodipodi:linespacing=&quot;125%&quot;&gt;&lt;tspan          sodipodi:role=&quot;line&quot;          x=&quot;526.05762&quot;          y=&quot;27.499998&quot;          id=&quot;tspan3528-0-6-4-9&quot;          style=&quot;font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:center;line-height:125%;writing-mode:lr-tb;text-anchor:middle;font-family:DejaVu Sans;-inkscape-font-specification:DejaVu Sans&quot;&gt;Ciphertext&lt;/tspan&gt;&lt;/text&gt;     &lt;g        transform=&quot;translate(388,9.9999969)&quot;        style=&quot;display:inline&quot;        id=&quot;g5291-6-4&quot;&gt;       &lt;path          transform=&quot;translate(-2,0)&quot;          d=&quot;m 146.5,133.5 c 0,3.31371 -2.68629,6 -6,6 -3.31371,0 -6,-2.68629 -6,-6 0,-3.31371 2.68629,-6 6,-6 3.31371,0 6,2.68629 6,6 z&quot;          sodipodi:ry=&quot;6&quot;          sodipodi:rx=&quot;6&quot;          sodipodi:cy=&quot;133.5&quot;          sodipodi:cx=&quot;140.5&quot;          id=&quot;path5287-1-9&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1;stroke-linecap:square;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0&quot;          sodipodi:type=&quot;arc&quot; /&gt;       &lt;path          inkscape:connector-curvature=&quot;0&quot;          id=&quot;path5289-3-0&quot;          d=&quot;m 132.5,133.5 12,0&quot;          style=&quot;fill:none;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1&quot; /&gt;     &lt;/g&gt;   &lt;/g&gt; &lt;/svg&gt;  &lt;p&gt;An attacker can&#39;t see the plaintext contents like we can in the diagram, above. They only see the CBC-encrypted ciphertext blocks. But what happens if the attacker duplicates the block containing the cookie data and overwrites the last block with it? When the receiver decrypts the last block it XORs in the contents of the previous ciphertext (which the attacker knows) and checks the authenticity of the data. Critically, since SSLv3 doesn&#39;t specify the contents of the padding (&amp;bull;) bytes, the receiver cannot check them. Thus the record will be accepted if, and only if, the last byte ends up as a seven.&lt;/p&gt;  &lt;p&gt;An attacker can run Javascript in any origin in a browser and cause the browser to make requests (with cookies) to any other origin. If the attacker does this block duplication trick they have a 1-in-256 chance that the receiver won&#39;t reject the record and close the connection. If the receiver accepts the record then the attacker knows that the decryption of the cookie block that they duplicated, XORed with the ciphertext of the previous block, equals seven. Thus they&#39;ve found the last byte of the cookie using (on average) 256 requests.&lt;/p&gt;  &lt;p&gt;Now the attacker can increase the length of the requested URL and decrease the length of something after the cookies and make the request look like this:&lt;/p&gt;  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt; &lt;!-- Created with Inkscape (http://www.inkscape.org/) --&gt; &lt;svg style=&quot;margin-left: 1cm;&quot; xmlns:rdf=&quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; height=&quot;27.789&quot; width=&quot;767.17&quot; version=&quot;1.1&quot; xmlns:cc=&quot;http://creativecommons.org/ns#&quot; xmlns:dc=&quot;http://purl.org/dc/elements/1.1/&quot;&gt; &lt;metadata&gt; &lt;rdf:RDF&gt; &lt;cc:Work rdf:about=&quot;&quot;&gt; &lt;dc:format&gt;image/svg+xml&lt;/dc:format&gt; &lt;dc:type rdf:resource=&quot;http://purl.org/dc/dcmitype/StillImage&quot;/&gt; &lt;dc:title/&gt; &lt;/cc:Work&gt; &lt;/rdf:RDF&gt; &lt;/metadata&gt; &lt;g transform=&quot;translate(-184.9866,-644.18405)&quot;&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; font-weight=&quot;normal&quot; font-size=&quot;25.56766701px&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-style=&quot;normal&quot; font-family=&quot;Ubuntu Mono&quot; line-height=&quot;125%&quot; fill=&quot;#000&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m196.22,657.1,2.0966,0,0,7.4146c-0.32387,0.11932-0.84374,0.2642-1.5596,0.43465-0.71591,0.1875-1.5596,0.28124-2.5312,0.28124-0.95454,0-1.8238-0.17897-2.6079-0.53692-0.78408-0.37499-1.4574-0.91191-2.0198-1.6108-0.54545-0.69885-0.97157-1.5596-1.2784-2.5823-0.30682-1.0398-0.46022-2.2159-0.46022-3.5283,0-1.3295,0.17045-2.5056,0.51135-3.5283s0.80112-1.8835,1.3806-2.5823c0.59658-0.69884,1.2869-1.2272,2.071-1.5852,0.78406-0.37498,1.6278-0.56247,2.5312-0.56249,0.57953,0.00002,1.0909,0.0426,1.5341,0.12784,0.44317,0.0852,0.81816,0.18751,1.125,0.30681,0.32385,0.11933,0.58805,0.24717,0.7926,0.38352,0.20453,0.11933,0.35794,0.21308,0.46022,0.28124l-0.69033,1.7642c-0.39205-0.3068-0.86079-0.55395-1.4062-0.74146-0.52841-0.20453-1.0909-0.3068-1.6875-0.30681-0.64772,0.00001-1.2528,0.15342-1.8153,0.46021-0.54545,0.30683-1.0142,0.74148-1.4062,1.304-0.39204,0.5625-0.69886,1.2443-0.92044,2.0454-0.22159,0.78408-0.33238,1.6619-0.33238,2.6335,0,0.95453,0.0937,1.8238,0.28125,2.6079,0.20453,0.78408,0.4943,1.4574,0.8693,2.0198,0.37498,0.56249,0.8352,1.0057,1.3806,1.3295,0.56248,0.30682,1.2017,0.46022,1.9176,0.46022,0.4943,0,0.87781-0.0341,1.1505-0.10227,0.27271-0.0682,0.47725-0.13636,0.61362-0.20454v-5.9828&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m201.8,664.9,0-15.826,8.872,0,0,1.7897-6.7754,0,0,4.8578,5.9317,0,0,1.7897-5.9317,0,0,5.5993,7.3379,0,0,1.7897-9.4345,0&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m224.04,649.08,0,1.7897-4.3465,0,0,14.037-2.0966,0,0-14.037-4.3465,0,0-1.7897,10.79,0&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m241.76,669.12-2.1732,0,7.1334-22.09,2.1221,0-7.0822,22.09&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m257.13,663.39c0.52839,0,0.99713-0.017,1.4062-0.0511,0.42612-0.0341,0.77554-0.0767,1.0483-0.12784v-3.5283c-0.27273-0.0852-0.60511-0.1534-0.99714-0.20454-0.375-0.0511-0.77556-0.0767-1.2017-0.0767-0.39204,0-0.77556,0.0341-1.1505,0.10227-0.375,0.0511-0.70738,0.15341-0.99714,0.30681-0.28977,0.15341-0.5284,0.35795-0.7159,0.61362-0.1875,0.23864-0.28124,0.54545-0.28124,0.92044,0,0.76703,0.25567,1.304,0.76703,1.6108,0.52839,0.28977,1.2358,0.43465,2.1221,0.43465m-0.20455-10.636c0.88634,0.00002,1.6278,0.11081,2.2244,0.33238,0.61362,0.2216,1.1079,0.52841,1.4829,0.92044,0.37498,0.39205,0.63918,0.86931,0.79259,1.4318,0.1534,0.5625,0.2301,1.1761,0.23011,1.8409v7.4146c-0.49432,0.0852-1.1506,0.1875-1.9687,0.30682-0.80113,0.11931-1.6278,0.17897-2.4801,0.17897-0.64772,0-1.2784-0.0597-1.892-0.17897-0.61363-0.10227-1.1591-0.28977-1.6363-0.56249-0.47726-0.28977-0.86078-0.68181-1.1505-1.1761-0.28977-0.4943-0.43466-1.125-0.43465-1.892-0.00001-0.6818,0.14488-1.2528,0.43465-1.713,0.30681-0.47725,0.69032-0.86077,1.1505-1.1505,0.47726-0.28976,1.0142-0.4943,1.6108-0.61363,0.61362-0.13635,1.2272-0.20453,1.8409-0.20454,0.8352,0.00001,1.6534,0.0938,2.4545,0.28125v-0.58806c-0.00001-0.35794-0.0426-0.69884-0.12784-1.0227-0.0682-0.34089-0.21307-0.6477-0.43465-0.92043-0.20455-0.27271-0.49431-0.48578-0.8693-0.63919-0.35795-0.17044-0.82669-0.25567-1.4062-0.25568-0.73294,0.00001-1.3721,0.0512-1.9176,0.15341-0.54545,0.10228-0.96306,0.20455-1.2528,0.30681l-0.25568-1.7386c0.28977-0.13635,0.76703-0.25567,1.4318-0.35795,0.6818-0.10226,1.4062-0.15339,2.1732-0.15341&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m285.71,649.08,2.0965,0,0,15.826-2.0965,0,0-7.3635-6.2896,0,0,7.3635-2.0966,0,0-15.826,2.0966,0,0,6.6732,6.2896,0,0-6.6732&quot;/&gt; &lt;/g&gt; &lt;path stroke-linejoin=&quot;round&quot; d=&quot;m185.18,644.38,105.47,0,0,27.394-105.47,0z&quot; stroke=&quot;#000&quot; stroke-linecap=&quot;round&quot; stroke-miterlimit=&quot;4&quot; stroke-width=&quot;0.38351503&quot; fill=&quot;none&quot;/&gt; &lt;path stroke-linejoin=&quot;round&quot; d=&quot;m295.4,644.38,105.47,0,0,27.394-105.47,0z&quot; stroke=&quot;#000&quot; stroke-linecap=&quot;round&quot; stroke-miterlimit=&quot;4&quot; stroke-width=&quot;0.38351503&quot; fill=&quot;none&quot;/&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; font-weight=&quot;normal&quot; font-size=&quot;25.56766701px&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-style=&quot;normal&quot; font-family=&quot;Ubuntu Mono&quot; line-height=&quot;125%&quot; fill=&quot;#000&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m308.69,649.08,0,1.7897-4.3465,0,0,14.037-2.0966,0,0-14.037-4.3465,0,0-1.7897,10.79,0&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m321.48,649.08,0,1.7897-4.3465,0,0,14.037-2.0966,0,0-14.037-4.3465,0,0-1.7897,10.79,0&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m328.48,648.92c0.93747,0.00002,1.7556,0.11933,2.4545,0.35795,0.71589,0.23865,1.3039,0.57955,1.7642,1.0227,0.47726,0.42614,0.82668,0.93749,1.0483,1.5341,0.23862,0.59659,0.35793,1.2614,0.35794,1.9943-0.00001,1.6534-0.48579,2.9318-1.4574,3.8352-0.97158,0.88635-2.4289,1.3295-4.3721,1.3295h-1.8409v5.9061h-2.0965v-15.596c0.30681-0.0682,0.63918-0.12782,0.99713-0.17898,0.37499-0.0511,0.74146-0.0937,1.0994-0.12783,0.37499-0.0341,0.73294-0.0511,1.0738-0.0511,0.35794-0.017,0.68179-0.0256,0.97157-0.0256m0.1534,1.8153c-0.44318,0.00001-0.8693,0.009-1.2784,0.0256-0.40909,0.00001-0.7159,0.0171-0.92044,0.0511v6.3919h1.7386c1.2784,0.00001,2.2244-0.25567,2.838-0.76703,0.63066-0.51135,0.94599-1.3551,0.946-2.5312-0.00001-2.1136-1.1079-3.1704-3.3238-3.1704&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m339.2,669.12-2.1732,0,7.1334-22.09,2.1221,0-7.0822,22.09&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m349.96,652.35c0.8693-0.34089,1.713-0.76702,2.5312-1.2784,0.81816-0.52839,1.5767-1.1932,2.2755-1.9943h1.4829v14.037h2.9914v1.7897h-8.514v-1.7897h3.4261v-11.096c-0.18751,0.17046-0.41762,0.34944-0.69033,0.53692-0.25568,0.17047-0.54545,0.34092-0.8693,0.51136-0.30682,0.17046-0.63068,0.33239-0.97157,0.48578-0.34091,0.15342-0.67329,0.28126-0.99714,0.38352l-0.66476-1.5852&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m369.11,663.27c-0.00001,0.51136-0.17046,0.96305-0.51135,1.3551-0.34091,0.39204-0.79261,0.58806-1.3551,0.58806-0.57954,0-1.0398-0.19602-1.3806-0.58806-0.34091-0.39204-0.51136-0.84373-0.51136-1.3551,0-0.52839,0.17045-0.98861,0.51136-1.3806,0.34089-0.39203,0.80111-0.58805,1.3806-0.58806,0.56248,0.00001,1.0142,0.19603,1.3551,0.58806,0.34089,0.39204,0.51134,0.85226,0.51135,1.3806&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m375.53,652.35c0.86929-0.34089,1.713-0.76702,2.5312-1.2784,0.81816-0.52839,1.5767-1.1932,2.2755-1.9943h1.4829v14.037h2.9914v1.7897h-8.514v-1.7897h3.4261v-11.096c-0.1875,0.17046-0.41761,0.34944-0.69032,0.53692-0.25568,0.17047-0.54545,0.34092-0.8693,0.51136-0.30682,0.17046-0.63068,0.33239-0.97157,0.48578-0.34091,0.15342-0.67329,0.28126-0.99714,0.38352l-0.66476-1.5852&quot;/&gt; &lt;/g&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; font-weight=&quot;normal&quot; font-size=&quot;12.7838335px&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-style=&quot;normal&quot; font-family=&quot;Sans&quot; line-height=&quot;125%&quot; fill=&quot;#000&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m388.54,652.34,3.2459,10.505-1.0612,0-3.2459-10.505,1.0612,0&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m397.06,655.74c-0.12901-0.0749-0.2705-0.129-0.42447-0.1623-0.14981-0.0375-0.31627-0.0562-0.49936-0.0562-0.64919,0.00001-1.1486,0.21224-1.4981,0.6367-0.3454,0.4203-0.5181,1.0258-0.51809,1.8164v3.6828h-1.1548v-6.9912h1.1548v1.0861c0.24135-0.42446,0.55554-0.73864,0.94255-0.94256,0.38701-0.20806,0.85725-0.3121,1.4107-0.3121,0.0791,0,0.16645,0.006,0.26217,0.0187,0.0957,0.008,0.20182,0.0229,0.31835,0.0437l0.006,1.1798&quot;/&gt; &lt;/g&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; font-weight=&quot;normal&quot; font-size=&quot;12.7838335px&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-style=&quot;normal&quot; font-family=&quot;Sans&quot; line-height=&quot;125%&quot; fill=&quot;#000&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m408.13,652.82,3.2459,10.505-1.0612,0-3.2459-10.505,1.0612,0&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m418.41,657.92,0,4.2197-1.1486,0,0-4.1822c-0.00001-0.66166-0.12901-1.1569-0.38701-1.4856-0.25801-0.32875-0.64502-0.49312-1.161-0.49313-0.62006,0.00001-1.109,0.19767-1.4669,0.593-0.35788,0.39534-0.53682,0.93424-0.53682,1.6167v3.9512h-1.1548v-6.9912h1.1548v1.0861c0.27465-0.4203,0.59716-0.73449,0.96753-0.94256,0.37452-0.20807,0.80523-0.3121,1.2921-0.31211,0.80315,0.00001,1.4107,0.24969,1.8227,0.74906,0.41197,0.49521,0.61796,1.2255,0.61797,2.191&quot;/&gt; &lt;/g&gt; &lt;g transform=&quot;matrix(0.63919169,0,0,0.63919169,126.19916,495.85553)&quot;&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; font-weight=&quot;normal&quot; font-size=&quot;40px&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-style=&quot;normal&quot; font-family=&quot;Ubuntu Mono&quot; line-height=&quot;125%&quot; fill=&quot;#000&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m478.02,263.43c-0.93335,0.53334-1.9334,0.92-3,1.16-1.04,0.26667-2.16,0.4-3.36,0.4-1.4667,0-2.8267-0.25333-4.08-0.76-1.2267-0.53333-2.2933-1.32-3.2-2.36-0.90667-1.0667-1.6267-2.4133-2.16-4.04-0.50667-1.6266-0.76-3.5466-0.76-5.76,0-2.1066,0.26666-3.96,0.8-5.56,0.56-1.6,1.3067-2.9466,2.24-4.04,0.93333-1.0933,2.0267-1.92,3.28-2.48,1.2533-0.55997,2.5866-0.83997,4-0.84,0.98665,0.00003,1.9866,0.13336,3,0.4,1.04,0.2667,2.0533,0.7067,3.04,1.32l-0.96,2.72c-1.76-1.0133-3.4134-1.52-4.96-1.52-1.0934,0.00003-2.08,0.24003-2.96,0.72-0.85334,0.45336-1.5867,1.12-2.2,2-0.61334,0.88002-1.0933,1.9334-1.44,3.16-0.32001,1.2267-0.48001,2.6-0.48,4.12-0.00001,1.7067,0.17333,3.1867,0.52,4.44,0.37333,1.2533,0.87999,2.2933,1.52,3.12,0.63999,0.82667,1.4,1.44,2.28,1.84,0.90665,0.40001,1.88,0.60001,2.92,0.6,0.77332,0.00001,1.5866-0.0933,2.44-0.28,0.85332-0.21333,1.7333-0.57333,2.64-1.08l0.88,2.72&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m498.02,255.19c-0.00002,1.4667-0.21335,2.8-0.64,4-0.40002,1.1733-0.97335,2.1867-1.72,3.04-0.74668,0.85334-1.64,1.52-2.68,2-1.04,0.45334-2.1734,0.68-3.4,0.68-1.2,0-2.32-0.22666-3.36-0.68-1.0133-0.48-1.8933-1.1467-2.64-2-0.74667-0.85333-1.3333-1.8667-1.76-3.04-0.4-1.2-0.6-2.5333-0.6-4,0-1.4666,0.2-2.8,0.6-4,0.42666-1.2,1.0133-2.2133,1.76-3.04,0.74666-0.85331,1.6267-1.5066,2.64-1.96,1.04-0.47998,2.16-0.71998,3.36-0.72,1.2266,0.00002,2.36,0.24002,3.4,0.72,1.04,0.45336,1.9333,1.1067,2.68,1.96,0.74665,0.82669,1.32,1.84,1.72,3.04,0.42665,1.2,0.63998,2.5334,0.64,4m-3.4,0c-0.00002-2.1066-0.45335-3.76-1.36-4.96-0.90668-1.2266-2.1334-1.84-3.68-1.84-1.52,0.00002-2.7333,0.61335-3.64,1.84-0.88001,1.2-1.32,2.8534-1.32,4.96-0.00001,2.08,0.43999,3.7333,1.32,4.96,0.90666,1.2,2.12,1.8,3.64,1.8,1.5466,0.00001,2.7733-0.59999,3.68-1.8,0.90665-1.2267,1.36-2.88,1.36-4.96&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m518.02,255.19c-0.00002,1.4667-0.21335,2.8-0.64,4-0.40002,1.1733-0.97335,2.1867-1.72,3.04-0.74668,0.85334-1.64,1.52-2.68,2-1.04,0.45334-2.1734,0.68-3.4,0.68-1.2,0-2.32-0.22666-3.36-0.68-1.0133-0.48-1.8933-1.1467-2.64-2-0.74667-0.85333-1.3333-1.8667-1.76-3.04-0.4-1.2-0.6-2.5333-0.6-4,0-1.4666,0.2-2.8,0.6-4,0.42666-1.2,1.0133-2.2133,1.76-3.04,0.74666-0.85331,1.6267-1.5066,2.64-1.96,1.04-0.47998,2.16-0.71998,3.36-0.72,1.2266,0.00002,2.36,0.24002,3.4,0.72,1.04,0.45336,1.9333,1.1067,2.68,1.96,0.74665,0.82669,1.32,1.84,1.72,3.04,0.42665,1.2,0.63998,2.5334,0.64,4m-3.4,0c-0.00002-2.1066-0.45335-3.76-1.36-4.96-0.90668-1.2266-2.1334-1.84-3.68-1.84-1.52,0.00002-2.7333,0.61335-3.64,1.84-0.88001,1.2-1.32,2.8534-1.32,4.96-0.00001,2.08,0.43999,3.7333,1.32,4.96,0.90666,1.2,2.12,1.8,3.64,1.8,1.5466,0.00001,2.7733-0.59999,3.68-1.8,0.90665-1.2267,1.36-2.88,1.36-4.96&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m529.14,254.27c0.71999,0.53335,1.5333,1.2134,2.44,2.04,0.90665,0.80001,1.8,1.6667,2.68,2.6,0.90665,0.93334,1.76,1.8933,2.56,2.88,0.79998,0.96001,1.44,1.8533,1.92,2.68h-3.92c-0.50668-0.82666-1.1334-1.6667-1.88-2.52-0.74668-0.87999-1.5467-1.72-2.4-2.52-0.82668-0.79999-1.6667-1.5333-2.52-2.2-0.82668-0.66665-1.5733-1.2266-2.24-1.68v8.92h-3.32v-27.16l3.32-0.56v16.92c1.4667-1.28,2.9333-2.5466,4.4-3.8,1.4666-1.28,2.7866-2.6,3.96-3.96h3.88c-1.1467,1.36-2.5334,2.76-4.16,4.2-1.6,1.44-3.1734,2.8267-4.72,4.16&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m547.98,243.03c-0.69334,0.00003-1.2933-0.23997-1.8-0.72-0.50667-0.47997-0.76001-1.1333-0.76-1.96-0.00001-0.82664,0.25333-1.48,0.76-1.96,0.50666-0.47997,1.1067-0.71997,1.8-0.72,0.71999,0.00003,1.32,0.24003,1.8,0.72,0.50665,0.48003,0.75999,1.1334,0.76,1.96-0.00001,0.82669-0.25335,1.48-0.76,1.96-0.48001,0.48003-1.08,0.72003-1.8,0.72m-0.84,5.64-5.36,0,0-2.76,8.64,0,0,11.4c-0.00001,1.84,0.25332,3.08,0.76,3.72,0.50665,0.61334,1.2666,0.92001,2.28,0.92,0.77332,0.00001,1.48-0.0933,2.12-0.28,0.66665-0.18666,1.1866-0.38666,1.56-0.6l0.48,2.8c-0.16002,0.08-0.38669,0.18667-0.68,0.32-0.29335,0.10667-0.64002,0.21334-1.04,0.32-0.37335,0.10667-0.80002,0.2-1.28,0.28-0.45335,0.08-0.93335,0.12-1.44,0.12-1.1734,0-2.1467-0.16-2.92-0.48-0.77334-0.32-1.4-0.79999-1.88-1.44-0.45334-0.63999-0.77334-1.4267-0.96-2.36-0.18668-0.95999-0.28001-2.0667-0.28-3.32v-8.64&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m569.98,245.47c2.5066,0.00002,4.44,0.78669,5.8,2.36,1.36,1.5467,2.04,3.9067,2.04,7.08v1.16h-13.28c0.13333,1.92,0.75999,3.3867,1.88,4.4,1.1467,0.98667,2.7467,1.48,4.8,1.48,1.1733,0.00001,2.1733-0.0933,3-0.28,0.82665-0.18666,1.4533-0.38666,1.88-0.6l0.44,2.8c-0.40002,0.21334-1.12,0.44-2.16,0.68s-2.2134,0.36-3.52,0.36c-1.6,0-3.0133-0.24-4.24-0.72-1.2-0.50666-2.2-1.1867-3-2.04-0.8-0.85333-1.4-1.8667-1.8-3.04-0.4-1.2-0.6-2.4933-0.6-3.88,0-1.6533,0.25333-3.0933,0.76-4.32,0.50666-1.2266,1.1733-2.24,2-3.04,0.82666-0.79998,1.76-1.4,2.8-1.8,1.04-0.39998,2.1067-0.59998,3.2-0.6m4.48,7.92c-0.00002-1.5733-0.41335-2.8133-1.24-3.72-0.82668-0.93331-1.92-1.4-3.28-1.4-0.77334,0.00002-1.48,0.14669-2.12,0.44-0.61334,0.29335-1.1467,0.68002-1.6,1.16-0.45334,0.48002-0.81334,1.0267-1.08,1.64-0.26667,0.61335-0.44001,1.24-0.52,1.88h9.84&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m592.58,261.91c-0.00001,0.80001-0.26668,1.5067-0.8,2.12-0.53335,0.61334-1.24,0.92-2.12,0.92-0.90668,0-1.6267-0.30666-2.16-0.92-0.53334-0.61333-0.80001-1.32-0.8-2.12-0.00001-0.82666,0.26666-1.5467,0.8-2.16,0.53332-0.61332,1.2533-0.91999,2.16-0.92,0.87999,0.00001,1.5866,0.30668,2.12,0.92,0.53332,0.61334,0.79999,1.3333,0.8,2.16m0-12.92c-0.00001,0.80002-0.26668,1.5067-0.8,2.12-0.53335,0.61335-1.24,0.92002-2.12,0.92-0.90668,0.00002-1.6267-0.30665-2.16-0.92-0.53334-0.61332-0.80001-1.32-0.8-2.12-0.00001-0.82665,0.26666-1.5466,0.8-2.16,0.53332-0.61331,1.2533-0.91998,2.16-0.92,0.87999,0.00002,1.5866,0.30669,2.12,0.92,0.53332,0.61335,0.79999,1.3334,0.8,2.16&quot;/&gt; &lt;/g&gt; &lt;path stroke-linejoin=&quot;round&quot; d=&quot;m437.14,232.36,165,0,0,42.857-165,0z&quot; stroke=&quot;#000&quot; stroke-linecap=&quot;round&quot; stroke-miterlimit=&quot;4&quot; stroke-width=&quot;0.60000002&quot; fill=&quot;none&quot;/&gt; &lt;/g&gt; &lt;g transform=&quot;matrix(0.63919169,0,0,0.63919169,125.24637,496.31209)&quot;&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; font-weight=&quot;normal&quot; font-size=&quot;40px&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-style=&quot;normal&quot; font-family=&quot;Ubuntu Mono&quot; line-height=&quot;125%&quot; fill=&quot;#000&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m643.63,261.4c0.82665,0,1.56-0.0267,2.2-0.08,0.66665-0.0533,1.2133-0.12,1.64-0.2v-5.52c-0.42668-0.13332-0.94668-0.23999-1.56-0.32-0.58668-0.08-1.2134-0.11999-1.88-0.12-0.61335,0.00001-1.2134,0.0533-1.8,0.16-0.58668,0.08-1.1067,0.24001-1.56,0.48-0.45334,0.24001-0.82668,0.56001-1.12,0.96-0.29334,0.37334-0.44001,0.85334-0.44,1.44-0.00001,1.2,0.39999,2.04,1.2,2.52,0.82666,0.45334,1.9333,0.68,3.32,0.68m-0.32-16.64c1.3866,0.00002,2.5466,0.17335,3.48,0.52,0.95998,0.34669,1.7333,0.82668,2.32,1.44,0.58665,0.61335,0.99998,1.36,1.24,2.24,0.23998,0.88001,0.35998,1.84,0.36,2.88v11.6c-0.77335,0.13333-1.8,0.29333-3.08,0.48-1.2534,0.18667-2.5467,0.28-3.88,0.28-1.0134,0-2-0.0933-2.96-0.28-0.96001-0.16-1.8133-0.45333-2.56-0.88-0.74667-0.45333-1.3467-1.0667-1.8-1.84-0.45334-0.77333-0.68001-1.76-0.68-2.96-0.00001-1.0667,0.22666-1.96,0.68-2.68,0.47999-0.74666,1.08-1.3467,1.8-1.8,0.74666-0.45332,1.5867-0.77332,2.52-0.96,0.95999-0.21332,1.92-0.31999,2.88-0.32,1.3066,0.00001,2.5866,0.14668,3.84,0.44v-0.92c-0.00002-0.55999-0.0667-1.0933-0.2-1.6-0.10668-0.53332-0.33335-1.0133-0.68-1.44-0.32002-0.42665-0.77335-0.75998-1.36-1-0.56001-0.26665-1.2934-0.39998-2.2-0.4-1.1467,0.00002-2.1467,0.08-3,0.24-0.85334,0.16002-1.5067,0.32002-1.96,0.48l-0.4-2.72c0.45333-0.21331,1.2-0.39998,2.24-0.56,1.0667-0.15998,2.2-0.23998,3.4-0.24&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m659.59,245.88c0.39999-0.23998,0.97332-0.47998,1.72-0.72,0.77332-0.26665,1.6266-0.39998,2.56-0.4,1.2533,0.00002,2.3733,0.24002,3.36,0.72,0.98665,0.48002,1.8133,1.1467,2.48,2,0.69331,0.85335,1.2133,1.88,1.56,3.08,0.37331,1.1734,0.55998,2.48,0.56,3.92-0.00002,1.4933-0.21336,2.84-0.64,4.04-0.42669,1.2-1.0267,2.2267-1.8,3.08-0.77335,0.82667-1.7067,1.4667-2.8,1.92-1.0934,0.45333-2.3067,0.68-3.64,0.68-1.4667,0-2.7733-0.10667-3.92-0.32s-2.0667-0.42667-2.76-0.64v-26.64l3.32-0.56v9.84m0,15c0.50666,0.13334,1.0133,0.24,1.52,0.32,0.50665,0.0533,0.98665,0.08,1.44,0.08,1.84,0,3.28-0.56,4.32-1.68,1.04-1.1467,1.56-2.8533,1.56-5.12-0.00002-0.95999-0.0934-1.8533-0.28-2.68-0.18668-0.85332-0.48002-1.5733-0.88-2.16-0.40002-0.61332-0.92002-1.0933-1.56-1.44-0.61335-0.34665-1.36-0.51998-2.24-0.52-0.77335,0.00002-1.52,0.16002-2.24,0.48-0.72001,0.29335-1.2667,0.61335-1.64,0.96v11.76&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m675.39,254.52c-0.00001-1.68,0.26666-3.1333,0.8-4.36,0.53333-1.2266,1.2667-2.24,2.2-3.04,0.93332-0.79998,2.0133-1.3866,3.24-1.76,1.2533-0.39998,2.5866-0.59998,4-0.6,0.90665,0.00002,1.8,0.0667,2.68,0.2,0.90665,0.10669,1.8666,0.32002,2.88,0.64l-0.76,2.84c-0.88002-0.31998-1.6934-0.51998-2.44-0.6-0.72002-0.10665-1.4534-0.15998-2.2-0.16-0.96001,0.00002-1.8667,0.13335-2.72,0.4-0.85335,0.24002-1.6,0.64002-2.24,1.2-0.61334,0.53335-1.1067,1.24-1.48,2.12-0.37334,0.85335-0.56001,1.8933-0.56,3.12-0.00001,1.1733,0.17332,2.1867,0.52,3.04,0.34666,0.82667,0.82666,1.52,1.44,2.08,0.63999,0.53334,1.4,0.93334,2.28,1.2,0.87999,0.26667,1.8533,0.4,2.92,0.4,0.85332,0,1.6666-0.04,2.44-0.12,0.79998-0.10666,1.6666-0.32,2.6-0.64l0.48,2.76c-0.93335,0.34667-1.88,0.58667-2.84,0.72-0.96002,0.16-2,0.24-3.12,0.24-1.4934,0-2.8667-0.2-4.12-0.6-1.2267-0.42667-2.2933-1.04-3.2-1.84-0.88001-0.8-1.5733-1.8-2.08-3-0.48001-1.2267-0.72001-2.64-0.72-4.24&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m707.27,249.12c-0.37335-0.34665-0.92002-0.66665-1.64-0.96-0.72001-0.31998-1.4667-0.47998-2.24-0.48-0.88001,0.00002-1.64,0.17335-2.28,0.52-0.61334,0.34668-1.12,0.82668-1.52,1.44-0.40001,0.58668-0.69334,1.3067-0.88,2.16-0.18668,0.82668-0.28001,1.72-0.28,2.68-0.00001,2.16,0.50666,3.8267,1.52,5s2.3333,1.76,3.96,1.76c0.82665,0,1.52-0.04,2.08-0.12,0.58665-0.08,1.0133-0.16,1.28-0.24v-11.76m0-12.52,3.32-0.56,0,27.2c-0.72002,0.21333-1.64,0.42667-2.76,0.64s-2.4267,0.32-3.92,0.32c-1.3334,0-2.5467-0.22667-3.64-0.68s-2.0267-1.0933-2.8-1.92c-0.77334-0.85333-1.3733-1.88-1.8-3.08-0.42667-1.2-0.64001-2.5467-0.64-4.04-0.00001-1.44,0.17333-2.7466,0.52-3.92,0.37333-1.2,0.90666-2.2266,1.6-3.08,0.69333-0.85332,1.52-1.52,2.48-2,0.98666-0.47998,2.1066-0.71998,3.36-0.72,0.98665,0.00002,1.8533,0.12002,2.6,0.36,0.74665,0.24002,1.3066,0.49335,1.68,0.76v-9.28&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m723.79,244.76c2.5066,0.00002,4.44,0.78669,5.8,2.36,1.36,1.5467,2.04,3.9067,2.04,7.08v1.16h-13.28c0.13332,1.92,0.75999,3.3867,1.88,4.4,1.1467,0.98667,2.7466,1.48,4.8,1.48,1.1733,0,2.1733-0.0933,3-0.28,0.82665-0.18666,1.4533-0.38666,1.88-0.6l0.44,2.8c-0.40002,0.21333-1.12,0.44-2.16,0.68s-2.2134,0.36-3.52,0.36c-1.6,0-3.0134-0.24-4.24-0.72-1.2-0.50667-2.2-1.1867-3-2.04-0.80001-0.85333-1.4-1.8667-1.8-3.04-0.40001-1.2-0.60001-2.4933-0.6-3.88-0.00001-1.6533,0.25333-3.0933,0.76-4.32,0.50666-1.2266,1.1733-2.24,2-3.04,0.82666-0.79998,1.76-1.4,2.8-1.8,1.04-0.39998,2.1066-0.59998,3.2-0.6m4.48,7.92c-0.00002-1.5733-0.41335-2.8133-1.24-3.72-0.82668-0.93332-1.92-1.4-3.28-1.4-0.77335,0.00002-1.48,0.14668-2.12,0.44-0.61334,0.29335-1.1467,0.68002-1.6,1.16-0.45334,0.48001-0.81334,1.0267-1.08,1.64-0.26668,0.61335-0.44001,1.24-0.52,1.88h9.84&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m739.87,263.76,0-15.8-3.92,0,0-2.76,3.92,0,0-1.68c-0.00001-1.44,0.19999-2.6266,0.6-3.56,0.39999-0.95997,0.91999-1.7333,1.56-2.32,0.66665-0.58664,1.4266-0.99997,2.28-1.24,0.87998-0.23997,1.8-0.35997,2.76-0.36,0.95998,0.00003,1.92,0.10669,2.88,0.32,0.98665,0.21336,1.9066,0.46669,2.76,0.76l-0.6,2.84c-0.58669-0.29331-1.32-0.54664-2.2-0.76-0.88002-0.21331-1.7734-0.31997-2.68-0.32-0.56002,0.00003-1.0934,0.08-1.6,0.24-0.48002,0.13336-0.90668,0.38669-1.28,0.76-0.37335,0.34669-0.66668,0.82669-0.88,1.44-0.21335,0.58669-0.32001,1.3334-0.32,2.24v1.64h7.48v2.76h-7.48v15.8h-3.28&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m767.27,262.04c-0.37335,0.21334-0.94668,0.44-1.72,0.68-0.77335,0.24-1.6667,0.36-2.68,0.36-1.0934,0-2.12-0.17333-3.08-0.52-0.93334-0.37333-1.76-0.92-2.48-1.64-0.69334-0.74666-1.2533-1.68-1.68-2.8-0.40001-1.1467-0.60001-2.4933-0.6-4.04-0.00001-1.36,0.18666-2.6,0.56-3.72,0.39999-1.1466,0.95999-2.1333,1.68-2.96,0.74666-0.82665,1.6533-1.4666,2.72-1.92,1.0667-0.47998,2.28-0.71998,3.64-0.72,1.6,0.00002,2.96,0.12002,4.08,0.36,1.1466,0.21335,2.1066,0.42669,2.88,0.64v16.56c-0.00002,2.88-0.73335,4.96-2.2,6.24-1.44,1.28-3.6267,1.92-6.56,1.92-1.2-0.00001-2.2933-0.0933-3.28-0.28-0.96001-0.18667-1.8133-0.41334-2.56-0.68l0.6-2.92c0.69333,0.29333,1.48,0.53333,2.36,0.72,0.90666,0.18666,1.8933,0.28,2.96,0.28,1.92,0,3.2933-0.38667,4.12-1.16,0.82665-0.77333,1.24-2.0267,1.24-3.76v-0.64m0-13.92c-0.32002-0.10665-0.76002-0.19998-1.32-0.28-0.56002-0.10665-1.32-0.15998-2.28-0.16-1.7067,0.00002-3.0133,0.58668-3.92,1.76-0.88001,1.1734-1.32,2.7334-1.32,4.68-0.00001,1.0667,0.11999,1.9867,0.36,2.76,0.26666,0.74667,0.61332,1.3733,1.04,1.88,0.45332,0.48,0.95999,0.84,1.52,1.08,0.55999,0.21334,1.16,0.32,1.8,0.32,0.82665,0,1.6-0.12,2.32-0.36,0.74665-0.24,1.3466-0.52,1.8-0.84v-10.84&quot;/&gt; &lt;/g&gt; &lt;path stroke-linejoin=&quot;round&quot; d=&quot;m611.07,231.65,165,0,0,42.857-165,0z&quot; stroke=&quot;#000&quot; stroke-linecap=&quot;round&quot; stroke-miterlimit=&quot;4&quot; stroke-width=&quot;0.60000002&quot; fill=&quot;none&quot;/&gt; &lt;/g&gt; &lt;path stroke-linejoin=&quot;round&quot; d=&quot;m626.06,644.38,105.47,0,0,27.394-105.47,0z&quot; stroke=&quot;#000&quot; stroke-linecap=&quot;round&quot; stroke-miterlimit=&quot;4&quot; stroke-width=&quot;0.38351503&quot; fill=&quot;none&quot;/&gt; &lt;g font-size=&quot;20px&quot; font-family=&quot;Sans&quot; transform=&quot;matrix(0.63919169,0,0,0.63919169,122.53433,494.48582)&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; fill=&quot;#000&quot;&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; line-height=&quot;125%&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m813.29,247.72,5.0781,16.436-1.6602,0-5.0781-16.436,1.6602,0&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m826.61,253.04c-0.20183-0.11718-0.42318-0.20182-0.66406-0.25391-0.23438-0.0586-0.4948-0.0879-0.78125-0.0879-1.0156,0.00001-1.7969,0.33204-2.3438,0.99609-0.54037,0.65756-0.81055,1.6048-0.81055,2.8418v5.7617h-1.8066v-10.938h1.8066v1.6992c0.3776-0.66405,0.86914-1.1556,1.4746-1.4746,0.60546-0.32551,1.3411-0.48827,2.207-0.48828,0.12369,0.00001,0.26041,0.01,0.41016,0.0293,0.14973,0.013,0.31574,0.0358,0.49804,0.0684l0.01,1.8457&quot;/&gt; &lt;/g&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; line-height=&quot;125%&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m832.48,247.72,5.0781,16.436-1.6602,0-5.0781-16.436,1.6602,0&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m848.55,255.69,0,6.6016-1.7969,0,0-6.543c-0.00001-1.0352-0.20183-1.8099-0.60547-2.3242-0.40365-0.51431-1.0091-0.77147-1.8164-0.77148-0.97006,0.00001-1.735,0.30925-2.2949,0.92773-0.5599,0.6185-0.83985,1.4616-0.83985,2.5293v6.1816h-1.8066v-10.938h1.8066v1.6992c0.42969-0.65754,0.93424-1.1491,1.5137-1.4746,0.58594-0.32551,1.2598-0.48827,2.0215-0.48828,1.2565,0.00001,2.207,0.39063,2.8516,1.1719,0.64452,0.77475,0.96679,1.9173,0.9668,3.4277&quot;/&gt; &lt;/g&gt; &lt;/g&gt; &lt;g font-size=&quot;20px&quot; font-family=&quot;Sans&quot; transform=&quot;matrix(0.63919169,0,0,0.63919169,117.88774,494.48582)&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-weight=&quot;normal&quot; font-style=&quot;normal&quot; fill=&quot;#000&quot;&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; line-height=&quot;125%&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m859.63,247.72,5.0781,16.436-1.6602,0-5.0781-16.436,1.6602,0&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m872.95,253.04c-0.20183-0.11718-0.42318-0.20182-0.66406-0.25391-0.23438-0.0586-0.4948-0.0879-0.78125-0.0879-1.0156,0.00001-1.7969,0.33204-2.3438,0.99609-0.54037,0.65756-0.81055,1.6048-0.81055,2.8418v5.7617h-1.8066v-10.938h1.8066v1.6992c0.3776-0.66405,0.86914-1.1556,1.4746-1.4746,0.60547-0.32551,1.3411-0.48827,2.207-0.48828,0.1237,0.00001,0.26041,0.01,0.41016,0.0293,0.14973,0.013,0.31575,0.0358,0.49805,0.0684l0.01,1.8457&quot;/&gt; &lt;/g&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; line-height=&quot;125%&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m878.82,247.72,5.0781,16.436-1.6602,0-5.0781-16.436,1.6602,0&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m894.89,255.69,0,6.6016-1.7969,0,0-6.543c-0.00001-1.0352-0.20183-1.8099-0.60547-2.3242-0.40366-0.51431-1.0091-0.77147-1.8164-0.77148-0.97006,0.00001-1.735,0.30925-2.2949,0.92773-0.5599,0.6185-0.83985,1.4616-0.83984,2.5293v6.1816h-1.8066v-10.938h1.8066v1.6992c0.42968-0.65754,0.93424-1.1491,1.5137-1.4746,0.58593-0.32551,1.2598-0.48827,2.0215-0.48828,1.2565,0.00001,2.207,0.39063,2.8516,1.1719,0.64452,0.77475,0.96678,1.9173,0.96679,3.4277&quot;/&gt; &lt;/g&gt; &lt;/g&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; font-weight=&quot;normal&quot; font-size=&quot;25.56766701px&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-style=&quot;normal&quot; font-family=&quot;Ubuntu Mono&quot; line-height=&quot;125%&quot; fill=&quot;#000&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m700.49,664.01c-0.17046-0.3409-0.38352-0.7159-0.63919-1.125-0.23864-0.40908-0.50284-0.82668-0.7926-1.2528-0.28977-0.44317-0.59659-0.87782-0.92044-1.304-0.30681-0.42612-0.61363-0.82668-0.92043-1.2017-0.30682,0.39205-0.63068,0.80113-0.97157,1.2272-0.34091,0.42613-0.67329,0.86078-0.99714,1.304-0.30682,0.42613-0.59658,0.84374-0.8693,1.2528-0.27273,0.40908-0.50284,0.77555-0.69033,1.0994h-2.1732c0.56249-1.0227,1.2443-2.071,2.0454-3.1448,0.81816-1.0909,1.6193-2.1221,2.4034-3.0937l-4.2698-5.6249h2.3778l3.196,4.142,2.9403-4.142h2.25l-3.9118,5.497c0.76702,1.0057,1.534,2.0539,2.3011,3.1448,0.78406,1.0909,1.4488,2.1647,1.9943,3.2215h-2.3522&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m713.27,664.01c-0.17046-0.3409-0.38352-0.7159-0.63919-1.125-0.23864-0.40908-0.50284-0.82668-0.7926-1.2528-0.28977-0.44317-0.59658-0.87782-0.92043-1.304-0.30682-0.42612-0.61363-0.82668-0.92044-1.2017-0.30682,0.39205-0.63067,0.80113-0.97157,1.2272-0.34091,0.42613-0.67329,0.86078-0.99714,1.304-0.30681,0.42613-0.59658,0.84374-0.8693,1.2528-0.27272,0.40908-0.50283,0.77555-0.69033,1.0994h-2.1732c0.56249-1.0227,1.2443-2.071,2.0454-3.1448,0.81816-1.0909,1.6193-2.1221,2.4034-3.0937l-4.2698-5.6249h2.3778l3.196,4.142,2.9403-4.142h2.25l-3.9118,5.497c0.76702,1.0057,1.534,2.0539,2.3011,3.1448,0.78407,1.0909,1.4488,2.1647,1.9943,3.2215h-2.3522&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m726.06,664.01c-0.17046-0.3409-0.38353-0.7159-0.63919-1.125-0.23865-0.40908-0.50284-0.82668-0.7926-1.2528-0.28978-0.44317-0.59659-0.87782-0.92044-1.304-0.30682-0.42612-0.61363-0.82668-0.92043-1.2017-0.30682,0.39205-0.63068,0.80113-0.97158,1.2272-0.3409,0.42613-0.67328,0.86078-0.99713,1.304-0.30682,0.42613-0.59659,0.84374-0.86931,1.2528-0.27272,0.40908-0.50283,0.77555-0.69032,1.0994h-2.1732c0.56248-1.0227,1.2443-2.071,2.0454-3.1448,0.81816-1.0909,1.6193-2.1221,2.4034-3.0937l-4.2698-5.6249h2.3778l3.196,4.142,2.9403-4.142h2.25l-3.9119,5.497c0.76703,1.0057,1.534,2.0539,2.3011,3.1448,0.78407,1.0909,1.4488,2.1647,1.9943,3.2215h-2.3522&quot;/&gt; &lt;/g&gt; &lt;g transform=&quot;matrix(0.63919169,0,0,0.63919169,233.10209,496.31209)&quot;&gt; &lt;path stroke-linejoin=&quot;round&quot; d=&quot;m959.64,231.65,165,0,0,42.857-165,0z&quot; stroke=&quot;#000&quot; stroke-linecap=&quot;round&quot; stroke-miterlimit=&quot;4&quot; stroke-width=&quot;0.60000002&quot; fill=&quot;none&quot;/&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; font-weight=&quot;normal&quot; font-size=&quot;32px&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-style=&quot;normal&quot; font-family=&quot;Sans&quot; line-height=&quot;125%&quot; fill=&quot;#000&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m969.66,251.75c0-1.2916,0.44791-2.3802,1.3438-3.2656,0.90624-0.89582,2.0156-1.3437,3.3281-1.3438,1.2916,0.00001,2.3802,0.44793,3.2656,1.3438,0.89582,0.88543,1.3437,1.974,1.3438,3.2656-0.00001,1.3021-0.44793,2.401-1.3438,3.2969-0.89584,0.89584-1.9948,1.3438-3.2969,1.3438-1.3021,0.00001-2.401-0.44791-3.2969-1.3438-0.89584-0.89583-1.3438-1.9948-1.3438-3.2969&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m988.53,251.75c0-1.2916,0.44791-2.3802,1.3438-3.2656,0.90624-0.89582,2.0156-1.3437,3.3281-1.3438,1.2916,0.00001,2.3802,0.44793,3.2656,1.3438,0.89582,0.88543,1.3437,1.974,1.3438,3.2656-0.00001,1.3021-0.44793,2.401-1.3438,3.2969-0.89584,0.89584-1.9948,1.3438-3.2969,1.3438-1.3021,0.00001-2.401-0.44791-3.2969-1.3438-0.89584-0.89583-1.3438-1.9948-1.3438-3.2969&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m1007.4,251.75c0-1.2916,0.4479-2.3802,1.3437-3.2656,0.9063-0.89582,2.0156-1.3437,3.3281-1.3438,1.2917,0.00001,2.3802,0.44793,3.2657,1.3438,0.8958,0.88543,1.3437,1.974,1.3437,3.2656,0,1.3021-0.4479,2.401-1.3437,3.2969-0.8959,0.89584-1.9948,1.3438-3.2969,1.3438-1.3021,0.00001-2.4011-0.44791-3.2969-1.3438-0.8958-0.89583-1.3437-1.9948-1.3437-3.2969&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m1026.3,251.75c0-1.2916,0.4479-2.3802,1.3437-3.2656,0.9063-0.89582,2.0156-1.3437,3.3281-1.3438,1.2917,0.00001,2.3802,0.44793,3.2657,1.3438,0.8958,0.88543,1.3437,1.974,1.3437,3.2656,0,1.3021-0.4479,2.401-1.3437,3.2969-0.8959,0.89584-1.9948,1.3438-3.2969,1.3438-1.3021,0.00001-2.4011-0.44791-3.2969-1.3438-0.8958-0.89583-1.3437-1.9948-1.3437-3.2969&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m1045.2,251.75c0-1.2916,0.4479-2.3802,1.3437-3.2656,0.9063-0.89582,2.0156-1.3437,3.3281-1.3438,1.2917,0.00001,2.3802,0.44793,3.2657,1.3438,0.8958,0.88543,1.3437,1.974,1.3437,3.2656,0,1.3021-0.4479,2.401-1.3437,3.2969-0.8959,0.89584-1.9948,1.3438-3.2969,1.3438-1.3021,0.00001-2.4011-0.44791-3.2969-1.3438-0.8958-0.89583-1.3437-1.9948-1.3437-3.2969&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m1064,251.75c0-1.2916,0.4479-2.3802,1.3437-3.2656,0.9063-0.89582,2.0156-1.3437,3.3281-1.3438,1.2917,0.00001,2.3802,0.44793,3.2657,1.3438,0.8958,0.88543,1.3437,1.974,1.3437,3.2656,0,1.3021-0.4479,2.401-1.3437,3.2969-0.8959,0.89584-1.9948,1.3438-3.2969,1.3438-1.3021,0.00001-2.4011-0.44791-3.2969-1.3438-0.8958-0.89583-1.3437-1.9948-1.3437-3.2969&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m1082.9,251.75c0-1.2916,0.4479-2.3802,1.3437-3.2656,0.9063-0.89582,2.0156-1.3437,3.3281-1.3438,1.2917,0.00001,2.3802,0.44793,3.2657,1.3438,0.8958,0.88543,1.3437,1.974,1.3437,3.2656,0,1.3021-0.4479,2.401-1.3437,3.2969-0.8959,0.89584-1.9948,1.3438-3.2969,1.3438-1.3021,0.00001-2.4011-0.44791-3.2969-1.3438-0.8958-0.89583-1.3437-1.9948-1.3437-3.2969&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m1099.6,240.33,15,0,0,1.3438-8.4688,21.984-3.2968,0,7.9687-20.672-11.203,0,0-2.6562&quot;/&gt; &lt;/g&gt; &lt;/g&gt; &lt;g transform=&quot;matrix(0.95076089,0,0,0.95076089,165.60684,104.9409)&quot;&gt; &lt;path stroke-linejoin=&quot;round&quot; d=&quot;m600.23,567.38,110.93,0,0,28.813-110.93,0z&quot; stroke=&quot;#000&quot; stroke-linecap=&quot;round&quot; stroke-miterlimit=&quot;4&quot; stroke-width=&quot;0.40337694&quot; fill=&quot;none&quot;/&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; font-weight=&quot;normal&quot; font-size=&quot;21.51343727px&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-style=&quot;italic&quot; font-family=&quot;Ubuntu&quot; line-height=&quot;125%&quot; fill=&quot;#000&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m625.12,577.19c-0.22949,0.31554-0.51634,0.7243-0.86054,1.2263-0.34423,0.50199-0.71713,1.0542-1.1187,1.6565-0.4016,0.60238-0.81752,1.2334-1.2478,1.8932-0.43028,0.64541-0.8462,1.2765-1.2478,1.8932-0.40159,0.60238-0.77449,1.1689-1.1187,1.6996-0.34423,0.51632-0.62391,0.93942-0.83903,1.2693h-1.678c-0.0574-0.34421-0.13626-0.77448-0.23664-1.2908-0.0861-0.53066-0.18646-1.0972-0.30119-1.6996-0.11475-0.61671-0.23666-1.2478-0.36573-1.8932-0.11475-0.65974-0.23666-1.2908-0.36573-1.8932-0.11475-0.60237-0.22231-1.1474-0.3227-1.635-0.1004-0.50197-0.18646-0.91073-0.25816-1.2263-0.60239,1.8502-1.1904,3.7577-1.7641,5.7226s-1.133,3.9585-1.678,5.9807h-2.0653c0.34421-1.2908,0.70277-2.5888,1.0757-3.8939,0.38724-1.3195,0.77448-2.6103,1.1617-3.8724,0.40158-1.2765,0.79599-2.5171,1.1832-3.7218,0.40158-1.2047,0.78882-2.345,1.1617-3.4206h2.0438c0.1721,0.63107,0.35137,1.3769,0.53783,2.2374,0.20079,0.86055,0.39441,1.7641,0.58086,2.7107,0.20079,0.93226,0.38007,1.8645,0.53784,2.7967,0.1721,0.93226,0.31552,1.7784,0.43027,2.5386,0.51631-0.77448,1.0828-1.6278,1.6996-2.5601,0.63105-0.93224,1.2621-1.8645,1.8932-2.7968,0.63105-0.94658,1.2406-1.843,1.8286-2.6892,0.60236-0.86052,1.1402-1.6063,1.6135-2.2374h2.0008c-0.24383,2.4239-0.57371,4.8907-0.98961,7.4006-0.40161,2.4956-0.84622,4.9983-1.3338,7.5082h-2.0868c0.43025-2.0653,0.82466-4.066,1.1832-6.0022,0.35854-1.9505,0.67407-3.8509,0.94659-5.7011&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m631.12,585.06-2.1083,3.8294-2.2804,0c1.6063-2.8971,3.1696-5.5648,4.6899-8.003,1.5346-2.4382,3.0477-4.7401,4.5393-6.9058h2.0438c0.21513,1.0757,0.40875,2.1657,0.58087,3.27,0.18643,1.09,0.36571,2.2374,0.53783,3.4422,0.1721,1.2048,0.33703,2.4812,0.49481,3.8294,0.15775,1.3482,0.32269,2.8039,0.49481,4.3672h-2.1083c-0.0717-0.6454-0.13626-1.2908-0.19362-1.9362-0.0574-0.65974-0.12192-1.2908-0.19362-1.8932h-6.4971m6.3034-1.678c-0.11475-1.1617-0.251-2.3163-0.40875-3.4637-0.14344-1.1474-0.31555-2.3306-0.51633-3.5497-0.50199,0.73147-1.1259,1.6781-1.8717,2.8398-0.7458,1.1474-1.592,2.5386-2.5386,4.1736h5.3353&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m647.95,589.22c-0.93226,0-1.7569-0.13625-2.474-0.40875-0.70277-0.27251-1.2908-0.65975-1.7641-1.1617-0.4733-0.50198-0.83185-1.1044-1.0757-1.8071-0.22948-0.71711-0.34422-1.5203-0.34422-2.4095,0-1.2908,0.20079-2.5242,0.60238-3.7003,0.41592-1.1761,0.99679-2.2159,1.7426-3.1194,0.76013-0.90355,1.6709-1.6207,2.7322-2.1514,1.0613-0.54499,2.2446-0.81749,3.5497-0.81751,1.1187,0.00002,2.0079,0.11476,2.6677,0.34422,0.67407,0.22949,1.1545,0.44462,1.4414,0.6454l-0.86054,1.7211c-0.32988-0.21513-0.78167-0.41592-1.3553-0.60238-0.55937-0.20078-1.2263-0.30118-2.0008-0.30119-0.98963,0.00001-1.8788,0.23666-2.6677,0.70994-0.78883,0.45897-1.4558,1.0614-2.0008,1.8071-0.54501,0.73147-0.96094,1.5633-1.2478,2.4956-0.28685,0.91792-0.43027,1.8286-0.43027,2.7322,0,2.7968,1.2119,4.1951,3.6358,4.1951,0.51632,0,0.97527-0.0359,1.3769-0.10757,0.41592-0.0717,0.78165-0.15059,1.0972-0.23665,0.31552-0.10039,0.59519-0.20796,0.83902-0.3227,0.24381-0.11473,0.45894-0.21513,0.64541-0.30119l0.25816,1.8071c-0.17212,0.1004-0.4016,0.20797-0.68843,0.3227-0.27252,0.11474-0.59522,0.22231-0.96811,0.32271-0.37291,0.10039-0.78883,0.17927-1.2478,0.23664-0.45896,0.0717-0.9466,0.10757-1.4629,0.10757&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m668.22,586.68c-0.00002,0.32987,0.0287,0.66691,0.0861,1.0111,0.0574,0.32987,0.15775,0.68843,0.30119,1.0757l-1.7641,0.25816c-0.15778-0.31553-0.27969-0.6956-0.36573-1.1402-0.31554,0.28684-0.73864,0.57369-1.2693,0.86054-0.53067,0.28684-1.1832,0.43026-1.9577,0.43026-0.63106,0-1.1761-0.0932-1.635-0.27967-0.45896-0.20079-0.83903-0.48047-1.1402-0.83902-0.30119-0.35856-0.5235-0.78166-0.66692-1.2693-0.14342-0.50197-0.21513-1.047-0.21513-1.635,0-0.96093,0.15776-1.9004,0.47329-2.8183,0.32987-0.9179,0.81034-1.7354,1.4414-2.4525,0.6454-0.71711,1.4486-1.2908,2.4095-1.7211,0.96092-0.4446,2.0796-0.6669,3.3561-0.66691,0.15776,0.00001,0.31552,0.007,0.4733,0.0215,0.15775,0.0143,0.32269,0.0359,0.49481,0.0645l1.2048-5.0341,2.0868-0.34422-3.0334,12.585c-0.0717,0.32988-0.13626,0.64541-0.19362,0.94659-0.0574,0.3012-0.0861,0.61673-0.0861,0.9466m-4.5608,0.79599c0.60237,0,1.1115-0.12191,1.5274-0.36573,0.43026-0.25815,0.80316-0.55217,1.1187-0.88205,0.0143-0.22947,0.0359-0.47329,0.0645-0.73145,0.043-0.2725,0.10039-0.56652,0.17211-0.88205l1.2908-5.3784c-0.12909-0.0287-0.27251-0.043-0.43027-0.043-0.15777-0.0143-0.30836-0.0215-0.45178-0.0215-0.81752,0.00001-1.5561,0.15777-2.2159,0.47329-0.65975,0.31554-1.2263,0.73864-1.6996,1.2693-0.45896,0.53068-0.81752,1.1474-1.0757,1.8502-0.24383,0.68844-0.36574,1.4127-0.36573,2.1729-0.00001,0.32987,0.0358,0.6454,0.10756,0.94659,0.0717,0.30119,0.18645,0.57369,0.34422,0.81751,0.15776,0.22948,0.36572,0.41593,0.62389,0.55935,0.2725,0.14342,0.60237,0.21513,0.98962,0.21513&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m678.54,589.02c-0.0717-0.15777-0.14343-0.32987-0.21514-0.51632-0.0717-0.20079-0.12909-0.40876-0.1721-0.62389-0.31554,0.28684-0.73864,0.57369-1.2693,0.86054-0.53067,0.28684-1.1832,0.43026-1.9577,0.43026-0.63106,0-1.1761-0.10039-1.635-0.30118-0.44461-0.2008-0.81034-0.48047-1.0972-0.83903-0.28684-0.35855-0.50198-0.78165-0.6454-1.2693-0.12908-0.48764-0.19362-1.0255-0.19362-1.6135,0-0.96093,0.15776-1.9004,0.4733-2.8183,0.32987-0.9179,0.8175-1.7354,1.4629-2.4525,0.6454-0.71711,1.4557-1.298,2.431-1.7426,0.97527-0.4446,2.1155-0.6669,3.4206-0.66692,0.38724,0.00002,0.83902,0.043,1.3554,0.12908,0.51631,0.0861,0.96092,0.22949,1.3338,0.43027l-1.6565,6.7552c-0.0717,0.32988-0.13626,0.64541-0.19362,0.94659-0.043,0.3012-0.0646,0.61673-0.0645,0.9466-0.00001,0.32987,0.0287,0.66691,0.0861,1.0111,0.0574,0.32987,0.15776,0.68843,0.30119,1.0757l-1.7641,0.25816m-3.2055-1.549c0.60237,0,1.1187-0.12908,1.549-0.38724,0.43026-0.25816,0.80316-0.55935,1.1187-0.90356,0.0143-0.24382,0.0358-0.49481,0.0645-0.75297,0.043-0.2725,0.0932-0.54501,0.1506-0.81751l1.2908-5.3353c-0.0717-0.0287-0.19363-0.0502-0.36573-0.0645-0.15777-0.0143-0.30119-0.0215-0.43026-0.0215-0.81752,0.00001-1.5562,0.15777-2.2159,0.47329-0.65975,0.31554-1.2263,0.73864-1.6996,1.2693-0.45896,0.51633-0.81751,1.1259-1.0757,1.8286-0.24382,0.68844-0.36573,1.4127-0.36573,2.1729,0,0.30119,0.0287,0.60955,0.0861,0.92507,0.0574,0.3012,0.15776,0.5737,0.30119,0.81752,0.15776,0.22947,0.35855,0.42309,0.60238,0.58086,0.25815,0.14342,0.58803,0.21513,0.98962,0.21513&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m686.44,589.19c-1.0757,0-1.8645-0.23665-2.3665-0.70995-0.50198-0.47329-0.75297-1.1617-0.75297-2.0653,0-0.58803,0.10039-1.341,0.30119-2.2589l2.3019-9.5735,2.0868-0.34421-0.83903,3.4637h3.8079l-0.40875,1.678h-3.8079l-1.1832,4.9481c-0.17211,0.67409-0.25817,1.2621-0.25816,1.7641-0.00001,0.4733,0.12907,0.81752,0.38724,1.0326,0.25816,0.20079,0.68843,0.30119,1.2908,0.30119,0.41592,0,0.82467-0.0645,1.2263-0.19363,0.40158-0.14342,0.70994-0.2725,0.92508-0.38724l0.15059,1.6996c-0.21514,0.12909-0.58087,0.26534-1.0972,0.40876-0.51633,0.15776-1.1044,0.23665-1.7641,0.23665&quot;/&gt; &lt;path style=&quot;&quot; d=&quot;m698.5,589.02c-0.0717-0.15777-0.14343-0.32987-0.21513-0.51632-0.0717-0.20079-0.12909-0.40876-0.17211-0.62389-0.31554,0.28684-0.73864,0.57369-1.2693,0.86054-0.53068,0.28684-1.1832,0.43026-1.9577,0.43026-0.63106,0-1.1761-0.10039-1.635-0.30118-0.44461-0.2008-0.81034-0.48047-1.0972-0.83903-0.28685-0.35855-0.50199-0.78165-0.64541-1.2693-0.12908-0.48764-0.19362-1.0255-0.19362-1.6135,0-0.96093,0.15777-1.9004,0.4733-2.8183,0.32987-0.9179,0.81751-1.7354,1.4629-2.4525,0.6454-0.71711,1.4557-1.298,2.431-1.7426,0.97527-0.4446,2.1155-0.6669,3.4206-0.66692,0.38723,0.00002,0.83901,0.043,1.3553,0.12908,0.51631,0.0861,0.96092,0.22949,1.3338,0.43027l-1.6565,6.7552c-0.0717,0.32988-0.13626,0.64541-0.19362,0.94659-0.043,0.3012-0.0646,0.61673-0.0645,0.9466-0.00001,0.32987,0.0287,0.66691,0.0861,1.0111,0.0574,0.32987,0.15776,0.68843,0.30119,1.0757l-1.7641,0.25816m-3.2055-1.549c0.60237,0,1.1187-0.12908,1.549-0.38724,0.43026-0.25816,0.80316-0.55935,1.1187-0.90356,0.0143-0.24382,0.0358-0.49481,0.0645-0.75297,0.043-0.2725,0.0932-0.54501,0.1506-0.81751l1.2908-5.3353c-0.0717-0.0287-0.19364-0.0502-0.36573-0.0645-0.15778-0.0143-0.3012-0.0215-0.43027-0.0215-0.81752,0.00001-1.5562,0.15777-2.2159,0.47329-0.65975,0.31554-1.2263,0.73864-1.6996,1.2693-0.45896,0.51633-0.81751,1.1259-1.0757,1.8286-0.24382,0.68844-0.36573,1.4127-0.36573,2.1729,0,0.30119,0.0287,0.60955,0.0861,0.92507,0.0574,0.3012,0.15776,0.5737,0.30118,0.81752,0.15776,0.22947,0.35856,0.42309,0.60238,0.58086,0.25816,0.14342,0.58803,0.21513,0.98962,0.21513&quot;/&gt; &lt;/g&gt; &lt;/g&gt; &lt;g style=&quot;writing-mode:lr-tb;letter-spacing:0px;text-anchor:start;word-spacing:0px;text-align:start;&quot; font-weight=&quot;normal&quot; font-size=&quot;25.56766701px&quot; font-stretch=&quot;normal&quot; font-variant=&quot;normal&quot; font-style=&quot;normal&quot; font-family=&quot;Ubuntu Mono&quot; line-height=&quot;125%&quot; fill=&quot;#000&quot;&gt; &lt;path style=&quot;&quot; d=&quot;m629.99,664.01,0-17.36,2.1221-0.35794,0,6.034c0.3409-0.13634,0.72441-0.23861,1.1506-0.30681,0.42612-0.0852,0.84372-0.12782,1.2528-0.12784,0.90339,0.00002,1.6534,0.13638,2.25,0.40909,0.61361,0.25569,1.0994,0.62215,1.4574,1.0994,0.35794,0.47727,0.61362,1.0483,0.76703,1.713,0.1534,0.66477,0.2301,1.3977,0.23011,2.1988v6.6987h-2.0966v-6.2385c0-1.4659-0.20455-2.4971-0.61362-3.0937-0.40909-0.61361-1.142-0.92043-2.1988-0.92044-0.44318,0.00001-0.87783,0.0512-1.304,0.15341-0.40909,0.0852-0.70738,0.17046-0.89487,0.25568v9.8436h-2.1221&quot;/&gt; &lt;/g&gt; &lt;/g&gt; &lt;/svg&gt;  &lt;p&gt;Note that the Cookie data has been shifted so that the second to last byte of the data is now at the end of the block. So, with another 256 requests the attacker can expect to have decrypted that byte and so on.&lt;/p&gt;  &lt;p&gt;Thus, with an average of 256&amp;times;n requests and a little control of the layout of those requests, an attacker can decrypt &lt;i&gt;n&lt;/i&gt; bytes of plaintext from SSLv3. The critical part of this attack is that SSLv3 doesn&#39;t specify the contents of padding bytes (the &amp;bull;s). TLS does and so this attack doesn&#39;t work because the attacker only has a 2&lt;sup&gt;-64&lt;/sup&gt; or 2&lt;sup&gt;-128&lt;/sup&gt; chance of a duplicated block being a valid padding block.&lt;/p&gt;  &lt;p&gt;This &lt;i&gt;should&lt;/i&gt; be an academic curiosity because SSLv3 was deprecated very nearly 15 years ago. However, the Internet is vast and full of bugs. The vastness means that a non-trivial number of SSLv3 servers still exist and workarounds for the bugs mean that an attacker can convince a browser to use SSLv3 even when both the browser and server support a more recent version. Thus, this attack is widely applicable.&lt;/p&gt;  &lt;p&gt;SSL/TLS has a perfectly good version negotiation mechanism that should prevent a browser and server that support a modern TLS version from using anything less. However, because some servers are buggy and don&#39;t implement version negotiation correctly, browsers break this mechanism by retrying connections with lesser SSL/TLS versions when TLS handshaking fails. These days we&#39;re more aware of the fact that fallback behaviour like this is a landmine for the future (as demonstrated today) but this TLS fallback behaviour was enshrined long ago and we&#39;re stuck with it. It means that, by injecting some trivial errors on the network, an attacker can cause a browser to speak SSLv3 to any server and then run the above attack.&lt;/p&gt;  &lt;h4&gt;What&#39;s to be done?&lt;/h4&gt;  &lt;p&gt;It&#39;s no revelation that this fallback behaviour is bad news. In fact, Bodo and I have a &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-tls-downgrade-scsv-00&quot;&gt;draft&lt;/a&gt; out for a mechanism to add a second, less bug-rusted mechanism to prevent it called &lt;tt&gt;TLS_FALLBACK_SCSV&lt;/tt&gt;. Chrome and Google have implemented it since &lt;a href=&quot;https://www.imperialviolet.org/2014/02/27/tlssymmetriccrypto.html&quot;&gt;February&lt;/a&gt; this year and so connections from Chrome to Google are already protected. We are urging server operators and other browsers to implement it too. It doesn&#39;t just protect against this specific attack, it solves the fallback problem in general. For example, it stops attackers from downgrading TLS 1.2 to 1.1 and 1.0 and thus removing modern, AEAD ciphers from a connection. (Remember, everything less than TLS 1.2 with an AEAD mode is cryptographically broken.) There should soon be an updated OpenSSL version that supports it.&lt;/p&gt;  &lt;p&gt;Even with &lt;tt&gt;TLS_FALLBACK_SCSV&lt;/tt&gt;, there will be a long tail of servers that don&#39;t update. Because of that, I&#39;ve just landed &lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/32352ad08ee673a4d43e8593ce988b224f6482d3&quot;&gt;a patch&lt;/a&gt; on Chrome trunk that disables fallback to SSLv3 for all servers. This change will break things and so we don&#39;t feel that we can jump it straight to Chrome&#39;s stable channel. But we do hope to get it there within weeks and so buggy servers that currently function only because of SSLv3 fallback will need to be updated.&lt;/p&gt;  &lt;p&gt;Chrome users that just want to get rid of SSLv3 can use the &lt;a href=&quot;http://www.chromium.org/for-testers/command-line-flags&quot;&gt;command line flag&lt;/a&gt; &lt;tt&gt;--ssl-version-min=tls1&lt;/tt&gt; to do so. (We used to have an entry in the preferences for that but people thought that &amp;ldquo;SSL 3.0&amp;rdquo; was a higher version than &amp;ldquo;TLS 1.0&amp;rdquo; and would mistakenly disable the latter.)&lt;/p&gt; In Firefox you can go into &lt;tt&gt;about:config&lt;/tt&gt; and set &lt;tt&gt;&lt;a href=&quot;http://kb.mozillazine.org/Security.tls.version.*&quot;&gt;security.tls.version.min&lt;/a&gt;&lt;/tt&gt; to 1. I expect that other browser vendors will publish similar instructions over the coming days.&lt;/p&gt;  &lt;p&gt;As a server operator, it is possible to stop this attack by disabling SSLv3, or by disabling CBC-mode ciphers in SSLv3. However, the compatibility impact of this is unclear. Certainly, disabling SSLv3 completely is likely to break IE6. Some sites will be happy doing that, some will not.&lt;/p&gt;  &lt;p&gt;A little further down the line, perhaps in about three months, we hope to disable SSLv3 completely. The changes that I&#39;ve just landed in Chrome only disable fallback to SSLv3 &amp;ndash; a server that correctly negotiates SSLv3 can still use it. Disabling SSLv3 completely will break even more than just disabling the fallback but SSLv3 is now completely broken with CBC-mode ciphers and the only other option is RC4, which is hardly that attractive. Any servers depending on SSLv3 are thus on notice that they need to address that now.&lt;/p&gt;  &lt;p&gt;We hardened SSLv3 and TLS 1.0 against the BEAST attack with 1/n-1 record splitting and, based on an idea by H&amp;aring;vard Molland, it is possible to do something called anti-POODLE record splitting this time. I&#39;ll omit the details, but one can ensure that the last block in a CBC record contains at least fixed six bytes using only one split for AES and two for 3DES. With this, CBC is probably less bad than RC4. However, while anti-POODLE record splitting &lt;i&gt;should&lt;/i&gt; be easy to deploy because it&#39;s valid according to the spec, so was 1/n-1 and deploying that was very painful. Thus there&#39;s a high risk that this would also cause compatibility problems. Therefore I&#39;m not proceeding with anti-POODLE record splitting and concentrating on removing SSLv3 fallback instead. (There&#39;s also the possibility that an attacker could run the attack on the server to client direction. If we assume that both the client and the server get patched then we might as well assume that they are patched for &lt;tt&gt;TLS_FALLBACK_SCSV&lt;/tt&gt;, which makes record splitting moot.)&lt;/p&gt; </content>  </entry>    <entry>    <title>PKCS#1 signature validation</title>    <link href=\"http://www.imperialviolet.org/2014/09/26/pkcs1.html\"/>    <updated>2014-09-26T00:00:00-04:00</updated>    <id>http://www.imperialviolet.org/2014/09/26/pkcs1</id>    <content type=\"html\">&lt;p&gt;On Wednesday, Chrome and Mozilla did &lt;a href=&quot;https://www.mozilla.org/security/announce/2014/mfsa2014-73.html&quot;&gt;coordinated&lt;/a&gt; &lt;a href=&quot;http://googlechromereleases.blogspot.com/2014/09/stable-channel-update_24.html&quot;&gt;updates&lt;/a&gt; to fix an RSA signature verification bug in NSS &amp;mdash; the crypto library that handles SSL in Firefox and (currently) Chrome on most platforms. The updates should be well spread now and the bug has been &lt;a href=&quot;https://www.reddit.com/r/netsec/comments/2hd1m8/rsa_signature_forgery_in_nss/cksnr02&quot;&gt;detailed on Reddit&lt;/a&gt;, so I think it&#39;s safe to talk about.&lt;/p&gt;  &lt;p&gt;(Hilariously, on the same day, &lt;i&gt;bash&lt;/i&gt; turned out to have a little security issue and so hardly anyone noticed the NSS one!)&lt;/p&gt;  &lt;p&gt;The NSS bug is another variant of Bleichenbacher&#39;s 2006 attack on RSA signature validation. To recap: an RSA signature is roughly the cube root of the message hash modulo the RSA modulus. Verification involves cubing the signature and checking that the result is the hash that you expected. Cubing modulo an RSA modulus is easy but finding a cube root is infeasible.&lt;/p&gt;  &lt;p&gt;There&#39;s a little more to it because one needs to eliminate some properties of the RSA operation by formatting the hash that you&#39;re going to sign &amp;mdash; called padding.&lt;/p&gt;  &lt;p&gt;The standard for RSA signing and encryption is PKCS#1 version 1.5. The PKCS series of standards are amazing. Although I&#39;ve no doubt that the people writing them were doing their best, it was a long time ago and mistakes were made. In a modern light, they are &lt;i&gt;all&lt;/i&gt; completely terrible. If you wanted something that was plausible enough to be widely implemented but complex enough to ensure that cryptography would forever be hamstrung by implementation bugs, you would be hard pressed to do better. If you can find some implementers, just say &quot;PKCS#11!&quot; or &quot;PKCS#12!&quot; as punchlines. You&#39;ll get a good laugh, although possibly also a few panic attacks.&lt;/p&gt;  &lt;p&gt;(PKCS#1 version 2 is much better, but only because they took it from Bellare and Rogaway and slapped the PKCS#1 title on it.)&lt;/p&gt;  &lt;p&gt;PKCS#1 version 1.5 wanted to include an identifier for the hash function that&#39;s being used, inside the signature. This is a fine idea, but they did it by encoding the algorithm and hash value with ASN.1. This caused many implementations to include the complexity of an ASN.1 parser inside signature validation and that let the bugs in.&lt;/p&gt;  &lt;p&gt;Bleichenbacher&#39;s &lt;a href=&quot;https://www.ietf.org/mail-archive/web/openpgp/current/msg00999.html&quot;&gt;original attack&lt;/a&gt; was based on the observation that the ASN.1 parsers, in many cases, didn&#39;t reject extra trailing data. This is reasonable behaviour for a generic ASN.1 parser, but a disaster in signature verification. Because the parser could ignore so much of the signature, Bleichenbacher could arrange for a perfect cube to have a suitable prefix and thus calculate the cube root over the integers &amp;mdash; ignoring the RSA modulus completely!&lt;/p&gt;  &lt;p&gt;That was fixed, but there was another common bug: the ASN.1 structure used to identify the hash was a standard structure called &lt;tt&gt;AlgorithmIdentifier&lt;/tt&gt;, which includes an optional parameter. Implementations were ignoring the parameter and that also introduced a vulnerability: arbitrary bytes could be inserted as a parameter and that was sufficient to forge signatures. (See section five of &lt;a href=&quot;https://www.cdc.informatik.tu-darmstadt.de/reports/reports/sigflaw.pdf&quot;&gt;this paper&lt;/a&gt; for details.)&lt;/p&gt;  &lt;p&gt;This week&#39;s vulnerability was similar. Antoine Delignat-Lavaud (who, by the way, has been doing stellar work along with the &lt;a href=&quot;http://prosecco.gforge.inria.fr&quot;&gt;Prosecco&lt;/a&gt; team at INRIA: see &lt;a href=&quot;https://secure-resumption.com/&quot;&gt;Triple Handshake&lt;/a&gt;, &lt;a href=&quot;https://bh.ht.vc/&quot;&gt;Cookie Cutter, SPDY and virtual host attacks&lt;/a&gt; and &lt;a href=&quot;http://www.mitls.org/wsgi/home&quot;&gt;miTLS&lt;/a&gt;) noticed that the check on the contents of the parameters in NSS wasn&#39;t very strict &amp;mdash; it was only checking that the length was at most two bytes. This is because, due to complexity, there wasn&#39;t universal agreement on what the the parameter should be. The ASN.1 for the parameter is an ANY type (with the concrete type depending on a preceding object id) but also optional. So, when not needed, should it be an ASN.1 NULL (which is two bytes long), or should it be omitted completely? The answer is the former, but it was underspecified for a long time.&lt;/p&gt;  &lt;p&gt;Once Antoine had put a spotlight on the code, Brian Smith noticed something worse: an integer overflow in the ASN.1 parser. ASN.1 (in DER form at least, because, of course, ASN.1 has  multiple defined encodings) has variable-length lengths, and NSS was using a generic ASN.1 parser which didn&#39;t check for overflow. So you could specify that a length was arbitrarily long and the parser would do something similar to:&lt;/p&gt;  &lt;pre&gt;unsigned length = 0; for (i = 0; i &amp;lt; length_of_length; i++) {   length &amp;lt;&amp;lt;= 8;   length |= length[i]; }&lt;/pre&gt;  &lt;p&gt;Thus, as long as the last 4 or 8 bytes (depending on whether the system was 32 or 64 bit) encoded the correct length, the bytes before that would be ignored. That allows arbitrary bytes in the signature again and the attack from section 5 of &lt;a href=&quot;https://www.cdc.informatik.tu-darmstadt.de/reports/reports/sigflaw.pdf&quot;&gt;the previous paper&lt;/a&gt; can be still be used to make forged signatures.&lt;/p&gt;  &lt;p&gt;(Intel&#39;s ATR group also reported the same issue to Mozilla a little bit later. Bugs often seem to work like &lt;a href=&quot;https://en.wikipedia.org/wiki/Multiple_discovery&quot;&gt;scientific discovery&lt;/a&gt;.)&lt;/p&gt;  &lt;h4&gt;The moral of the story&lt;/h4&gt;  &lt;p&gt;The moral here is that an ASN.1 parser should never have been put somewhere so sensitive; &lt;a href=&quot;http://langsec.org/&quot;&gt;parsing is dangerous&lt;/a&gt;. It was a mistake to have defined PKCS#1 that way, but it can be ameliorated: rather than parsing, generate the expected signature contents and compare it against the plaintext. Go has always done this. I believe that SSH does this. Bouncy Castle reportedly does this. BoringSSL does this because I changed it from OpenSSL (prior to learning about the NSS issue &amp;mdash; it&#39;s just a good idea). NSS does it now, although they&#39;re still worried about the omitted parameter vs NULL parameter confusion so they serialise two ASN.1 outputs and compare against both.&lt;/p&gt;  &lt;p&gt;I generated &lt;a href=&quot;/binary/sigtests.tar.bz2&quot;&gt;a number of tests&lt;/a&gt; of different possible points of flexibility in signature parsing so that other libraries can be tested. For example, you can test OpenSSL (which still uses an ASN.1 parser) against them like this:&lt;/p&gt;  &lt;pre&gt;for cert in $(ls *.crt | grep -v root2048.crt); do   openssl verify -CAfile root2048.crt $cert 2&amp;gt;&amp;gt; /dev/null | grep -q &quot;$cert: OK&quot;   if [ $? -eq 0 ] ; then     echo &quot;$cert accepted&quot;   fi done&lt;/pre&gt;  &lt;p&gt;The file &lt;tt&gt;control.crt&lt;/tt&gt; should always be accepted. The file &lt;tt&gt;missingnull.crt&lt;/tt&gt; will be accepted if you allow the parameter to be omitted. (I recommend against that. BoringSSL doesn&#39;t allow it and we&#39;ll see whether we can make that stick.) Nothing else should be accepted.&lt;/p&gt;  &lt;p&gt;Sadly, OpenSSL 1.0.1 also accepts &lt;tt&gt;highvaltag.crt&lt;/tt&gt; (ordinary ASN.1 tags in high-value form) and &lt;tt&gt;indeflen.crt&lt;/tt&gt; (BER indefinite lengths rather than DER). The OpenSSL development branch also accepts &lt;tt&gt;bernull.crt&lt;/tt&gt; (superfluous zero bytes in a length). To be clear, there is no known vulnerability here, but it&#39;s unwelcome flexibility in something that should be rigid. (I let OpenSSL team know on Wednesday and that they&#39;re welcome to use the code from BoringSSL.)&lt;/p&gt;  &lt;p&gt;Remember, we use PKCS in browsers because we have to deal with the world as we find it, not as we want it. If you are not so encumbered, consider &lt;a href=&quot;http://doc.libsodium.org/&quot;&gt;something&lt;/a&gt; &lt;a href=&quot;http://tweetnacl.cr.yp.to/&quot;&gt;simpler&lt;/a&gt;.&lt;/p&gt; </content>  </entry>    <entry>    <title>A couple more formal systems</title>    <link href=\"http://www.imperialviolet.org/2014/09/11/moveprovers.html\"/>    <updated>2014-09-11T00:00:00-04:00</updated>    <id>http://www.imperialviolet.org/2014/09/11/moveprovers</id>    <content type=\"html\">&lt;p&gt;After my &lt;a href=&quot;https://www.imperialviolet.org/2014/09/07/provers.html&quot;&gt;last post&lt;/a&gt; on formal analysis of C code, people pointed out several other options to me and I wanted to do a follow up because the conclusion is a little more positive now.&lt;/p&gt;  &lt;p&gt;Firstly, I noted last time that Z3 was the best, Why3-compatible SMT solver for my problem but that it came with a non-commercial license. Craig Stuntz pointed out that Microsoft &lt;a href=&quot;http://www.microsoftstore.com/store/msusa/en_US/pdp/Microsoft-Research-Z3-Theorem-Prover/productID.279030500&quot;&gt;sell a commercial license&lt;/a&gt; for $10K. Sure, that&#39;s quite a lot for a hobbyist project, but it&#39;s easy for a corporation and a lot easier than having to negotiate specially.&lt;/p&gt;  &lt;p&gt;The first additional thing that I&#39;ve looked into is &lt;a href=&quot;http://ssrg.nicta.com/projects/TS/autocorres/&quot;&gt;AutoCorres&lt;/a&gt;. I mentioned last time that SeL4&#39;s refinement proof to C code involved a C parser in Isabelle that output structures in the &lt;a href=&quot;http://www-wjp.cs.uni-saarland.de/leute/private_homepages/nschirmer/pub/schirmer_phd.pdf&quot;&gt;Simpl&lt;/a&gt; framework and that Simpl was pretty intimidating.&lt;/p&gt;  &lt;p&gt;AutoCorres is a tool for verifiably simplifing the Simpl structures and thus making proofs easier. Let&#39;s repeat the example from last time and show how AutoCorres helps. Here&#39;s the test C function:&lt;/p&gt;  &lt;pre&gt;int add(int a, int b) {   return a+b; }&lt;/pre&gt;  &lt;p&gt;And here&#39;s the raw result from the C parser, exactly as I showed last time:&lt;/p&gt;  &lt;pre&gt;test_global_addresses.add_body \\ufffd\\ufffd\\ufffd TRY   Guard SignedArithmetic \\ufffd\\ufffd\\ufffd-2147483648 \\ufffd\\ufffd\\ufffd sint \\ufffd\\ufffda + sint \\ufffd\\ufffdb \\ufffd\\ufffd\\ufffd sint \\ufffd\\ufffda + sint \\ufffd\\ufffdb \\ufffd\\ufffd\\ufffd 2147483647\\ufffd\\ufffd\\ufffd    (creturn global_exn_var_&#39;_update ret__int_&#39;_update (\\ufffd\\ufffds. a_&#39; s + b_&#39; s));;   Guard DontReach {} SKIP CATCH SKIP END&lt;/pre&gt;  &lt;p&gt;And here&#39;s what AutoCorres makes of it:&lt;/p&gt;  &lt;pre&gt;add&#39; ?a ?b \\ufffd\\ufffd\\ufffd   DO oguard (\\ufffd\\ufffds. INT_MIN \\ufffd\\ufffd\\ufffd ?a + ?b);      oguard (\\ufffd\\ufffds. ?a + ?b \\ufffd\\ufffd\\ufffd INT_MAX);      oreturn (?a + ?b)   OD&lt;/pre&gt;  &lt;p&gt;That&#39;s very impressive! That&#39;s using a Maybe monad (using the Haskell name) in Isabelle to handle the possible overflow. Obviously that&#39;s a lot easier to deal with than the raw Simpl. Here&#39;s the field addition function that I was using for the other examples in the previous post:&lt;/p&gt;  &lt;pre&gt;void add(int *out, const int *x, const int *y) {   unsigned int i;   unsigned int size = 10;   for (i = 0; i &amp;lt; size; i++) {     out[i] = x[i] + y[i];   } }&lt;/pre&gt;  &lt;p&gt;And here it is after AutoCorres:&lt;/p&gt;  &lt;pre&gt;add&#39; ?out ?x ?y \\ufffd\\ufffd\\ufffd do i \\ufffd\\ufffd\\ufffd whileLoop (\\ufffd\\ufffdi s. i &amp;lt; 0xA)           (\\ufffd\\ufffdi. do guard (\\ufffd\\ufffds. is_valid_w32 s (ptr_coerce (?out +\\ufffd\\ufffd\\ufffdp uint i)));                   guard (\\ufffd\\ufffds. is_valid_w32 s (ptr_coerce (?x +\\ufffd\\ufffd\\ufffdp uint i)));                   guard (\\ufffd\\ufffds. is_valid_w32 s (ptr_coerce (?y +\\ufffd\\ufffd\\ufffdp uint i)));                   guard (\\ufffd\\ufffds. INT_MIN \\ufffd\\ufffd\\ufffd sint (ucast s[ptr_coerce (?x +\\ufffd\\ufffd\\ufffdp uint i)]) + sint (ucast s[ptr_coerce (?y +\\ufffd\\ufffd\\ufffdp uint i)]));                   guard (\\ufffd\\ufffds. sint (ucast s[ptr_coerce (?x +\\ufffd\\ufffd\\ufffdp uint i)]) + sint (ucast s[ptr_coerce (?y +\\ufffd\\ufffd\\ufffdp uint i)]) \\ufffd\\ufffd\\ufffd INT_MAX);                   modify (\\ufffd\\ufffds. s[ptr_coerce (?out +\\ufffd\\ufffd\\ufffdp uint i) := s[ptr_coerce (?x +\\ufffd\\ufffd\\ufffdp uint i)] + s[ptr_coerce (?y +\\ufffd\\ufffd\\ufffdp uint i)]]);                   return (i + 1)                od)          0;    skip od&lt;/pre&gt;  &lt;p&gt;While the AutoCorres output looks very clean, there isn&#39;t any documentation at the moment which means that it&#39;s a little hard to actually use. (There are a couple of papers on the &lt;a href=&quot;http://ssrg.nicta.com/projects/TS/autocorres/&quot;&gt;home page&lt;/a&gt; that are well worth reading - but I didn&#39;t find anything like a user guide.) There are some examples from which it&#39;s possible to make some guesses, but I wasn&#39;t able to get very far in a proof. Also, since AutoCorres builds on Simpl and C parser, it has the same limitations - most notably that the address of local variables can&#39;t be taken.&lt;/p&gt;  &lt;p&gt;None the less, AutoCorres holds a lot of promise.&lt;/p&gt;  &lt;p&gt;Next, is &lt;a href=&quot;http://vst.cs.princeton.edu/&quot;&gt;VST&lt;/a&gt; from Andrew Appel and others (yes, &lt;i&gt;&lt;a href=&quot;http://www.amazon.com/Andrew-W.-Appel/e/B000AP5X0W&quot;&gt;that&lt;/a&gt;&lt;/i&gt; Appel). VST is a framework for proving the behaviour of C code with &lt;a href=&quot;http://coq.inria.fr/&quot;&gt;Coq&lt;/a&gt; by using one of the intermediate languages from &lt;a href=&quot;http://compcert.inria.fr/&quot;&gt;CompCert&lt;/a&gt;. Coq (which I&#39;m pronouncing as &amp;ldquo;coke&amp;rdquo;) is a proof system like Isabelle and CompCert is a formally verified compiler. That means that it&#39;s possible to have a chain of formal verification from C code all the way to the semantics of the machine language! Additionally, the C parser isn&#39;t correctness critical because VST proves properties using the same parse tree as the verified compiler. That&#39;s an extremely strong verification standard.&lt;/p&gt;  &lt;p&gt;CompCert is a &lt;a href=&quot;http://compcert.inria.fr/doc/LICENSE&quot;&gt;mixture&lt;/a&gt; of GPL and &amp;ldquo;non-commercial&amp;rdquo;  licensed code. It &lt;i&gt;appears&lt;/i&gt; that everything needed for VST is licensed as GPL or another free license. So, one can also use VST to verify C code and then use a different compiler to build it if the non-commercial restriction is a problem. That moves the CompCert C parser and the other compiler into the trusted set, but so it goes.&lt;/p&gt;  &lt;p&gt;The VST logic also appears to be very capable. It doesn&#39;t have a problem with pointers to local variables and should even have the capability to support reasoning about concurrent programs. The restrictions that it does have are local changes: only one memory load per line (at the moment) or side effect per statement and void functions need an explicit return at the end. (Unfortunately, one doesn&#39;t get an error from violating these requirements - rather the proof cannot be completed.)&lt;/p&gt;  &lt;p&gt;VST thankfully, &lt;a href=&quot;http://vst.cs.princeton.edu/download/VerifiableC.pdf&quot;&gt;has brief documentation online&lt;/a&gt; which is expanded upon in the form of &lt;a href=&quot;http://www.cambridge.org/us/academic/subjects/computer-science/programming-languages-and-applied-logic/program-logics-certified-compilers&quot;&gt;a book&lt;/a&gt; ($15 as a &lt;a href=&quot;http://www.ebooks.com/1642304/program-logics-for-certified-compilers/appel-andrew-w-dockins-robert-hobor-aquinas-bering/&quot;&gt;DRMed download&lt;/a&gt;). The book contains a &lt;i&gt;very&lt;/i&gt; abstract articulation of the underlying logic which, to be honest, defeated me initially. I&#39;d recommend skipping chapters 2 through 21 on a first reading and coming back to them later. They are useful, but they&#39;re also a lot clearer after having played with the software for a while.&lt;/p&gt;  &lt;p&gt;Here&#39;s the same example function, translated into VST style. I switched back from having a special output array because that was something that I changed to make the SPARK verification easier but it was never part of the original code and VST doesn&#39;t have problem with overlapping the input and output. I&#39;ve also switched from a &lt;tt&gt;for&lt;/tt&gt; loop to a &lt;tt&gt;while&lt;/tt&gt; loop because the documentation and examples for the latter are better. Otherwise, the changes are just to limit each statement to a single memory access and to include the final return.&lt;/p&gt;  &lt;pre&gt;void add(int *a, int *b) {  int t1, t2;  int i = 0;  while (i &amp;lt; 10) {   t1 = a[i];   t2 = b[i];   a[i] = t1 + t2;   i++;  }  return; }&lt;/pre&gt;  &lt;p&gt;We can use &lt;tt&gt;clightgen&lt;/tt&gt; from CompCert to parse that into the intermediate language that CompCert and VST use. (A word to the wise - if you want to install VST, use &lt;i&gt;exactly&lt;/i&gt; Coq 8.4p2, not the latest version which is 8.4p4.) Then we can use Coq to prove its behaviour.&lt;/p&gt;  &lt;p&gt;Compared to Isabelle, Coq&#39;s proofs aren&#39;t as clear as the Isar style proofs in Isabelle (although the terseness is more useful when proofs are this complex) and neither Proof General nor CoqIDE are as nice as Isabelle&#39;s jedit mode. But it&#39;s not otherwise dramatically different.&lt;/p&gt;  &lt;p&gt;Here&#39;s a specification of &lt;tt&gt;add&lt;/tt&gt; in VST/Coq&#39;s language:&lt;/p&gt;  &lt;pre&gt;Definition bound_int (v : val) (b : Z) :=   match v with   | Vint i =&amp;gt; -b &amp;lt; (Int.signed i) &amp;lt; b   | _ =&amp;gt; False   end.  Definition partial_add (i: Z) (l: Z -&amp;gt; val) (r: Z -&amp;gt; val) (j: Z) :=   if zlt j i then Val.add (l j) (r j) else (l j).  Definition add_spec :=   DECLARE _add   WITH a0 : val, b0 : val, sh : share, orig_a : Z -&amp;gt; val, orig_b : Z -&amp;gt; val   PRE [_a OF (tptr tint), _b OF (tptr tint)]     PROP (writable_share sh;           forall i, 0 &amp;lt;= i &amp;lt; 10 -&amp;gt; is_int (orig_a i);           forall i, 0 &amp;lt;= i &amp;lt; 10 -&amp;gt; is_int (orig_b i);           forall i, 0 &amp;lt;= i &amp;lt; 10 -&amp;gt; bound_int (orig_a i) 134217728;           forall i, 0 &amp;lt;= i &amp;lt; 10 -&amp;gt; bound_int (orig_b i) 134217728)     LOCAL (`(eq a0) (eval_id _a);            `(eq b0) (eval_id _b);            `isptr (eval_id _a);            `isptr (eval_id _b))     SEP (`(array_at tint sh orig_a 0 10 a0);          `(array_at tint sh orig_b 0 10 b0))   POST [ tvoid ]     PROP ()     LOCAL ()     SEP (`(array_at tint sh (partial_add 10 orig_a orig_b) 0 10 a0);          `(array_at tint sh orig_b 0 10 b0)).&lt;/pre&gt;  &lt;p&gt;The &lt;tt&gt;partial_add&lt;/tt&gt; function implements a map that reflects the state of the &lt;tt&gt;a&lt;/tt&gt; array at step &lt;tt&gt;i&lt;/tt&gt; of the loop. I&#39;ve written it like that so that it can also be used in the loop invariant.&lt;/p&gt;  &lt;p&gt;And here&#39;s the proof: It is quite long, but at least half of that is because I&#39;ve not used Coq before and I don&#39;t know what I&#39;m doing. I wouldn&#39;t call it readable however.&lt;/p&gt;  &lt;pre style=&quot;font-size: 0.8em;&quot;&gt;Definition inv orig_a a0 orig_b b0 sh :=   EX i:Z,     (PROP (0 &amp;lt;= i &amp;lt; 11;            isptr a0;            isptr b0)      LOCAL (`(eq a0) (eval_id _a);             `(eq b0) (eval_id _b);             `(eq (Vint (Int.repr i))) (eval_id _i))    SEP (`(array_at tint sh (partial_add i orig_a orig_b) 0 10 a0);         `(array_at tint sh orig_b 0 10 b0))).  Lemma mod_nop : forall (i : Z) (m : Z), 0 &amp;lt;= i &amp;lt; m -&amp;gt; m &amp;gt; 0 -&amp;gt; i mod m = i. Proof. intros. rewrite Zdiv.Zmod_eq. assert(i/m=0). apply Zdiv_small. exact H. rewrite H1. omega. exact H0. Qed.  Lemma body_sumarray: semax_body Vprog Gprog f_add add_spec. Proof. start_function. forward. forward_while   (inv orig_a a0 orig_b b0 sh)   (      PROP ()      LOCAL ()      SEP (`(array_at tint sh (partial_add 10 orig_a orig_b) 0 10 a0);           `(array_at tint sh orig_b 0 10 b0))). apply exp_right with 0. entailer!. quick_typecheck. entailer. cancel. assert(i=10). omega. rewrite H7. cancel. forward. entailer!. unfold partial_add. assert(is_int (orig_a i)). auto. assert(is_int (orig_b i)). auto. if_tac. omega. exact H7. forward. entailer!. forward. entailer. apply prop_right. assert(Vint (Int.add _id1 _id) = partial_add (i+1) orig_a orig_b (Int.signed (Int.repr i))). Focus 2. symmetry in H9. apply H9. unfold partial_add. assert(Int.signed (Int.repr i) = i). rewrite Int.signed_repr. reflexivity. unfold Int.max_signed, Int.min_signed. simpl. omega. rewrite H9. if_tac. unfold Val.add. rewrite Int.signed_repr_eq in H7. rewrite mod_nop in H7. if_tac in H7. unfold partial_add in H7. if_tac in H7. omega. rewrite Int.signed_repr_eq in H6. rewrite mod_nop in H6. if_tac in H6. unfold Int.add, Int.unsigned, Int.intval, Int.repr. assert(bound_int (orig_a i) 134217728). auto. unfold bound_int in H12. symmetry in H7, H6. rewrite H7. rewrite H6. reflexivity. omega. assert(Int.modulus = 4294967296). auto. rewrite H13. omega. assert(Int.modulus = 4294967296). auto. omega. assert(i &amp;lt; Int.half_modulus). assert(Int.half_modulus = 2147483648). auto. rewrite H12. rewrite H12 in H11. omega. omega. assert(Int.modulus = 4294967296). auto. omega. assert(Int.modulus = 4294967296). auto. rewrite H11. omega. omega. forward. unfold inv. apply exp_right with (Zsucc i). entailer!. apply derives_refl&#39;. apply equal_f. apply array_at_ext. intros. unfold upd. if_tac. rewrite H10. unfold Z.succ. reflexivity. unfold partial_add. if_tac. if_tac. reflexivity. omega. if_tac. omega. reflexivity. forward. Qed.&lt;/pre&gt;  &lt;p&gt;That&#39;s certainly quite a chunk! Practically you have to step through the proof in Proof General and see the state evolve to understand anything. Additionally, when in the proof, it would be very useful if subgoals has some sort of description like &amp;ldquo;show the loop invariant plus not the loop condition results in the loop post-condition&amp;rdquo; - it&#39;s very easy to get lost in the proof. But I do feel that, while it would be a lot of work, I could make progress with VST, while I don&#39;t (at the moment) feel with other systems. Prof. Appel recently did a &lt;a href=&quot;http://www.cs.princeton.edu/~appel/papers/verif-sha.pdf&quot;&gt;formal verification of the SHA256 from OpenSSL&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;However, there is no community around VST that I can find - no mailing list, wiki, etc. The Subversion repo is only accessible via HTTP - you can&#39;t clone it from what I can tell. I think I found a (completeness) bug in VST, but the only option would be to try emailing Prof. Appel. (I didn&#39;t; I&#39;m probably wrong.)&lt;/p&gt;  &lt;p&gt;Still, AutoCorres and especially VST leave me more optimistic than I was at the end of the last post!&lt;/p&gt;  &lt;h4&gt;Others&lt;/h4&gt;  &lt;p&gt;I didn&#39;t have time to look at everything that deserved attention. &lt;a href=&quot;https://galois.com/project/cryptol/&quot;&gt;Cryptol&lt;/a&gt; is one. Cryptol is a tool written in Haskell designed for the specification and implementation of cryptographic code and can call out to SMT solvers to show certain properties. From its internal language it can export implementations to (at least) C.&lt;/p&gt;  &lt;p&gt;Next, Frama-C, which I mentioned last time in relation to the Jessie plugin, has other plugins. One that&#39;s useful is the &lt;a href=&quot;http://frama-c.com/value.html&quot;&gt;value analysis&lt;/a&gt;, which can be properly used to eliminate NULL derefs, array overruns etc. In fact, Polar SSL has been &lt;a href=&quot;http://trust-in-soft.com/no-more-heartbleed/&quot;&gt;fully validated&lt;/a&gt; in certain configurations using that. That&#39;s certainly very valuable, and you can do it without that multi-page Coq proof! Although such analysis wouldn&#39;t have caught the carry bug in Ed25519 nor the reduction bug in Donna, not all code is going to be suitable for formal analysis.&lt;/p&gt;  &lt;p&gt;Microsoft also have lots of things. There&#39;s &lt;a href=&quot;http://research.microsoft.com/en-us/projects/dafny/&quot;&gt;Dafny&lt;/a&gt;, &lt;a href=&quot;http://research.microsoft.com/en-us/projects/vcc/&quot;&gt;VCC&lt;/a&gt; (Verifier for Concurrent C), &lt;a href=&quot;http://research.microsoft.com/en-us/projects/boogie/&quot;&gt;Boogie&lt;/a&gt;, &lt;a href=&quot;http://research.microsoft.com/en-us/projects/havoc/default.aspx&quot;&gt;Havoc&lt;/a&gt;, &lt;a href=&quot;http://z3.codeplex.com/&quot;&gt;Z3&lt;/a&gt; and others! I didn&#39;t look at them because I don&#39;t have a Windows box to hand this week (although I see that some are exposed via a &lt;a href=&quot;rise4fun.com/dafny&quot;&gt;web interface&lt;/a&gt; too). I was thinking that maybe I&#39;d have time when a Windows box was to hand but, realistically, probably not. So I&#39;ve updated this post to mention them here. If you are Windows based, you will probably do well to pay attention to them first.&lt;/p&gt; </content>  </entry>    <entry>    <title>A shallow survey of formal methods for C code</title>    <link href=\"http://www.imperialviolet.org/2014/09/07/provers.html\"/>    <updated>2014-09-07T00:00:00-04:00</updated>    <id>http://www.imperialviolet.org/2014/09/07/provers</id>    <content type=\"html\">&lt;p&gt;Two interesting things in formally verified software happened recently. The big one was the &lt;a href=&quot;https://sel4.systems/&quot;&gt;release of SeL4&lt;/a&gt; - a formally verified L4 microkernel. The second was much smaller, but closer to my usual scope: a &lt;a href=&quot;http://cryptojedi.org/papers/verify25519-20140428.pdf&quot;&gt;paper&lt;/a&gt; which showed the correctness of sections of a couple of the assembly implementations of Curve25519.&lt;/p&gt;  &lt;p&gt;Overflow and carry bugs are subtle and, although with 32-bit words you might hope to be able to do enough random testing to eliminate them, that&#39;s much less plausible with 64-bit implementations. The &lt;a href=&quot;http://tweetnacl.cr.yp.to/tweetnacl-20131229.pdf&quot;&gt;TweetNaCl&lt;/a&gt; paper mentions a bug that lived in one of the assembly implementations of ed25519 for years and I&#39;ve sinned too:&lt;/p&gt;  &lt;p&gt;When I wrote curve25519-donna (back when it was the only 64-bit implementation of Curve25519), I first wrote a 32-bit version which mirrored the implementation of the &lt;tt&gt;athlon&lt;/tt&gt; assembly version. This was just to provide a reference for the 64-bit code, but it was included in the repository for education. It was never really supposed to be used, and wasn&#39;t constant-time, but I was aware that it was being used by some groups.&lt;/p&gt;  &lt;p&gt;Many years later, someone noticed that it was missing a reduction in the final contraction. Values between 2&lt;sup&gt;255&lt;/sup&gt;-19 and 2&lt;sup&gt;255&lt;/sup&gt; would be output when they should have been reduced. This turned out to be harmless (as best I can tell), but embarrassing none the less.&lt;/p&gt;  &lt;p&gt;And Curve25519 is a very nice curve to implement! Take a look at the overflow considerations for &lt;a href=&quot;http://hg.mozilla.org/mozilla-central/file/2255d7d187b2/security/nss/lib/freebl/ecl/ecp_256_32.c#l280&quot;&gt;this version of P-256&lt;/a&gt;. I hope that I got everything right there, but it&#39;s very complex. More formal verification of the software would be welcome!&lt;/p&gt;  &lt;p&gt;SeL4 has a &lt;a href=&quot;https://ssrg.nicta.com.au/publications/nictaabstracts/Klein_AEMSKH_14.abstract.pml&quot;&gt;multi-stage&lt;/a&gt; verification using refinement. Refinement is the process of showing that two pieces of code behave identically where one version is more abstract. SeL4&#39;s proof refines from an abstract specification to a Haskell implementation to the C implementation. It also has a SAT-solver based proof that the ARMv6 assembly matches the C implementation.&lt;/p&gt;  &lt;p&gt;The refinement proofs are done in &lt;a href=&quot;https://www.cl.cam.ac.uk/research/hvg/Isabelle/&quot;&gt;Isabelle/HOL&lt;/a&gt; which, along with &lt;a href=&quot;http://coq.inria.fr/&quot;&gt;Coq&lt;/a&gt;, are the major proof systems. (There are several other systems including &lt;a href=&quot;https://www.cl.cam.ac.uk/~jrh13/hol-light/&quot;&gt;HOL Light&lt;/a&gt;, &lt;a href=&quot;http://hol.sourceforge.net/&quot;&gt;HOL4&lt;/a&gt; and &lt;a href=&quot;http://mizar.uwb.edu.pl/&quot;&gt;Mizar&lt;/a&gt;.) Proof systems assist in the construction of automated proofs using simple rules of inference and axioms. Although not used for software verification, &lt;a href=&quot;http://us.metamath.org/&quot;&gt;Metamath&lt;/a&gt; is a good introduction to the idea. It clearly explains &lt;a href=&quot;http://us.metamath.org/mpegif/mmset.html#axioms&quot;&gt;its axioms&lt;/a&gt; (which Isabelle and Coq are very bad at) and gives an idea for the scale of formal proofs with an example of &lt;a href=&quot;http://us.metamath.org/mpegif/mmset.html#trivia&quot;&gt;2+2 = 4&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;The best introduction to Isabelle that I know of is the book &lt;a href=&quot;http://concrete-semantics.org/&quot;&gt;Concrete Semantics&lt;/a&gt;, although I do wish that it would start with Isar style proofs much sooner. If you&#39;re doing work in Isabelle I think you need page 57 printed and stuck to the wall and if you&#39;re going through that book and exercises I&#39;d recommend peeking at the Isar chapter sooner.&lt;/p&gt;  &lt;p&gt;But Isabelle&#39;s traditional workflow is to write in its functional language and export to OCaml or Haskell. That&#39;s no help if we&#39;re seeking to prove things about C code.&lt;/p&gt;  &lt;p&gt;Isabelle&#39;s theorems are objects in its underlying ML language and so you can write a program in ML that parses C and use the result in Isabelle. That&#39;s what SeL4 does. The underlying framework for expressing imperative languages in Isabelle is Schirmer&#39;s &lt;a href=&quot;http://www-wjp.cs.uni-saarland.de/leute/private_homepages/nschirmer/pub/schirmer_phd.pdf&quot;&gt;Simpl&lt;/a&gt; and this imposes some odd limitations on the C that can be processed. For one, all the local variables with the same name in a given .c file have to have the same type because the local state of all functions in a .c file is represented in a single struct. For the same reason, it&#39;s not possible to take the address of a local variable.&lt;/p&gt;  &lt;p&gt;But we can try parsing a very simple C file with SeL4&#39;s parser:&lt;/p&gt;  &lt;pre&gt;int add(int a, int b) {   return a+b; }&lt;/pre&gt;  &lt;p&gt;That fits SeL4&#39;s C subset (called StrictC - see &lt;tt&gt;l4v/tools/c-parser/doc&lt;/tt&gt; in the SeL4 source) and results in this Simpl construct (you&#39;ll need to read the &lt;a href=&quot;http://www-wjp.cs.uni-saarland.de/leute/private_homepages/nschirmer/pub/schirmer_phd.pdf&quot;&gt;Simpl paper&lt;/a&gt; to really understand it):&lt;/p&gt;  &lt;pre&gt;test_global_addresses.add_body \\ufffd\\ufffd\\ufffd TRY   Guard SignedArithmetic \\ufffd\\ufffd\\ufffd-2147483648 \\ufffd\\ufffd\\ufffd sint \\ufffd\\ufffda + sint \\ufffd\\ufffdb \\ufffd\\ufffd\\ufffd sint \\ufffd\\ufffda + sint \\ufffd\\ufffdb \\ufffd\\ufffd\\ufffd 2147483647\\ufffd\\ufffd\\ufffd    (creturn global_exn_var_&#39;_update ret__int_&#39;_update (\\ufffd\\ufffds. a_&#39; s + b_&#39; s));;   Guard DontReach {} SKIP CATCH SKIP END&lt;/pre&gt;  &lt;p&gt;There&#39;s clearly an overflow check in there, which is good, but to call the process of starting to prove things about it intimidating to the beginner would be an understatement. That and the oddities of the C subset motivated me to look further.&lt;/p&gt;  &lt;p&gt;Dependent types are closely related to this problem so I &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependent_type#Comparison_of_languages_with_dependent_types&quot;&gt;checked Wikipedia&lt;/a&gt; for the dependently typed languages which support imperative programming and that are still active. That&#39;s just ATS and F*, according to that table. ATS &lt;a href=&quot;http://sourceforge.net/p/ats-lang/mailman/message/25031568/&quot;&gt;doesn&#39;t deal with overflows&lt;/a&gt; and, while &lt;a href=&quot;https://research.microsoft.com/en-us/projects/fstar/&quot;&gt;F*&lt;/a&gt;/&lt;a href=&quot;https://research.microsoft.com/en-us/projects/f7/&quot;&gt;F7&lt;/a&gt; is worthy of a look because of &lt;a href=&quot;http://www.mitls.org/wsgi/home&quot;&gt;miTLS&lt;/a&gt;, it&#39;s a CLR language and so not applicable here.&lt;/p&gt;  &lt;p&gt;Next up, based on searches, is &lt;a href=&quot;http://spark-2014.org/&quot;&gt;SPARK&lt;/a&gt;. SPARK is a subset of Ada designed for verification. There&#39;s a &lt;a href=&quot;http://www.adacore.com/&quot;&gt;commercial company&lt;/a&gt; behind it, but versions are published under the GPL. It even comes with an &lt;a href=&quot;http://libre.adacore.com/tools/gps/&quot;&gt;IDE&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;SPARK uses an &lt;a href=&quot;https://en.wikipedia.org/wiki/Satisfiability_Modulo_Theories&quot;&gt;SMT solver&lt;/a&gt; to prove correctness, which is very different from a proof in Isabelle. While an Isabelle proof is, by construction, just an application of axioms and rules of inference, an SMT solver is essentially a magic box into which you feed a proposition and out of which (maybe) comes a true/false answer. Trusting in an SMT solver is much, much stronger than not doing so, but it is a step down from a formal proof system. SPARK uses a version of &lt;a href=&quot;http://why3.lri.fr/&quot;&gt;Why3&lt;/a&gt; to abstract over SMT solvers and we&#39;ll discuss Why3 more later.&lt;/p&gt;  &lt;p&gt;Anyway, here&#39;s the same, trivial function in Ada:&lt;/p&gt;  &lt;pre&gt;function Add(X, Y : in Integer_32) return Integer_32 is begin    return X + Y; end Add;&lt;/pre&gt;  &lt;p&gt;If we ask SPARK to process that then it generates verification conditions (VCs): one for each possible thing that could go wrong - overflow, array indexing etc. For that code it throws an error saying that &lt;tt&gt;X + Y&lt;/tt&gt; might overflow, which is promising! In order to eliminate that, one needs to prove the verification condition that says that the addition is safe by adding preconditions to the function (which then become VCs at each callsite):&lt;/p&gt;  &lt;pre&gt;function Add(X, Y : in Integer_32) return Integer_32 with   Pre =&amp;gt; X &lt; 2**30 and X &gt; -2*30 and Y &lt; 2**30 and Y &gt; -2**30;&lt;/pre&gt;  &lt;p&gt;With that precondition, the function is accepted. I should note that this is SPARK 2014; there are many older versions (SPARK has been going for a long time) and they kept preconditions and the like in comments. Lots of pages about SPARK still talk about the older versions and major projects in SPARK (like &lt;a href=&quot;http://ironsides.martincarlisle.com/&quot;&gt;Ironsides&lt;/a&gt; - a DNS server) still use the older versions.&lt;/p&gt;  &lt;p&gt;With that initial success, let&#39;s try something a tiny bit more involved. Curve25519 deals with 255-bit integers but CPUs don&#39;t. So, in the same way that a 64-int integer could be represented with a pair of 32-bit integers, 255-bit integers are represented in Donna with ten, 32-bit integers. This representation is a little odd because the values aren&#39;t spaced at 32-bit multiples, but rather at alternating 26 and 25 bit positions. That also means that the representation is non-unique (setting bit 26 of the first word is equal to setting bit zero of the second) and that&#39;s done for performance. See &lt;a href=&quot;https://www.imperialviolet.org/2010/12/04/ecc.html&quot;&gt;this&lt;/a&gt; for more details, but it&#39;s not important right now.&lt;/p&gt;  &lt;p&gt;Adding these 255-bit integers is done simply by adding the underlying words without carry, with suitable bounds on the inputs so that overflow doesn&#39;t happen:&lt;/p&gt;  &lt;pre&gt;type Ints is array (Integer range 0 .. 9) of Integer_32;  function Add (X, Y : in Ints) return Ints with    Pre =&amp;gt; (for all i in Ints&#39;Range =&amp;gt; X(i) &amp;lt; 2**30 and X(i) &amp;gt; -2**30 and Y(i) &amp;lt; 2**30 and Y(i) &amp;gt; -2**30),    Post =&amp;gt; (for all i in Ints&#39;Range =&amp;gt; Add&#39;Result(i) = X(i) + Y(i));  function Add (X, Y : in Ints) return Ints is    Sum : Ints; begin    for i in Ints&#39;Range loop       Sum(i) := X(i) + Y(i);    end loop;     return Sum; end Add;&lt;/pre&gt;  &lt;p&gt;That mostly works, but SPARK can&#39;t prove that the result is &lt;tt&gt;X(i) + Y(i)&lt;/tt&gt; for all &lt;tt&gt;i&lt;/tt&gt; despite it being exactly what the function says. One really needs to spoon feed the prover: in this case with a loop invariant in the &lt;tt&gt;for&lt;/tt&gt; loop:&lt;/p&gt;  &lt;pre&gt;for i in Ints&#39;Range loop    pragma Loop_Invariant (for all j in Ints&#39;First .. i-1 =&amp;gt; Sum(j) = X(j) + Y(j));    Sum(i) := X(i) + Y(i); end loop;&lt;/pre&gt;  &lt;p&gt;Sadly, that doesn&#39;t work either, despite being correct, because SPARK doesn&#39;t seem to like &lt;tt&gt;i-1&lt;/tt&gt; when &lt;tt&gt;i&lt;/tt&gt; might be zero. So, trying again:&lt;/p&gt;  &lt;pre&gt;for i in Ints&#39;Range loop    Sum(i) := X(i) + Y(i);    pragma Loop_Invariant (for all j in Ints&#39;First .. i =&amp;gt; Sum(j) = X(j) + Y(j)); end loop;&lt;/pre&gt;  &lt;p&gt;That one works, but now SPARK isn&#39;t sure whether uninitialised elements of &lt;tt&gt;Sum&lt;/tt&gt; are being referenced. The property of being initialised isn&#39;t part of SPARK&#39;s logic and seems that the only way to proceed here is to disable that warning!&lt;/p&gt;  &lt;p&gt;But, there&#39;s some promise! We would now like to show a higher level property of &lt;tt&gt;Add&lt;/tt&gt;: that the 255-bit integer that the returned array represents is the sum of the integers that the input arrays represent. This means that the logic needs to deal with arbitrary integers and that we need to write a function in the logic that turns an array into an abstract integer.&lt;/p&gt;  &lt;p&gt;Enabling arbitrary integers in the logic is possible (although good luck finding how to do it in the documentation: the answer is to put a file called &lt;tt&gt;gnat.adc&lt;/tt&gt; in the &lt;tt&gt;gnatprove&lt;/tt&gt; subdirectory of the project containing &lt;tt&gt;pragma Overflow_Mode (General =&amp;gt; Strict, Assertions =&amp;gt; Eliminated);&lt;/tt&gt;). However, I failed at writing functions in the logic without dropping down into code and triggering overflow checks. It appears that ghost functions should be able to do this but, after getting the answer to a documentation bug &lt;a href=&quot;https://stackoverflow.com/questions/25628980/compilation-of-ghost-functions-in-spark-2014&quot;&gt;on StackOverflow&lt;/a&gt;, actually trying to use any logic functions, even the identity function, caused the proof not to terminate. SPARK claims to be able to use Isabelle for proofs but I couldn&#39;t get that to work at all: strace says that the &lt;tt&gt;.thy&lt;/tt&gt; file isn&#39;t ever written.&lt;/p&gt;  &lt;p&gt;Stuck, I moved on from SPARK and tried &lt;a href=&quot;http://frama-c.com/index.html&quot;&gt;Frama-C&lt;/a&gt; and its &lt;a href=&quot;http://frama-c.com/jessie.html&quot;&gt;Jessie&lt;/a&gt; plugin. Even if SPARK was working for me, using C (even a subset) has advantages: it&#39;s convenient to use in other projects, there exist &lt;a href=&quot;http://compcert.inria.fr/&quot;&gt;verified compilers&lt;/a&gt; for it and there&#39;s an extension to CompCert that allows for static verification of constant-time behaviour (although I&#39;ve lost the paper!)&lt;/p&gt;  &lt;p&gt;So here&#39;s the same function in Frama-C:&lt;/p&gt;  &lt;pre&gt;/*@ requires \\\\valid_range(out, 0, 9);   @ requires \\\\valid_range(x, 0, 9);   @ requires \\\\valid_range(y, 0, 9);   @ requires \\\\forall integer i; 0 &amp;lt;= i &amp;lt; 10 ==&amp;gt;       (x[i] &amp;gt; -1000 &amp;amp;&amp;amp; x[i] &amp;lt; 1000);   @ requires \\\\forall integer i; 0 &amp;lt;= i &amp;lt; 10 ==&amp;gt;       (y[i] &amp;gt; -1000 &amp;amp;&amp;amp; y[i] &amp;lt; 1000);   @ ensures \\\\forall integer i; 0 &amp;lt;= i &amp;lt; 10 ==&amp;gt; (out[i] == x[i] + y[i]); */ void add(int *out, const int *x, const int *y) {   /*@ loop invariant i &amp;gt;= 0 &amp;amp;&amp;amp; i &amp;lt;= 10 &amp;amp;&amp;amp;         (\\\\forall integer j; 0 &amp;lt;= j &amp;lt; i ==&amp;gt; out[j] == x[j] + y[j]);     @ loop variant 10-i;     */   for (int i = 0; i &amp;lt; 10; i++) {     out[i] = x[i] + y[i];   } }&lt;/pre&gt;  &lt;p&gt;Note that this time we not only need a loop invariant to show the postcondition, but we also need a loop variant to show that the &lt;tt&gt;for&lt;/tt&gt; loop terminates: you &lt;i&gt;really&lt;/i&gt; need to spoon feed the verification! But Frama-C/&lt;a href=&quot;http://krakatoa.lri.fr/&quot;&gt;Jessie&lt;/a&gt; has no problem with functions in the logic:&lt;/p&gt;  &lt;pre&gt;/*@ logic integer felemvalue (int *x) =       x[0] + x[1] * (1 &amp;lt;&amp;lt; 26) + x[2] * (1 &amp;lt;&amp;lt; 51) + x[3] * (1 &amp;lt;&amp;lt; 77) +       x[4] * (1 &amp;lt;&amp;lt; 102) + x[5] * 340282366920938463463374607431768211456 +       x[6] * 11417981541647679048466287755595961091061972992 +       x[7] * 766247770432944429179173513575154591809369561091801088 +       x[8] * 25711008708143844408671393477458601640355247900524685364822016 +       x[9] * 1725436586697640946858688965569256363112777243042596638790631055949824; */&lt;/pre&gt;  &lt;p&gt;That function maps from an array to the abstract integer that it represents. Note that the terms switched from using shifts to represent the constants to literal numbers. That&#39;s because the proof process suddenly became non-terminating (in a reasonable time) once the values reached about 104-bits, but the literals still worked.&lt;/p&gt;  &lt;p&gt;With that logic function in hand, the we can easily prove the higher-level concept that we wanted as a post condition of the &lt;tt&gt;add&lt;/tt&gt; function:&lt;/p&gt;  &lt;pre&gt;@ ensures felemvalue(out) == felemvalue(x) + felemvalue(y);&lt;/pre&gt;  &lt;p&gt;Flushed with success, I moved onto the next most basic function: multiplication of 255-bit integers. The code that Donna uses is the textbook, polynomial multiplication code. Here&#39;s how the function starts:&lt;/p&gt;  &lt;pre&gt;/* Multiply two numbers: output = in2 * in  *  * output must be distinct to both inputs. The inputs are reduced coefficient  * form, the output is not.  *  * output[x] &amp;lt;= 14 * the largest product of the input limbs. */ static void fproduct(limb *output, const limb *in2, const limb *in) {   output[0] =       ((limb) ((s32) in2[0])) * ((s32) in[0]);   output[1] =       ((limb) ((s32) in2[0])) * ((s32) in[1]) +                     ((limb) ((s32) in2[1])) * ((s32) in[0]);   output[2] =  2 *  ((limb) ((s32) in2[1])) * ((s32) in[1]) +                     ((limb) ((s32) in2[0])) * ((s32) in[2]) +                     ((limb) ((s32) in2[2])) * ((s32) in[0]);   &amp;hellip;&lt;/pre&gt;  &lt;p&gt;Each of the lines is casting a 64-bit number down to 32 bits and then doing a 32&amp;times;32&amp;rArr;64 multiplication. (The casts down to 32 bits are just to tell the compiler not to waste time on a 64&amp;times;64&amp;rArr;64 multiplication.) In Frama-C/Jessie we need to show that the casts are safe, multiplications don&#39;t overflow and nor do the sums and multiplications by two etc. This &lt;i&gt;should&lt;/i&gt; be easy. Here are the preconditions that set the bounds on the input.&lt;/p&gt;  &lt;pre&gt;/*@ requires \\\\valid_range(output, 0, 18);   @ requires \\\\valid_range(in, 0, 9);   @ requires \\\\valid_range(in2, 0, 9);   @ requires \\\\forall integer i; 0 &amp;lt;= i &amp;lt; 10 ==&amp;gt; -134217728 &amp;lt; in[i] &amp;lt; 134217728;   @ requires \\\\forall integer i; 0 &amp;lt;= i &amp;lt; 10 ==&amp;gt; -134217728 &amp;lt; in2[i] &amp;lt; 134217728; */&lt;/pre&gt;  &lt;p&gt;However, &lt;a href=&quot;http://why3.lri.fr/&quot;&gt;Why3&lt;/a&gt;, which is the prover backend that Jessie (and SPARK) uses, quickly gets bogged down. In an attempt to help it out, I moved the casts to the beginning of the function and put the results in arrays so that the code was less complex.&lt;/p&gt;  &lt;p&gt;As you can see &lt;a href=&quot;http://krakatoa.lri.fr/jessie.html#sec5&quot;&gt;in the Jessie documentation&lt;/a&gt;, the Why3 UI allows one to do transforms on the verification conditions to try and make life easier for the prover. Quickly, splitting a requirement becomes necessary. But this throws away a lot of information. In this case, each of the 32&amp;times;32&amp;rArr;64 multiplications is assumed to fit only within its bounds and so the intermediate bounds need to be reestablished every time. This means that the equations have to be split like this:&lt;/p&gt;  &lt;pre&gt;limb t, t2; t = ((limb) in2_32[0]) * in_32[1]; //@ assert -18014398509481984 &amp;lt; t &amp;lt; 18014398509481984; t2 = ((limb) in2_32[1]) * in_32[0]; //@ assert -18014398509481984 &amp;lt; t2 &amp;lt; 18014398509481984; output[1] = t + t2;&lt;/pre&gt;  &lt;p&gt;That&#39;s only a minor problem really, but the further one goes into the function, the harder the prover needs to work for some reason. It&#39;s unclear why because every multiplication has the same bounds - they are all instances of the same proof. But it&#39;s very clear that the later multiplications are causing more work.&lt;/p&gt;  &lt;p&gt;Why3 is an abstraction layer for &lt;a href=&quot;https://en.wikipedia.org/wiki/Satisfiability_Modulo_Theories&quot;&gt;SMT solvers&lt;/a&gt; and a large number are supported (see &amp;ldquo;External provers&amp;rdquo; on &lt;a href=&quot;http://why3.lri.fr/&quot;&gt;its homepage&lt;/a&gt; for a list). I tried quite a few and, for this task, Z3 is clearly the best with CVC4 coming in second. However, Z3 has a non-commercial license which is very worrying - does that mean that a verified version of Curve25519 that used Z3 has to also have a non-commercial license? So I stuck to using CVC4.  &lt;p&gt;However, about a quarter of the way into the function, both CVC4 and Z3 are stuck. Despite the bounds being a trivial problem, and just instances of the same problem that they can solve at the beginning of the function, somehow either Why3 is doing something bad or the SMT solvers are failing to discard irrelevant facts. I left it running overnight and Z3 solved one more instance after six hours but achieved nothing after 12 hours on the next one. Splitting and inlining the problem further in the Why3 GUI didn&#39;t help either.&lt;/p&gt;  &lt;p&gt;Like SPARK, Jessie can use Isabelle for proofs too (and for the same reason: they are both using Why3, which supports Isabelle as a backend). It even worked this time, once I added &lt;tt&gt;Real&lt;/tt&gt; to the Isabelle imports. However, in the same way that the C parser in Isabelle was an ML function that created Isabelle objects internally, the Why3 connection to Isabelle is a function (&lt;tt&gt;why3_open&lt;/tt&gt;) that parses an XML file. This means that the proof has large numbers of generated variable names (&lt;tt&gt;o33&lt;/tt&gt;, &lt;tt&gt;o34&lt;/tt&gt;, etc) and you have no idea which intermediate values they are. Additionally, the bounds problem is something that Isabelle could have solved automatically, but the assumptions that you can use are similarly autonamed as things like &lt;tt&gt;local.H165&lt;/tt&gt;. In short, the Isabelle integration appears to be unworkable.&lt;/p&gt;  &lt;p&gt;Perhaps I could split up each statement in the original code into a separate function and then write the statement again in the logic in order in order to show the higher level properties, but at some point you have to accept that you&#39;re not going to be able to dig this hole with a plastic spoon.&lt;/p&gt;  &lt;h4&gt;Conclusion&lt;/h4&gt;  &lt;p&gt;The conclusion is a bit disappointing really: Curve25519 has no side effects and performs no allocation, it&#39;s a pure function that should be highly amenable to verification and yet I&#39;ve been unable to find anything that can get even 20 lines into it. Some of this might be my own stupidity, but I put a fair amount of work into trying to find something that worked.&lt;/p&gt;  &lt;p&gt;There seems to be a lot of promise in the area and some pieces work well (SMT solvers are often quite impressive, the Frama-C framework appears to be solid, Isabelle is quite pleasant) but nothing I found worked well together, at least for verifying C code. That makes efforts like SeL4 and &lt;a href=&quot;http://ironsides.martincarlisle.com/&quot;&gt;Ironsides&lt;/a&gt; even more impressive. However, if you&#39;re happy to work at a higher level I&#39;m guessing that verifying functional programs is a lot easier going.&lt;/p&gt; </content>  </entry>    <entry>    <title>HSTS for new TLDs</title>    <link href=\"http://www.imperialviolet.org/2014/07/06/newtlds.html\"/>    <updated>2014-07-06T00:00:00-04:00</updated>    <id>http://www.imperialviolet.org/2014/07/06/newtlds</id>    <content type=\"html\">&lt;p&gt;Whatever you might think of them, the new TLDs are rapidly arriving. New TLDs approved so far &lt;a href=&quot;https://mm.icann.org/pipermail/gtldnotification/2014-July/thread.html&quot;&gt;this month&lt;/a&gt; include &lt;tt&gt;alsace&lt;/tt&gt;, &lt;tt&gt;sarl&lt;/tt&gt;, &lt;tt&gt;iinet&lt;/tt&gt;, &lt;tt&gt;poker&lt;/tt&gt;, &lt;tt&gt;gifts&lt;/tt&gt;, &lt;tt&gt;restaurant&lt;/tt&gt;, &lt;tt&gt;fashion&lt;/tt&gt;, &lt;tt&gt;tui&lt;/tt&gt; and &lt;tt&gt;allfinanz&lt;/tt&gt;. The full list for &lt;a href=&quot;https://mm.icann.org/pipermail/gtldnotification/2014-June/thread.html&quot;&gt;last month&lt;/a&gt; is over twice as long.&lt;/p&gt;  &lt;p&gt;That means that there&#39;s lots of people currently trying to figure out how to differentiate themselves from other TLDs. Here&#39;s an idea: why not ask me to &lt;a href=&quot;http://www.chromium.org/sts&quot;&gt;set HSTS&lt;/a&gt; for the entire TLD? That way, every single site runs over HTTPS, always. It strikes me that could be useful if you&#39;re trying to build trust with users unfamiliar with the zoo of new domains.&lt;/p&gt;  &lt;p&gt;(I can&#39;t speak for Firefox and Safari but I think it&#39;s safe to assume that Firefox would be on board with this. It&#39;s still unclear whether &lt;a href=&quot;http://status.modern.ie/httpstricttransportsecurityhsts&quot;&gt;IE&#39;s support for HSTS&lt;/a&gt; will include preloading.)&lt;/p&gt;  &lt;p&gt;I&#39;m guessing that, with such a large number of new TLDs, I should be able to reach at least some operators of them via this blog post.&lt;/p&gt; </content>  </entry>    <entry>    <title>Encrypting streams</title>    <link href=\"http://www.imperialviolet.org/2014/06/27/streamingencryption.html\"/>    <updated>2014-06-27T00:00:00-04:00</updated>    <id>http://www.imperialviolet.org/2014/06/27/streamingencryption</id>    <content type=\"html\">&lt;p&gt;When sending data over the network, chunking is pretty much a given. TLS has a maximum record size of 16KB and this fits neatly with authenticated encryption APIs which all operate on an entire message at once.&lt;/p&gt;  &lt;p&gt;But file encryption frequently gets this wrong. Take OpenPGP: it bulk encrypts the data and &lt;a href=&quot;https://tools.ietf.org/html/rfc4880#section-5.13&quot;&gt;sticks a single MAC on the end&lt;/a&gt;. Ideally everyone is decrypting to a temporary file and waiting until the decryption and verification is complete before touching the plaintext, but it takes a few seconds of searching to find people suggesting commands like this:&lt;/p&gt;  &lt;pre&gt;gpg -d your_archive.tgz.gpg | tar xz&lt;/pre&gt;  &lt;p&gt;With that construction, &lt;tt&gt;tar&lt;/tt&gt; receives unauthenticated input and will happily extract it to the filesystem. An attacker doesn&#39;t (we assume) know the secret key, but they can guess at the structure of the plaintext and flip bits in the ciphertext. Bit flips in the ciphertext will produce a corresponding bit flip in the plaintext, followed by randomising the next block. I bet some smart attacker can do useful things with that ability. Sure the &lt;tt&gt;gpg&lt;/tt&gt; command will exit with an error code, but do you think that the shell script writer carefully handled that case and undid the changes to the filesystem?&lt;/p&gt;  &lt;p&gt;The flaw here isn&#39;t in CFB mode&#39;s malleability, but in OpenPGP forcing the use of unauthenticated plaintext in practical situations. (Indeed, if you are ever thinking about the malleability of ciphertext, you have probably already lost.)&lt;/p&gt;  &lt;p&gt;I will even claim that the existance of an API that can operate in a streaming fashion over large records (i.e. will encrypt and defer the authenticator and will decrypt and return unauthenticated plaintext) is a mistake. Not only is it too easy to misunderstand and misuse (like the &lt;tt&gt;gpg&lt;/tt&gt; example above) but, even if correctly buffered in a particular implementation, the existance of large records may force other implementations to do dangerous things because of a lack of buffer space.&lt;/p&gt;  &lt;p&gt;If large messages are chunked at 16KB then the overhead of sixteen bytes of authenticator for every chunk is only 0.1%. Additionally, you can safely stream the decryption (as long as you can cope with truncation of the plaintext).&lt;/p&gt;  &lt;p&gt;Although safer in general, when chunking one has to worry that an attacker hasn&#39;t reordered chunks, hasn&#39;t dropped chunks from the start and hasn&#39;t dropped chunks from the end. But sadly there&#39;s not a standard construction for taking an AEAD and making a scheme suitable for encrypting large files (&lt;a href=&quot;https://tools.ietf.org/html/draft-mcgrew-aero-01&quot;&gt;AERO&lt;/a&gt; might be close, but it&#39;s not quite what I have in mind). Ideally such a scheme would take an AEAD and produce something very like an AEAD in that it takes a key, nonce and additional data, but can safely work in a streaming fashion. I don&#39;t think it need be very complex: take 64 bits of the nonce from the underlying AEAD as the chunk number, always start with chunk number zero and feed the additional data into chunk zero with a zero byte prefix. Prefix each chunk ciphertext with a 16 bit length and set the MSB to indicate the last chunk and authenticate that indication by setting the additional data to a single, 1 byte. The major worry might be that for many underlying AEADs, taking 64 bits of the nonce for the chunk counter leaves one with very little (or none!) left.&lt;/p&gt;  &lt;p&gt;That requires more thought before using it for real but, if you are ever building encryption-at-rest, please don&#39;t mess it up like we did 20 years ago. (Although, even with that better design, piping the output into &lt;tt&gt;tar&lt;/tt&gt; may still be unwise because an attacker can truncate the stream at a chunk boundary: perhaps eliminating important files in the process.)&lt;/p&gt;  &lt;p&gt;&lt;b&gt;Update&lt;/b&gt;: On Twitter, zooko points to &lt;a href=&quot;https://tahoe-lafs.org/~zooko/file-encoding.html&quot;&gt;Tahoe-LAFS&lt;/a&gt; as an example of getting it right. Additionally, taking the MAC of the current state of a digest operation and continuing the operation has been proposed for sponge functions (like SHA-3) under the name &lt;a href=&quot;https://eprint.iacr.org/2013/772&quot;&gt;MAC-and-continue&lt;/a&gt;. The exact provenance of this isn&#39;t clear, but I think it might have been from the Keccak team in &lt;a href=&quot;http://eprint.iacr.org/2013/772.pdf&quot;&gt;this paper&lt;/a&gt;. Although MAC-and-continue doesn&#39;t allow random access, which might be important for some situations.&lt;/p&gt; </content>  </entry>    <entry>    <title>BoringSSL</title>    <link href=\"http://www.imperialviolet.org/2014/06/20/boringssl.html\"/>    <updated>2014-06-20T00:00:00-04:00</updated>    <id>http://www.imperialviolet.org/2014/06/20/boringssl</id>    <content type=\"html\">&lt;p&gt;Earlier this year, before Apple had too many goto fails and GnuTLS &lt;a href=&quot;https://www.gitorious.org/gnutls/gnutls/commit/6aa26f78150ccbdf0aec1878a41c17c41d358a3b&quot;&gt;had too few&lt;/a&gt;, before everyone learnt that TLS heart-beat messages were a thing and that some bugs &lt;a href=&quot;http://ccsinjection.lepidum.co.jp/blog/2014-06-05/CCS-Injection-en/index.html&quot;&gt;are really old&lt;/a&gt;, I started a tidy up of the OpenSSL code that we use at Google.&lt;/p&gt;  &lt;p&gt;We have used a number of patches on top of OpenSSL for many years. Some of them have been accepted into the main OpenSSL repository, but many of them don\\ufffd\\ufffd\\ufffdt mesh with OpenSSL\\ufffd\\ufffd\\ufffds guarantee of API and ABI stability and many of them are a little too experimental.&lt;/p&gt;  &lt;p&gt;But as Android, Chrome and other products have started to need some subset of these patches, things have grown very complex. The effort involved in keeping all these patches (and there are more than 70 at the moment) straight across multiple code bases is getting to be too much.&lt;/p&gt;  &lt;p&gt;So we\\ufffd\\ufffd\\ufffdre switching models to one where we import changes from OpenSSL rather than rebasing on top of them. The &lt;a href=&quot;https://boringssl.googlesource.com/boringssl/&quot;&gt;result of that&lt;/a&gt; will start to appear in the Chromium repository soon and, over time, we hope to use it in Android and internally too.&lt;/p&gt;  &lt;p&gt;There are no guarantees of API or ABI stability with this code: we are not aiming to replace OpenSSL as an open-source project. We will still be sending them bug fixes when we find them and we will be importing changes from upstream. Also, we will still be funding the Core Infrastructure Initiative and the OpenBSD Foundation.&lt;/p&gt;  &lt;p&gt;But we\\ufffd\\ufffd\\ufffdll also be more able to import changes from LibreSSL and they are welcome to take changes from us. We have already relicensed some of our prior contributions to OpenSSL under an ISC license at their request and completely new code that we write will also be so licensed.&lt;/p&gt;  &lt;p&gt;(Note: the name is aspirational and not yet a promise.)&lt;/p&gt; </content>  </entry>    <entry>    <title>Early ChangeCipherSpec Attack</title>    <link href=\"http://www.imperialviolet.org/2014/06/05/earlyccs.html\"/>    <updated>2014-06-05T00:00:00-04:00</updated>    <id>http://www.imperialviolet.org/2014/06/05/earlyccs</id>    <content type=\"html\">&lt;p&gt;OpenSSL 1.0.1h (and others) were &lt;a href=&quot;http://www.openssl.org/news/secadv_20140605.txt&quot;&gt;released today&lt;/a&gt; with a scary looking security advisiory and that&#39;s always an event worth looking into. (Hopefully people are practiced at updating OpenSSL now!)&lt;/p&gt;  &lt;p&gt;&lt;b&gt;Update&lt;/b&gt;: the original reporter has a &lt;a href=&quot;http://ccsinjection.lepidum.co.jp/blog/2014-06-05/CCS-Injection-en/index.html&quot;&gt;blog post&lt;/a&gt; up. Also, I won&#39;t, personally, be answering questions about specific Google services. (I cut this blog post together from notes that I&#39;m writing for internal groups to evaluate and this is still very fresh.)&lt;/p&gt;  &lt;p&gt;&lt;b&gt;Update&lt;/b&gt;: my initial thoughts from looking at the diff still seem to be holding up. Someone is welcome to write a more detailed analysis than below. HP/ZDI have a &lt;a href=&quot;http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/ZDI-14-173-CVE-2014-0195-OpenSSL-DTLS-Fragment-Out-of-Bounds/ba-p/6501002#.U5Cjpnmx3UY&quot;&gt;write up&lt;/a&gt; of one of the DTLS issues.&lt;/p&gt;  &lt;p&gt;There are some critical bug fixes to DTLS (TLS over datagram transports, i.e. UDP), but most people will be more concerned about the MITM attack against TLS (CVE-2014-0224).&lt;/p&gt;  &lt;p&gt;The code changes are around the rejection of ChangeCipherSpec messages, which are messages sent during the TLS handshake that mark the change from unencrypted to encrypted traffic. These messages aren&#39;t part of the handshake protocol itself and aren&#39;t linked into the handshake state machine in OpenSSL. Rather there&#39;s a check in the code that they are only received when a new cipher is ready to be used. However, that check (for &lt;tt&gt;s-&amp;gt;s3-&amp;gt;tmp.new_cipher&lt;/tt&gt; in &lt;tt&gt;s3_pkt.c&lt;/tt&gt;) seems reasonable, but &lt;tt&gt;new_cipher&lt;/tt&gt; is actually set as soon as the cipher for the connection has been decided (i.e. once the ServerHello message has been sent/received), not when the cipher is actually ready! It looks like this is the problem that&#39;s getting fixed in this release.&lt;/p&gt;  &lt;p&gt;Here&#39;s the code in question that handles a ChangeCipherSpec message:&lt;/p&gt;   &lt;!-- pre { white-space: pre-wrap; font-family: monospace; color: #000000; background-color: #ffffff; } body { font-family: monospace; color: #000000; background-color: #ffffff; } * { font-size: 1em; } .Constant { color: #ff00ff; } .Statement { color: #a52a2a; font-weight: bold; } .Comment { color: #0000ff; } .Type { color: #2e8b57; font-weight: bold; } --&gt;  &lt;pre style=&quot;white-space: pre-wrap; font-family: monospace;&quot;&gt; &lt;span style=&quot;color: #2e8b57; font-weight: bold;&quot;&gt;int&lt;/span&gt; ssl3_do_change_cipher_spec(SSL *s)  {  &lt;span style=&quot;color: #2e8b57; font-weight: bold;&quot;&gt;int&lt;/span&gt; i;  &lt;span style=&quot;color: #2e8b57; font-weight: bold;&quot;&gt;const&lt;/span&gt; &lt;span style=&quot;color: #2e8b57; font-weight: bold;&quot;&gt;char&lt;/span&gt; *sender;  &lt;span style=&quot;color: #2e8b57; font-weight: bold;&quot;&gt;int&lt;/span&gt; slen;   &lt;span style=&quot;color: #a52a2a; font-weight: bold;&quot;&gt;if&lt;/span&gt; (s-&amp;gt;state &amp;amp; SSL_ST_ACCEPT)   i=SSL3_CHANGE_CIPHER_SERVER_READ;  &lt;span style=&quot;color: #a52a2a; font-weight: bold;&quot;&gt;else&lt;/span&gt;   i=SSL3_CHANGE_CIPHER_CLIENT_READ;   &lt;span style=&quot;color: #a52a2a; font-weight: bold;&quot;&gt;if&lt;/span&gt; (s-&amp;gt;s3-&amp;gt;tmp.key_block == &lt;span style=&quot;color: #ff00ff;&quot;&gt;NULL&lt;/span&gt;)&lt;span style=&quot;margin-left: 4em; background-color: red; color: white; border-radius: 20px; padding: 0.25em;&quot;&gt;1&lt;/span&gt;   {   &lt;span style=&quot;color: #a52a2a; font-weight: bold;&quot;&gt;if&lt;/span&gt; (s-&amp;gt;session == &lt;span style=&quot;color: #ff00ff;&quot;&gt;NULL&lt;/span&gt;)    {    &lt;span style=&quot;color: #55b;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #55b;&quot;&gt; might happen if dtls1_read_bytes() calls this &lt;/span&gt;&lt;span style=&quot;color: #55b;&quot;&gt;*/&lt;/span&gt;    SSLerr(SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC,SSL_R_CCS_RECEIVED_EARLY);    &lt;span style=&quot;color: #a52a2a; font-weight: bold;&quot;&gt;return&lt;/span&gt; (&lt;span style=&quot;color: #ff00ff;&quot;&gt;0&lt;/span&gt;);    }    s-&amp;gt;session-&amp;gt;cipher=s-&amp;gt;s3-&amp;gt;tmp.new_cipher;   &lt;span style=&quot;color: #a52a2a; font-weight: bold;&quot;&gt;if&lt;/span&gt; (!s-&amp;gt;method-&amp;gt;ssl3_enc-&amp;gt;setup_key_block(s)) &lt;span style=&quot;color: #a52a2a; font-weight: bold;&quot;&gt;return&lt;/span&gt;(&lt;span style=&quot;color: #ff00ff;&quot;&gt;0&lt;/span&gt;); &lt;span style=&quot;margin-left: 4em; background-color: red; color: white; border-radius: 20px; padding: 0.25em;&quot;&gt;2&lt;/span&gt;   }   &lt;span style=&quot;color: #a52a2a; font-weight: bold;&quot;&gt;if&lt;/span&gt; (!s-&amp;gt;method-&amp;gt;ssl3_enc-&amp;gt;change_cipher_state(s,i))   &lt;span style=&quot;color: #a52a2a; font-weight: bold;&quot;&gt;return&lt;/span&gt;(&lt;span style=&quot;color: #ff00ff;&quot;&gt;0&lt;/span&gt;);   &lt;span style=&quot;color: #55b;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #55b;&quot;&gt; we have to record the message digest at&lt;/span&gt; &lt;span style=&quot;color: #55b;&quot;&gt;  * this point so we can get it before we read&lt;/span&gt; &lt;span style=&quot;color: #55b;&quot;&gt;  * the finished message &lt;/span&gt;&lt;span style=&quot;color: #55b;&quot;&gt;*/&lt;/span&gt;  &lt;span style=&quot;color: #a52a2a; font-weight: bold;&quot;&gt;if&lt;/span&gt; (s-&amp;gt;state &amp;amp; SSL_ST_CONNECT)   {   sender=s-&amp;gt;method-&amp;gt;ssl3_enc-&amp;gt;server_finished_label;   slen=s-&amp;gt;method-&amp;gt;ssl3_enc-&amp;gt;server_finished_label_len;   }  &lt;span style=&quot;color: #a52a2a; font-weight: bold;&quot;&gt;else&lt;/span&gt;   {   sender=s-&amp;gt;method-&amp;gt;ssl3_enc-&amp;gt;client_finished_label;   slen=s-&amp;gt;method-&amp;gt;ssl3_enc-&amp;gt;client_finished_label_len;   }   i = s-&amp;gt;method-&amp;gt;ssl3_enc-&amp;gt;final_finish_mac(s,   sender,slen,s-&amp;gt;s3-&amp;gt;tmp.peer_finish_md); &lt;span style=&quot;margin-left: 4em; background-color: red; color: white; border-radius: 20px; padding: 0.25em;&quot;&gt;3&lt;/span&gt;  &lt;span style=&quot;color: #a52a2a; font-weight: bold;&quot;&gt;if&lt;/span&gt; (i == &lt;span style=&quot;color: #ff00ff;&quot;&gt;0&lt;/span&gt;)   {   SSLerr(SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC, ERR_R_INTERNAL_ERROR);   &lt;span style=&quot;color: #a52a2a; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #ff00ff;&quot;&gt;0&lt;/span&gt;;   }  s-&amp;gt;s3-&amp;gt;tmp.peer_finish_md_len = i;   &lt;span style=&quot;color: #a52a2a; font-weight: bold;&quot;&gt;return&lt;/span&gt;(&lt;span style=&quot;color: #ff00ff;&quot;&gt;1&lt;/span&gt;);  } &lt;/pre&gt;  &lt;p&gt;If a ChangeCipherSpec message is injected into the connection after the ServerHello, but before the master secret has been generated, then &lt;tt&gt;ssl3_do_change_cipher_spec&lt;/tt&gt; will generate the keys (2) and the expected Finished hash (3) for the handshake with an &lt;i&gt;empty&lt;/i&gt; master secret. This means that both are based only on public information. Additionally, the keys will be latched because of the check at (1) - further ChangeCipherSpec messages will regenerate the expected Finished hash, but not the keys.&lt;/p&gt;  &lt;p&gt;The oldest source code on the OpenSSL site is for 0.9.1c (Dec 28, 1998) and the affected code appears almost unchanged. So it looks like this bug has existed for 15+ years.&lt;/p&gt;  &lt;p&gt;The implications of this are pretty complex.&lt;/p&gt;  &lt;p&gt;For a client there&#39;s an additional check in the code that requires that a CCS message appear before the Finished and after the master secret has been generated. An attacker can still inject an early CCS too and the keys will be calculated with an empty master secret. Those keys will be latched - another CCS won&#39;t cause them to be recalculated. However, when sending the second CCS that the client code requires, the Finished hash is recalculated with the correct master secret. This means that the attacker can&#39;t fabricate an acceptable Finished hash. This stops the obvious, generic impersonation attack against the client.&lt;/p&gt;  &lt;p&gt;For a server, there&#39;s no such check and it appears to be possible to send an early CCS message and then fabricate the Finished hash because it&#39;s based on an empty master secret. However, that doesn&#39;t obviously gain an attacker anything. It would be interesting if a connection with a client certificate could be hijacked, but there is a check in &lt;tt&gt;ssl3_get_cert_verify&lt;/tt&gt; that a CCS hasn&#39;t been already processed so that isn&#39;t possible.&lt;/p&gt;  &lt;p&gt;Someone may be able to do something more creative with this bug; I&#39;m not ruling out that there might be other implications.&lt;/p&gt;  &lt;p&gt;Things change with an OpenSSL 1.0.1 server however. In 1.0.1, a patch of mine was included that moves the point where Finished values are calculated. The server will now use the correct Finished hash even if it erroneously processed a CCS, but this interacts badly with this bug. The server code (unlike the client) won&#39;t accept two CCS messages in a handshake. So, if an attacker injects an early CCS at the server to fixate the bad keys, then it&#39;s not possible for them to send a second in order to get it to calculate the correct Finished hash. But with 1.0.1, the server will use the correct Finished hash and will reply with the correct hash to the client. This explains the 1.0.1 and 1.0.2 mention in the advisory. With any OpenSSL client talking to an OpenSSL 1.0.1 server, an attacker can inject CCS messages to fixate the bad keys at both ends but the Finished hashes will still line up. So it&#39;s possible for the attacker to decrypt and/or hijack the connection completely.&lt;/p&gt;  &lt;p&gt;The good news is that these attacks need man-in-the-middle position against the victim and that non-OpenSSL clients (IE, Firefox, Chrome on Desktop and iOS, Safari etc) aren&#39;t affected. None the less, all OpenSSL users should be updating.&lt;/p&gt;  &lt;p&gt;&lt;b&gt;Update&lt;/b&gt;: I hacked up the Go TLS library to perform the broken handshake in both 0.9.8/1.0.0 and 1.0.1 modes. There&#39;s &lt;a href=&quot;/binary/earlyccs_tls.patch&quot;&gt;a patch&lt;/a&gt; for crypto/tls and &lt;a href=&quot;/binary/earlyccs_check.go&quot;&gt;a tool&lt;/a&gt; that will attempt to do those broken handshakes and tell you if either worked. For example (at the time of writing):&lt;/p&gt;  &lt;pre&gt;$ ./earlyccs_check google.com Handshake failed with error: remote error: unexpected message Looks ok. $ ./earlyccs_check github.com Server is affected (1.0.1). $ ./earlyccs_check amazon.com Server is affected (0.9.8 or 1.0.0).&lt;/pre&gt; </content>  </entry>    </feed> ", 
    "identity": {
        "subtype": "", 
        "is_error": false, 
        "version": "", 
        "protocol": "", 
        "language": "", 
        "service": "", 
        "has_dataset": false, 
        "has_metadata": false
    }, 
    "digest": "5af3ecccb67d5b94c828f441600888f6", 
    "source_url": "https://www.imperialviolet.org/iv-rss.xml"
}