{
    "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?> <feed xmlns=\"http://www.w3.org/2005/Atom\">   <title>Tom MacWright</title>   <link href=\"http://macwright.org/atom.xml\" rel=\"self\"/>   <link href=\"http://macwright.org/\"/>   <updated>2015-03-10T14:39:21+00:00</updated>   <id>http://macwright.org/</id>   <author>     <name>Tom MacWright</name>     <email>tom@macwright.org</email>   </author>      <entry>     <title>JavaScript Diagnosis</title>     <link href=\"http://macwright.org/2015/03/10/javascript-diagnosis.html\"/>     <updated>2015-03-10T00:00:00+00:00</updated>     <id>http://macwright.org/2015/03/10/javascript-diagnosis</id>     <content type=\"html\">&lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7591/16587720628_2a522e0ab1_h.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;  &lt;p&gt;Let&amp;rsquo;s dive into errors in more depth: with the features built into the browser you use today, you can stop time, inspect values of variables as they change, and understand the call structure of your code.&lt;/p&gt;  &lt;p&gt;Previously, I described &lt;em&gt;&lt;a href=&quot;http://www.macwright.org/2015/02/28/errors.html&quot;&gt;the kinds of errors in JavaScript&lt;/a&gt;&lt;/em&gt;: understanding them is a prerequisite.&lt;/p&gt;  &lt;p&gt;The other thing you&amp;rsquo;ll need is &lt;strong&gt;Google Chrome&lt;/strong&gt;. That&amp;rsquo;s because this is a specific, visual guide to one specific kind of developer tool. There are similar implementations in Firefox and other browsers: I would love if anyone wants to contribute a version for another browser: diversity is good.&lt;/p&gt;  &lt;h2&gt;Opening the Developer Tools&lt;/h2&gt;  &lt;p&gt;The first step is opening the developer tools: this is a panel that usually sits below a webpage and gives you x-ray vision into its inner workings.&lt;/p&gt;  &lt;div class=&#39;link-block&#39;&gt;   &lt;a href=&#39;http://macwright.org/errors/debugging/1.html&#39;&gt;Open this page and then follow the video below \\ufffd\\ufffd\\ufffd&lt;/a&gt; &lt;/div&gt;     &lt;iframe src=&quot;https://player.vimeo.com/video/121574657?title=0&amp;byline=0&amp;portrait=0&quot; width=&quot;640&quot; height=&quot;375&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;   &lt;p&gt;&lt;em&gt;There are three different ways to open the developer tools: inspecting an element, clicking the toolbar menu, and hitting cmd-option-i (or ctrl-option-i on non-Macs)&lt;/em&gt;&lt;/p&gt;  &lt;h2&gt;Getting the Details&lt;/h2&gt;  &lt;p&gt;Now that you&amp;rsquo;ve successfully opened your developer console, let&amp;rsquo;s move on to looking at a bug, in detail.&lt;/p&gt;  &lt;p&gt;The basic parts of a bug are as follows: each gives you a different perspective on its cause and the potential solution&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.macwright.org/2015/02/28/errors.html&quot;&gt;type&lt;/a&gt;&lt;/strong&gt;, for instance &lt;code&gt;SyntaxError&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;, like &amp;ldquo;could not access property &lt;code&gt;foo&lt;/code&gt; of &lt;code&gt;undefined&lt;/code&gt;&amp;rdquo;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;filename &amp;amp; line number&lt;/strong&gt;, where the error occurred&lt;/li&gt; &lt;li&gt;&lt;strong&gt;call stack&lt;/strong&gt;, or a list of functions calling each other that led to the error&lt;/li&gt; &lt;/ul&gt;   &lt;p&gt;We&amp;rsquo;ve reviewed type in the last post.&lt;/p&gt;  &lt;p&gt;Error messages vary: there are lots of built-in error messages in JavaScript, some of which are helpful. Sometimes just by seeing an error message you&amp;rsquo;ll have a good idea of what to fix, but usually not.&lt;/p&gt;  &lt;p&gt;The part where developer tools get really helpful is the &lt;strong&gt;filename, line number, and call stack&lt;/strong&gt;: they&amp;rsquo;ll let you know where it happened, but also what happened before that, and what things were like when it happened.&lt;/p&gt;  &lt;p&gt;So without further adieu,&lt;/p&gt;  &lt;div class=&#39;link-block&#39;&gt;   &lt;a href=&#39;http://macwright.org/errors/debugging/2.html&#39;&gt;Open this page and then follow the video below \\ufffd\\ufffd\\ufffd&lt;/a&gt; &lt;/div&gt;     &lt;iframe src=&quot;https://player.vimeo.com/video/121576066?title=0&amp;byline=0&amp;portrait=0&quot; width=&quot;640&quot; height=&quot;292&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;   &lt;p&gt;&lt;em&gt;Note that in this video, I refresh the page after noticing that it has an error. That&amp;rsquo;s because you get more information from the developer console if it&amp;rsquo;s open at the time of the error, because it&amp;rsquo;s hooked into your JavaScript code and recording everything in detail. For this reason, I keep my Developer Tools open most of the time during development.&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;So you might be wondering: what is the &lt;strong&gt;call stack&lt;/strong&gt;? Well, JavaScript is structured around functions: calling functions and having functions call each other is the fundamental tool to make complicated things in JavaScript.&lt;/p&gt;  &lt;p&gt;The hierarchy of what function called which other function is &lt;strong&gt;the call stack&lt;/strong&gt;: a listing of functions from closest to furthest from the currently-running line of code. The call stack is central to debugging because it reveals two fundamental principles:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;&lt;strong&gt;time&lt;/strong&gt;: what led up to this error: which functions were called&lt;/li&gt; &lt;li&gt;&lt;strong&gt;scope&lt;/strong&gt;: the variables currently accessible by a function&lt;/li&gt; &lt;/ul&gt;   &lt;h2&gt;Stopping Time&lt;/h2&gt;  &lt;p&gt;In the ancient past, the standard for debugging JavaScript was to litter code with calls to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/alert&quot;&gt;&lt;code&gt;window.alert()&lt;/code&gt;&lt;/a&gt;, which would trigger a popup with some value displayed, or just &lt;code&gt;&#39;hey&#39;&lt;/code&gt; if you wanted to check that some portion of code was running.&lt;/p&gt;  &lt;p&gt;With the emergence of &lt;a href=&quot;http://debugbrowser.com/&quot;&gt;developer extensions&lt;/a&gt; in most browsers, people switched to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Console/log&quot;&gt;&lt;code&gt;console.log()&lt;/code&gt;&lt;/a&gt;, which prints something in your console instead of popping up a window, and if you call it with an object or element or some other kind of complex type, it&amp;rsquo;ll pretty-print and let you inspect its properties.&lt;/p&gt;  &lt;p&gt;Here&amp;rsquo;s the third wave: breakpoints. Read that as &amp;lsquo;take a break at these points&amp;rsquo; instead of &amp;lsquo;make something broken&amp;rsquo;.&lt;/p&gt;  &lt;p&gt;Unlike &lt;code&gt;console.log&lt;/code&gt; and &lt;code&gt;alert&lt;/code&gt;, breakpoints don&amp;rsquo;t need to be written into your code. They&amp;rsquo;re also much better.&lt;/p&gt;  &lt;p&gt;&lt;code&gt;console.log&lt;/code&gt; logs only the things you choose: usually people will write &lt;code&gt;console.log(foo)&lt;/code&gt; or something similar and hope that that&amp;rsquo;s the important part. Breakpoints, on the other hand, do something much different: they stop time, letting you look at the values of any variable.&lt;/p&gt;  &lt;p&gt;There are two ways of setting a breakpoint: the first, and most common, is to set them &lt;em&gt;via your web browser&lt;/em&gt;.&lt;/p&gt;  &lt;div class=&#39;link-block&#39;&gt;   &lt;a href=&#39;http://macwright.org/errors/debugging/3.html&#39;&gt;Open this page and then follow the video below \\ufffd\\ufffd\\ufffd&lt;/a&gt; &lt;/div&gt;   &lt;iframe src=&quot;https://player.vimeo.com/video/121781191?title=0&amp;byline=0&amp;portrait=0&quot; width=&quot;640&quot; height=&quot;329&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;   &lt;h2&gt;Reacting to Failure&lt;/h2&gt;  &lt;p&gt;Breakpoints are useful, and error details are too: let&amp;rsquo;s combine the two.&lt;/p&gt;  &lt;p&gt;Chrome has a wonderful feature called &amp;lsquo;Break on Exceptions&amp;rsquo; that combines the magic of error details and breakpoints - whenever an error occurs, it&amp;rsquo;ll stop time just like a breakpoint, with the same knowledge of its context.&lt;/p&gt;  &lt;p&gt;I keep Break on Exceptions &lt;strong&gt;on&lt;/strong&gt; whenever working on a project under development: it keeps me aware of any problems as soon as possible.&lt;/p&gt;  &lt;blockquote&gt;&lt;p&gt;Rule of Repair: When you must fail, fail noisily and as soon as possible.&lt;/p&gt;&lt;/blockquote&gt;  &lt;p&gt;I like to follow the Rule of Repair from &lt;a href=&quot;http://www.faqs.org/docs/artu/ch01s06.html&quot;&gt;The Basics of Unix Philosophy&lt;/a&gt;: it&amp;rsquo;s much better to fix problems sooner than later.&lt;/p&gt;  &lt;div class=&#39;link-block&#39;&gt;   &lt;a href=&#39;http://macwright.org/errors/debugging/2.html&#39;&gt;Open this page and then follow the video below \\ufffd\\ufffd\\ufffd&lt;/a&gt; &lt;/div&gt;   &lt;iframe src=&quot;https://player.vimeo.com/video/121578238?title=0&amp;byline=0&amp;portrait=0&quot; width=&quot;640&quot; height=&quot;289&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;   &lt;p&gt;&lt;em&gt;See how this is the combination of closely inspecting an error and stopping time with breakpoints? Notice that when you&amp;rsquo;re stopped on a breakpoint, all of the variables in scope at that time are accessible from what you type in the console.&lt;/em&gt;&lt;/p&gt;  &lt;h2&gt;Homework&lt;/h2&gt;  &lt;p&gt;Once you&amp;rsquo;re comfortable with the developer tools, some useful things to learn:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://developer.chrome.com/devtools/docs/shortcuts&quot;&gt;Keyboard shortcuts&lt;/a&gt;: the great ones are &amp;ldquo;escape&amp;rdquo; for opening &amp;amp; closing the console, and Command-O to find a file&lt;/li&gt; &lt;li&gt;Use uncompressed versions of jQuery and other libraries to debug their code, or use versions with &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&quot;&gt;source maps&lt;/a&gt; enabled to debug code even when it&amp;rsquo;s minified.&lt;/li&gt; &lt;/ul&gt;   &lt;center&gt;-&lt;/center&gt;   &lt;p&gt;These aren&amp;rsquo;t protips: these are essential skills that make the process of learning and understanding JavaScript faster and less painful. Fixing problems without feedback is driving blind: don&amp;rsquo;t do it if you don&amp;rsquo;t have to.&lt;/p&gt; </content>     <author>       <name>Tom MacWright</name>       <uri>http://macwright.org/about/</uri>     </author>   </entry>      <entry>     <title>Recently</title>     <link href=\"http://macwright.org/2015/03/02/recently.html\"/>     <updated>2015-03-02T00:00:00+00:00</updated>     <id>http://macwright.org/2015/03/02/recently</id>     <content type=\"html\">&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/tmcw/16595731392&quot; title=&quot;#nightcats by Tom MacWright, on Flickr&quot;&gt;&lt;img src=&quot;https://farm9.staticflickr.com/8673/16595731392_490a99376e_o.jpg&quot; width=&quot;640&quot; height=&quot;640&quot; alt=&quot;#nightcats&quot;&gt;&lt;/a&gt;&lt;/p&gt;  &lt;h2&gt;Elsewhere&lt;/h2&gt;  &lt;ul&gt; &lt;li&gt;I presented &lt;a href=&quot;http://www.macwright.org/presentations/beyondfor/&quot;&gt;beyond the for loop&lt;/a&gt; &lt;a href=&quot;http://www.meetup.com/DC-JavaScript/events/220308444/&quot;&gt;at DC JavaScript&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://www.mapbox.com/blog/rethinking-data-design/&quot;&gt;Previewed Mapbox&amp;rsquo;s next interface on the Mapbox Blog&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Released &lt;a href=&quot;https://github.com/mapbox/stickshift&quot;&gt;Stickshift&lt;/a&gt;, &lt;a href=&quot;https://www.mapbox.com/blog/stickshift/&quot;&gt;a UI for SQL queries and analysis, on the Mapbox blog&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Ran a 5k &amp;amp; 10k in sleet and placed &lt;a href=&quot;http://www.zippyraceresults.com/search.php?ID=4678&quot;&gt;125th&lt;/a&gt;/1761 and &lt;a href=&quot;http://www.zippyraceresults.com/search.php?ID=4679&quot;&gt;272nd&lt;/a&gt;/2026 respectively&lt;/li&gt; &lt;/ul&gt;   &lt;h2&gt;Reading&lt;/h2&gt;  &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;http://www.frerejones.com/blog/typeface-mechanics-001/&quot;&gt;Typeface Mechanics 001&lt;/a&gt; by Frere-Jones&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://nplusonemag.com/online-only/online-only/the-last-days-of-football/&quot;&gt;The Last Days of Football&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://blog.ameliagreenhall.com/post/quiet-ladies.-wadhwa-is-speaking-now&quot;&gt;Quiet, Ladies: Wadha is Speaking Now&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0465054684/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0465054684&amp;linkCode=as2&amp;tag=macwrightorg-20&amp;linkId=52VXM4AL2JZGLKYQ&quot;&gt;For God, Country, and Coca-Cola&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/0316787531/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0316787531&amp;linkCode=as2&amp;tag=macwrightorg-20&amp;linkId=6H47JEI3JF4XSRGN&quot;&gt;Our Band Could Be Your Life: Scenes from the American Indie Underground 1981-1991&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;   &lt;h2&gt;Listening&lt;/h2&gt;  &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Liquid_Swords&quot;&gt;Liquid Swords&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/If_You%27re_Reading_This_It%27s_Too_Late&quot;&gt;If You&amp;rsquo;re Reading This It&amp;rsquo;s Too Late&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Cancer_4_Cure&quot;&gt;El-P: Cancer 4 Cure&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;   &lt;p&gt;Been sketching:&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/tmcw/16685617092&quot; title=&quot;x-ray vision by Tom MacWright, on Flickr&quot;&gt;&lt;img src=&quot;https://farm9.staticflickr.com/8596/16685617092_2dc3fd9863_n.jpg&quot; width=&quot;320&quot; height=&quot;320&quot; alt=&quot;x-ray vision&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.flickr.com/photos/tmcw/16411617647&quot; title=&quot;a broken car by Tom MacWright, on Flickr&quot;&gt;&lt;img src=&quot;https://farm9.staticflickr.com/8597/16411617647_a23f98c469_n.jpg&quot; width=&quot;320&quot; height=&quot;320&quot; alt=&quot;a broken car&quot;&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/tmcw/16489824709&quot; title=&quot;broken bridge by Tom MacWright, on Flickr&quot;&gt;&lt;img src=&quot;https://farm9.staticflickr.com/8632/16489824709_ded1f544e6_h.jpg&quot; alt=&quot;broken bridge&quot;&gt;&lt;/a&gt;&lt;/p&gt; </content>     <author>       <name>Tom MacWright</name>       <uri>http://macwright.org/about/</uri>     </author>   </entry>      <entry>     <title>Errors</title>     <link href=\"http://macwright.org/2015/02/28/errors.html\"/>     <updated>2015-02-28T00:00:00+00:00</updated>     <id>http://macwright.org/2015/02/28/errors</id>     <content type=\"html\">&lt;p&gt;&lt;img src=&quot;https://farm9.staticflickr.com/8632/16489824709_ded1f544e6_h.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;  &lt;p&gt;An understanding of errors is absolutely vital to the task of coding. Absolutely everyone, including a first-day beginner to a PhD at NASA, makes mistakes constantly. You can get better, graduate from one kind of error to another, but making things will always be a sort of trial-and-error.&lt;/p&gt;  &lt;p&gt;The lack of focus on understanding errors is disheartening, even for self-education sites like Codecademy, &lt;a href=&quot;http://www.codecademy.com/en/tracks/javascript&quot;&gt;whose JavaScript course&lt;/a&gt; goes to great lengths to avoid teaching error literacy.&lt;/p&gt;  &lt;p&gt;Not understanding errors means that your programs &amp;ldquo;work&amp;rdquo; or &amp;ldquo;don&amp;rsquo;t work&amp;rdquo;, and in-between is a feeling of helplessness and hours spent guessing. This is a waste. There&amp;rsquo;s information available that says what sorts of problems exist and where they come from - all you need to do is understand it.&lt;/p&gt;  &lt;p&gt;Diagnosing errors is also a vital skill for using other people&amp;rsquo;s code: it&amp;rsquo;ll help you &lt;a href=&quot;http://www.macwright.org/report-a-bug/&quot;&gt;report better bugs&lt;/a&gt; and point to the cause faster.&lt;/p&gt;  &lt;h2&gt;Compile vs. Runtime Errors&lt;/h2&gt;  &lt;p&gt;There are two main types of errors: compile errors and runtime errors.&lt;sup&gt;&lt;a href=&#39;#compile&#39;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;  &lt;p&gt;Compile-time errors occur &lt;em&gt;before any part of your code runs&lt;/em&gt;. For instance, if you write something that the JavaScript interpreter simply can&amp;rsquo;t understand at any point in your program, like if you forget a &lt;code&gt;&quot;&lt;/code&gt;, then it will simply give up on running any part of the program and report its confusion.&lt;/p&gt;  &lt;p&gt;Runtime errors, on the other hand, happen &lt;em&gt;sometime while your code is running&lt;/em&gt;. This could be almost immediately, like in the case of a &lt;code&gt;ReferenceError&lt;/code&gt;, or it could happen 5 minutes after someone has been using a website, when some bad data mucks everything up.&lt;/p&gt;  &lt;p&gt;All right: let&amp;rsquo;s meet the errors.&lt;/p&gt;  &lt;h2&gt;SyntaxError&lt;/h2&gt;  &lt;table class=&#39;equitable&#39;&gt; &lt;tr&gt; &lt;th&gt;&lt;strong&gt;code&lt;/strong&gt;&lt;/th&gt; &lt;th&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;running&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/td&gt; &lt;td&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;syntax.js:2 @ ^ SyntaxError: Unexpected token ILLEGAL&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;   &lt;p&gt;&lt;code&gt;SyntaxError&lt;/code&gt; is potentially the most commonly seen error for newcomers. Some common cases in which you&amp;rsquo;ll see it crop up are:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;You&amp;rsquo;ve typed an opening &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;{&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, or &lt;code&gt;&#39;&lt;/code&gt;, but not the closing &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;}&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;&#39;&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Your code includes an illegal character like &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, or &lt;code&gt;&amp;gt;&lt;/code&gt; that isn&amp;rsquo;t in a string. Identifiers in JavaScript - names of functions and variables - &lt;a href=&quot;https://mathiasbynens.be/notes/javascript-identifiers&quot;&gt;can have lots of names&lt;/a&gt;, but not all.&lt;/li&gt; &lt;li&gt;You&amp;rsquo;ve tried to name a variable or function the same thing as a reserved word in JavaScript, like &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;this&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt;   &lt;p&gt;As the example above demonstrates, &lt;code&gt;SyntaxError&lt;/code&gt;s are often flagged by the syntax highlighting in your editor: if you type &lt;code&gt;var break = 1;&lt;/code&gt; in Sublime, you&amp;rsquo;ll notice that &lt;code&gt;break&lt;/code&gt; is red, the color of a keyword, rather than the color of a variable.&lt;/p&gt;  &lt;p&gt;SyntaxErrors are usually compile-time errors: even though this example has the code &lt;code&gt;console.log(&#39;running&#39;)&lt;/code&gt; &lt;em&gt;above the error&lt;/em&gt;, that never runs, and you never see &lt;code&gt;running&lt;/code&gt; in your console. The SyntaxError shuts it all down before a single line of code is run.&lt;/p&gt;  &lt;p&gt;There are two big cases where SyntaxErrors are &lt;strong&gt;not&lt;/strong&gt; compile-time:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;Parsing invalid &lt;a href=&quot;http://json.org/&quot;&gt;JSON&lt;/a&gt; with &lt;code&gt;JSON.parse&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Evaluating JavaScript with &lt;code&gt;eval&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;   &lt;p&gt;Both of these errors can happen at any time: you use AJAX to get some data and it&amp;rsquo;s invalid, and you&amp;rsquo;ll get a SyntaxError.&lt;/p&gt;  &lt;h2&gt;ReferenceError&lt;/h2&gt;  &lt;center&gt;&lt;img width=300px src=&#39;https://i.giphy.com/3EAKx4pSermgdVnJ8A.gif&#39; /&gt;&lt;/center&gt;     &lt;table class=&#39;equitable&#39;&gt; &lt;tr&gt; &lt;th&gt;&lt;strong&gt;code&lt;/strong&gt;&lt;/th&gt; &lt;th&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;running&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/td&gt; &lt;td&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;running  reference.js var &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; a ^ ReferenceError: a is not defined&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;   &lt;p&gt;&lt;code&gt;ReferenceError&lt;/code&gt; means &amp;ldquo;the variable you referenced does not exist&amp;rdquo;. A few popular common ways this crops up are:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;Misspelled words. Identifiers in JavaScript are case-sensitive and, unlike the wonderful human brain, computers are not forgiving of single-letter typing mistakes.&lt;/li&gt; &lt;li&gt;Trying to use a variable that is &lt;a href=&quot;http://www.smashingmagazine.com/2009/08/01/what-you-need-to-know-about-javascript-scope/&quot;&gt;out of scope&lt;/a&gt; or hasn&amp;rsquo;t been defined yet.&lt;/li&gt; &lt;/ul&gt;   &lt;h2&gt;TypeError&lt;/h2&gt;  &lt;table class=&#39;equitable&#39;&gt; &lt;tr&gt; &lt;th&gt;&lt;strong&gt;code&lt;/strong&gt;&lt;/th&gt; &lt;th&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;running&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/td&gt; &lt;td&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;running  type.js:2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.toUpperCase&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     ^ TypeError: Object &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; has no method &lt;span class=&quot;s1&quot;&gt;&amp;#39;toUpperCase&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;   &lt;p&gt;While JavaScript is very flexible when it comes to types - you can, for instance, add a number to a string without incident - not all of its types support all methods or operations. The &lt;code&gt;TypeError&lt;/code&gt; crops up when you accidentally mistake one kind of variable for another. This crops up when:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;You give the wrong arguments to an existing function and it tries to call a method that&amp;rsquo;s only defined on one type (like in this case, &lt;code&gt;toUpperCase&lt;/code&gt;) on the type you gave it.&lt;/li&gt; &lt;/ul&gt;   &lt;p&gt;There&amp;rsquo;s also another case where you might run into errors if you roll with the &lt;a href=&quot;http://mislav.uniqpath.com/2010/05/semicolons/&quot;&gt;no-semicolon crowd&lt;/a&gt;:&lt;/p&gt;  &lt;table class=&#39;equitable&#39;&gt; &lt;tr&gt; &lt;th&gt;&lt;strong&gt;code&lt;/strong&gt;&lt;/th&gt; &lt;th&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;running&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/td&gt; &lt;td&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;running  type_asi.js:3 var &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; x         ^ TypeError: number is not a &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;   &lt;p&gt;In this particular case, JavaScript sees your code and smooshes the line &lt;code&gt;var y = x&lt;/code&gt; together with the &lt;a href=&quot;http://benalman.com/news/2010/11/immediately-invoked-function-expression/&quot;&gt;immediately-invoked function&lt;/a&gt; below it, and sees&lt;/p&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   &lt;p&gt;x is a number, not a function, hence the error. The message is illustrative of another fact: the line &amp;amp; snippet given is where the error starts, not necessarily the full context of why it happened. In this case you need to read both lines to see the problem.&lt;/p&gt;  &lt;h2&gt;RangeError&lt;/h2&gt;  &lt;p&gt;&lt;img src=&quot;https://farm9.staticflickr.com/8575/16617321771_8fa2e2ded2_h.jpg&quot; alt=&quot;a broken car&quot; /&gt;&lt;/p&gt;  &lt;table class=&#39;equitable&#39;&gt; &lt;tr&gt; &lt;th&gt;&lt;strong&gt;code&lt;/strong&gt;&lt;/th&gt; &lt;th&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;running&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/td&gt; &lt;td&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;running  range_error_array.js:2 new Array&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     ^ RangeError: Invalid array length&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;   &lt;p&gt;&lt;code&gt;RangeError&lt;/code&gt; is thrown when you give errors that are outside of the logical realm: for instance, here I&amp;rsquo;m trying to create an &lt;code&gt;Array&lt;/code&gt; with &lt;code&gt;length = -1&lt;/code&gt;. Like the physical world, there is nothing less than emptiness.&lt;/p&gt;  &lt;p&gt;But given that most of the time you should use the &lt;code&gt;[]&lt;/code&gt; literal &lt;code&gt;Array&lt;/code&gt; constructor and the other places this crops up, like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError#Description&quot;&gt;&lt;code&gt;Number.toPrecision&lt;/code&gt;&lt;/a&gt;, aren&amp;rsquo;t super used, this is the minority of places you&amp;rsquo;ll see it. Most of the time you&amp;rsquo;ll see this case:&lt;/p&gt;  &lt;table class=&#39;equitable&#39;&gt; &lt;tr&gt; &lt;th&gt;&lt;strong&gt;code&lt;/strong&gt;&lt;/th&gt; &lt;th&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;running&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;infinite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;infinite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/td&gt; &lt;td&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;running  range_error.js:2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; infinite&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;                   ^ RangeError: Maximum call stack size exceeded&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;   &lt;p&gt;&lt;code&gt;RangeError&lt;/code&gt; is used for the error you get when you write an &lt;a href=&quot;http://en.wikipedia.org/wiki/Recursion&quot;&gt;infinitely recursive function&lt;/a&gt; and just let it run. This is the equivalent of an infinite loop, but given JavaScript&amp;rsquo;s lack of &lt;a href=&quot;http://en.wikipedia.org/wiki/Tail_call&quot;&gt;tail calls&lt;/a&gt;, every time you recurse you add a little bit more overhead of remembering a new function call. So, V8 (Chrome &amp;amp; Node) will alert you with this &lt;code&gt;Maximum call stack size exceeded&lt;/code&gt; message telling you that your recursion is out of control.&lt;/p&gt;  &lt;h2&gt;URIError&lt;/h2&gt;  &lt;p&gt;For the sake of compleness, we&amp;rsquo;ll mention URIError, but it&amp;rsquo;s really not very common.&lt;/p&gt;  &lt;table class=&#39;equitable&#39;&gt; &lt;tr&gt; &lt;th&gt;&lt;strong&gt;code&lt;/strong&gt;&lt;/th&gt; &lt;th&gt;&lt;strong&gt;output&lt;/strong&gt;&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;running&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;decodeURIComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/td&gt; &lt;td&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;running  uri_error.js:2 decodeURIComponent&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ^ URIError: URI malformed&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;   &lt;p&gt;JavaScript includes several functions that encode and decode URIs (most of which are also URLs), like &lt;code&gt;decodeURI()&lt;/code&gt;, &lt;code&gt;decodeURIComponent()&lt;/code&gt;, &lt;code&gt;encodeURI()&lt;/code&gt;, and &lt;code&gt;encodeURIComponent()&lt;/code&gt;. Not every URI is &lt;a href=&quot;https://tools.ietf.org/html/rfc3986&quot;&gt;valid&lt;/a&gt; - sometimes you&amp;rsquo;ll have a case like this one, where the percent character is only valid with two hexademical digits after it to serve as &lt;a href=&quot;https://tools.ietf.org/html/rfc3986#section-2.1&quot;&gt;percent encoding&lt;/a&gt;. And if you give one of these invalid inputs to the URI-eating functions, they&amp;rsquo;ll reject it roundly with this error.&lt;/p&gt;  &lt;h2&gt;Until Next Time&lt;/h2&gt;  &lt;p&gt;Knowing the basic types of errors should get you started on the path to seeing those cryptic messages as helpful hints. In the next episode, I&amp;rsquo;ll discuss the most important parts of Google Chrome that you don&amp;rsquo;t use yet, the call stack, breakpoints, and more. Feel free to hit me up at &lt;a href=&quot;http://twitter.com/tmcw/&quot;&gt;@tmcw&lt;/a&gt; with questions or comments.&lt;/p&gt;  &lt;p&gt;I&amp;rsquo;ve compiled &lt;a href=&quot;https://github.com/tmcw/errors&quot;&gt;examples of each error type in a GitHub repository&lt;/a&gt;: clone it and run them in node, or copy them and run them in your developer console to try them out.&lt;/p&gt;  &lt;h1&gt;Notes&lt;/h1&gt;  &lt;ol&gt; &lt;li&gt;&lt;a name=&#39;compile&#39;&gt;&lt;/a&gt; Sticklers will note that JavaScript is not (traditionally) a compiled language. The line between compiled &amp;amp; interpreted languages has been significantly blurred in the last 10 years, and this nomenclature makes more sense than calling them simply &amp;lsquo;Syntax errors&amp;rsquo; because features in Harmony will make non-syntax errors throw before evaluation happens.&lt;/li&gt; &lt;/ol&gt;  </content>     <author>       <name>Tom MacWright</name>       <uri>http://macwright.org/about/</uri>     </author>   </entry>      <entry>     <title>beyond the for loop</title>     <link href=\"http://macwright.org/2015/02/19/arrays.html\"/>     <updated>2015-02-19T00:00:00+00:00</updated>     <id>http://macwright.org/2015/02/19/arrays</id>     <content type=\"html\">&lt;p&gt;&lt;a href=&quot;http://www.macwright.org/presentations/beyondfor/&quot;&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7365/15962572713_b1c9d1854f_b.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Tonight I&amp;rsquo;m presenting on array methods (&amp;lsquo;functional programming&amp;rsquo;) at &lt;a href=&quot;http://www.meetup.com/DC-JavaScript/events/220308444/&quot;&gt;DC JavaScript&lt;/a&gt;. You can &lt;a href=&quot;http://www.macwright.org/presentations/beyondfor/&quot;&gt;check out the slides here&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/tmcw/status/568454497850298368&quot;&gt;presenter notes are in your developer console&lt;/a&gt;. It&amp;rsquo;s kind of an expansion of my &lt;a href=&quot;http://www.macwright.org/2015/01/03/reduce-juice.html&quot;&gt;post on Array.reduce&lt;/a&gt;. I used it as an excuse to draw a few more:&lt;/p&gt;  &lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7458/16393554088_5e95d40f01_b.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;  &lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7313/16395338600_4591599ecf_b.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; </content>     <author>       <name>Tom MacWright</name>       <uri>http://macwright.org/about/</uri>     </author>   </entry>      <entry>     <title>Recently</title>     <link href=\"http://macwright.org/2015/02/02/recently.html\"/>     <updated>2015-02-02T00:00:00+00:00</updated>     <id>http://macwright.org/2015/02/02/recently</id>     <content type=\"html\">&lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7484/15713856623_5654067f1a_o.jpg&quot; alt=&quot;a building in san francisco, taken on my walk from the office to the hotel i stayed at last time&quot; /&gt;&lt;/p&gt;  &lt;h2&gt;Watching&lt;/h2&gt;  &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;http://www.imdb.com/title/tt2788710/&quot;&gt;The Interview&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.imdb.com/title/tt0048424/&quot;&gt;The Night of the Hunter&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.imdb.com/title/tt1791528/&quot;&gt;Inherent Vice&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.imdb.com/title/tt0093565/&quot;&gt;Moonstruck&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.imdb.com/title/tt3502262/&quot;&gt;Transparent&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.broadcitytheshow.com/&quot;&gt;Broad City&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;   &lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7560/16084720120_75834244d9_o.jpg&quot; alt=&quot;a wall in dc in one of the alleys that runs parallel to 14th street&quot; /&gt;&lt;/p&gt;  &lt;h2&gt;Reading&lt;/h2&gt;  &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;http://www.nytimes.com/2014/06/01/magazine/the-smutty-metaphor-queen-of-lawrence-kansas.html?nytmobile=0&amp;amp;_r=0&quot;&gt;The Smutty-Metaphor Queen of Lawrence, Kansas&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/077043617X/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=077043617X&amp;amp;linkCode=as2&amp;amp;tag=macwrightorg-20&amp;amp;linkId=XLMN33LOTF5PTG6U&quot;&gt;Countdown to Zero Day&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/1482516438/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1482516438&amp;amp;linkCode=as2&amp;amp;tag=macwrightorg-20&amp;amp;linkId=4IAI3L4KH3LX7RYZ&quot;&gt;Infinite Crab Meats&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.thenation.com/article/178140/feminisms-toxic-twitter-wars&quot;&gt;Feminism&amp;rsquo;s Twitter Wars&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.flowerhorne.com/blog/2015/1/20/the-trouble-with-heroes&quot;&gt;The Trouble with Heroes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://spiff.rit.edu/classes/phys445/lectures/time/time.html&quot;&gt;The Many Different Kinds of Time&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://mrale.ph/blog/2015/01/11/whats-up-with-monomorphism.html&quot;&gt;What&amp;rsquo;s up with Monomorphism&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://medium.com/cuepoint/why-i-left-the-major-label-system-a0ecfa06ae91&quot;&gt;Why I Left the Major Label System&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://medium.com/backchannel/techs-high-barrier-to-entry-for-the-underprivileged-da254356547d&quot;&gt;Tech&amp;rsquo;s High Barrier to Entry for the Underprivileged&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://medium.com/message/never-trust-a-corporation-to-do-a-librarys-job-f58db4673351&quot;&gt;Never Trust a Corporation to do a Library&amp;rsquo;s Job&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://modelviewculture.com/pieces/c-is-manly-python-is-for-n00bs-how-false-stereotypes-turn-into-technical-truths&quot;&gt;C is Manly, Python is for \\ufffd\\ufffd\\ufffdn00bs\\ufffd\\ufffd\\ufffd: How False Stereotypes Turn Into Technical \\ufffd\\ufffd\\ufffdTruths\\ufffd\\ufffd\\ufffd&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;   &lt;p&gt;&lt;img src=&quot;https://farm9.staticflickr.com/8652/16072726350_7d2672786d_o.jpg&quot; alt=&quot;a cat in the night, a night cat&quot; /&gt;&lt;/p&gt;  &lt;h2&gt;Elsewhere&lt;/h2&gt;  &lt;ul&gt; &lt;li&gt;Wrote &amp;amp; blogged &lt;a href=&quot;https://www.mapbox.com/blog/turf-mapping-global-bandwidth/&quot;&gt;a demo of using Turf.js on a server&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Wrote &lt;a href=&quot;https://github.com/mapbox/swot-simple&quot;&gt;swot-simple&lt;/a&gt;, a &lt;a href=&quot;https://github.com/leereilly/swot&quot;&gt;port of Swot&lt;/a&gt;, a library for identifying educational email addresses.&lt;/li&gt; &lt;li&gt;Wrote &lt;a href=&quot;https://github.com/tmcw/doxme&quot;&gt;doxme&lt;/a&gt;, a &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; documentation generator built on &lt;a href=&quot;https://github.com/tj/dox&quot;&gt;dox&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://teenmomdc.com/&quot;&gt;Teen Mom&lt;/a&gt; played a house show, finished recording an LP, and started planning a tour in June.&lt;/li&gt; &lt;li&gt;Wrote &lt;a href=&quot;https://github.com/tmcw/chroniton&quot;&gt;chroniton&lt;/a&gt;, a powerful date slider component.&lt;/li&gt; &lt;li&gt;Continued to hack on &lt;a href=&quot;https://github.com/tmcw/rpl-www&quot;&gt;rpl-www&lt;/a&gt; and &lt;a href=&quot;http://turfjs.org/static/docs/module-turf_centroid.html&quot;&gt;deployed it on turfjs.org&lt;/a&gt; to power live examples. This needs another post to catch up on the magic.&lt;/li&gt; &lt;/ul&gt;   &lt;p&gt;Mapbox &lt;a href=&quot;https://www.mapbox.com/about/open/&quot;&gt;published a document about how we do open source&lt;/a&gt;. This started as a note that I posted to our little intranet called &lt;code&gt;/hey&lt;/code&gt;, which is just a &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; repository with issues as messages.&lt;/p&gt;  &lt;p&gt;I think it&amp;rsquo;s pretty important. It&amp;rsquo;s one thing to align with the open source ideal in general terms, and quite another to say how you&amp;rsquo;re going to do it and specifying which parts you won&amp;rsquo;t share. Mapbox&amp;rsquo;s strategy is to free the vast majority of of work, including algorithmic magic where &amp;lsquo;value&amp;rsquo; is perceived, but to keep &lt;em&gt;products&lt;/em&gt; and &lt;em&gt;servers&lt;/em&gt; closed when they&amp;rsquo;re heavily specialized for our usage or would enable competitors. So the focus is on open sourcing modules. Modules are the liquid assets of open source - easy for one group or another to adopt and swap in, and of real use across industries.&lt;/p&gt;  &lt;p&gt;There are other models that are well-documented. &lt;a href=&quot;http://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt; does dual-licensing, which is &lt;a href=&quot;http://stevecoast.com/2015/01/30/sustainable-open-source/&quot;&gt;Steve Coast&amp;rsquo;s&lt;/a&gt; bet. &lt;a href=&quot;http://boundlessgeo.com/&quot;&gt;Boundless Geo&lt;/a&gt; (previously OpenGeo) does services, support, certifications. This strategy works for installable software in an high-end enterprise setting where you have a large staff that&amp;rsquo;s customer-facing - &lt;a href=&quot;https://twitter.com/marcoarment/status/562271375164194816&quot;&gt;handling support is a full time job&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Major companies have released big contributions to the &amp;lsquo;open source community&amp;rsquo; - like &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;Facebook&amp;rsquo;s React&lt;/a&gt;, &lt;a href=&quot;https://angularjs.org/&quot;&gt;Google&amp;rsquo;s Angular&lt;/a&gt;, and &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;Microsoft TypeScript&lt;/a&gt;. But these aren&amp;rsquo;t their products: the code for Facebook.com, Google Search, and Windows isn&amp;rsquo;t open. Given the advent of &amp;lsquo;cloud&amp;rsquo; applications, there&amp;rsquo;s much less of expectation that products &amp;amp; servers are released, and the industry-wide movement from &lt;a href=&quot;http://www.gnu.org/copyleft/gpl.html&quot;&gt;GPL&lt;/a&gt;-style licenses to &lt;a href=&quot;http://en.wikipedia.org/wiki/BSD_licenses&quot;&gt;BSD&lt;/a&gt;-style licenses makes it simple and legal.&lt;/p&gt;  &lt;p&gt;There are other paths. &lt;a href=&quot;https://www.mapbox.com/tilemill/&quot;&gt;TileMill&lt;/a&gt; was supported by a &lt;a href=&quot;http://www.knightfoundation.org/grants/20094589/&quot;&gt;Knight Foundation grant&lt;/a&gt;. There are other organizations, like &lt;a href=&quot;http://en.wikipedia.org/wiki/Mozilla_Foundation#Financing&quot;&gt;Mozilla&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/Open_Whisper_Systems&quot;&gt;Open Whisper Systems&lt;/a&gt; that are funded by continuing donations and odd business deals. &lt;a href=&quot;https://github.com/18f&quot;&gt;18f&lt;/a&gt; is funded by taxes.&lt;/p&gt;  &lt;p&gt;At Mapbox, the stuff we open source is all of the parts of our core product, except, sometimes, the product itself. I think this lines up with &lt;a href=&quot;https://medium.com/@mikeal/on-corporate-ownership-of-open-source-786ebd15847e&quot;&gt;Mikeal&lt;/a&gt;&amp;rsquo;s theory on how open source should be done. It separates things that require customer support and servers and that are aimed squarely at a single usecase and environment from those that are generally usable. For our open source projects, it makes the relationship straightforward: we build parts to build the product, we invest time in community-things like documentation and packaging, and we can be straightforward about the problems they&amp;rsquo;re solving and whether contributions will be accepted.&lt;/p&gt;  &lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7475/16147055440_ab5b24b5aa_o.jpg&quot; alt=&quot;documentation of the rare occurrence of being the first one in the office&quot; /&gt;&lt;/p&gt;  &lt;h2&gt;Listening&lt;/h2&gt;  &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/LP1_(FKA_twigs_album)&quot;&gt;FKA twigs: LP1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Rooms_of_the_House&quot;&gt;La Dispute: Rooms of the House&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Black_Messiah_(album)&quot;&gt;D\\ufffd\\ufffd\\ufffdAngelo and The Vanguard: Black Messiah&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://prettypurgatory.bandcamp.com/album/rhubarb&quot;&gt;Butcher Boy: Rhubarb&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=rgiOJNnOjdk&quot;&gt;Neil Young: Razor Love&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8aShfolR6w8&quot;&gt;Kendrick Lamar: i&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;  </content>     <author>       <name>Tom MacWright</name>       <uri>http://macwright.org/about/</uri>     </author>   </entry>      <entry>     <title>Typing is not the problem</title>     <link href=\"http://macwright.org/2015/01/19/typing-is-not-the-problem.html\"/>     <updated>2015-01-19T00:00:00+00:00</updated>     <id>http://macwright.org/2015/01/19/typing-is-not-the-problem</id>     <content type=\"html\">&lt;p&gt;You used to write &lt;a href=&quot;http://www.w3schools.com/css/&quot;&gt;CSS&lt;/a&gt;&lt;/p&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12px&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   &lt;p&gt;And then &lt;a href=&quot;http://learnboost.github.io/stylus/&quot;&gt;Stylus&lt;/a&gt; came along&lt;/p&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;   &lt;span class=&quot;nt&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;12px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;sans-serif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   &lt;p&gt;&lt;a href=&quot;http://cssondiet.com/&quot;&gt;cssondiet&lt;/a&gt; and typing &lt;code&gt;font&lt;/code&gt; was too much&lt;/p&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;fo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12px&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Helvetica&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Arial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sans-serif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   &lt;p&gt;The programming world has been working hard to save keystrokes: those darn &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;;&lt;/code&gt; are disappearing by the hour.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;But short is not simple.&lt;/strong&gt; Typing is not the problem.&lt;/p&gt;  &lt;p&gt;The complexity of programming is &lt;em&gt;conceptual&lt;/em&gt;. You don&amp;rsquo;t solve a problem of complexity by reducing the number of characters on a page.&lt;/p&gt;  &lt;p&gt;Ever wondered why &lt;a href=&quot;http://www.vim.org/&quot;&gt;vim&lt;/a&gt; doesn&amp;rsquo;t start in &lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/insert.html&quot;&gt;insert mode&lt;/a&gt;? It&amp;rsquo;s because programmers spend a &lt;em&gt;minority of their time writing code&lt;/em&gt; and the majority thinking, debugging, and editing away their mistakes.&lt;/p&gt;  &lt;p&gt;Trade the energy of using preprocessors and remembering the meaning of variables named &lt;code&gt;z&lt;/code&gt; weeks after naming them, and spend it on documentation, tests, and contemplating modes of failure. Write code in full words and sentences of thought, with English in between. It&amp;rsquo;s good for the future, good for maintenance, and will save time in the long run.&lt;/p&gt; </content>     <author>       <name>Tom MacWright</name>       <uri>http://macwright.org/about/</uri>     </author>   </entry>      <entry>     <title>See Also</title>     <link href=\"http://macwright.org/2015/01/12/see-also.html\"/>     <updated>2015-01-12T00:00:00+00:00</updated>     <id>http://macwright.org/2015/01/12/see-also</id>     <content type=\"html\">&lt;p&gt;&lt;img src=&quot;https://farm9.staticflickr.com/8677/16060106078_44ace9dbf6_b.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;  &lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;http://www.drdobbs.com/architecture-and-design/interview-with-alan-kay/240003442&quot;&gt;&lt;strong&gt;Binstock:&lt;/strong&gt;&lt;/a&gt;   You seem fastidious about always giving people credit for their work.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Alan_Kay&quot;&gt;&lt;strong&gt;Alan Kay:&lt;/strong&gt;&lt;/a&gt; Well, I&amp;rsquo;m an   old-fashioned guy. And I also happen to believe in history. The lack of   interest, the disdain for history is what makes computing not-quite-a-field.&lt;/p&gt;&lt;/blockquote&gt;  &lt;p&gt;&lt;strong&gt;Let&amp;rsquo;s embrace attribution and adaptation&lt;/strong&gt;: creation doesn&amp;rsquo;t happen in a vacuum.&lt;/p&gt;  &lt;p&gt;It&amp;rsquo;s easy to lose the storyline of why things are made and where inspiration comes from - especially with open source software where the foundations are destroyed and rebuilt each year.&lt;/p&gt;  &lt;p&gt;Recently I&amp;rsquo;ve been using &lt;strong&gt;See Also&lt;/strong&gt; as a way to make this explicit. It&amp;rsquo;s simply a heading that can be in a readme file or a blog post. It can serve as a &lt;a href=&quot;https://github.com/tmcw/parse-gedcom#see-also&quot;&gt;pointer to similar projects&lt;/a&gt; or even just &lt;a href=&quot;https://github.com/tmcw/cream#see-also&quot;&gt;things on the same topic&lt;/a&gt;. For projects with heritage, it can &lt;a href=&quot;https://github.com/mapbox/geobuf#see-also&quot;&gt;serve as a sort of historical hint&lt;/a&gt;. For some projects like &lt;a href=&quot;http://www.macwright.org/2012/06/26/simple-statistics.html&quot;&gt;simple-statistics&lt;/a&gt;, See Also outgrew the readme and &lt;a href=&quot;https://github.com/tmcw/simple-statistics/blob/master/SEEALSO.md&quot;&gt;has a standalone page&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Explicitly crediting the sources of our ideas is good for the community, and sharing our knowledge of suggestions and similarities will make the web easier and friendlier to explore.&lt;/p&gt;  &lt;h3&gt;See Also&lt;/h3&gt;  &lt;ul&gt; &lt;li&gt;See Also is named after by Wikipedia&amp;rsquo;s &lt;a href=&quot;http://en.wikipedia.org/wiki/Source_(journalism)#See_also&quot;&gt;See Also&lt;/a&gt; section that sits just above citations.&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.curatorscode.org/&quot;&gt;Curator&amp;rsquo;s Code&lt;/a&gt; is a similar project that defines a new sign and differentiates between direct &amp;amp; indirect discovery. A freeform approach that doesn&amp;rsquo;t rely on symbol recognition feels more right to me: with English, you can specify more complex and subtle ideas than you can with a link.&lt;/li&gt; &lt;/ul&gt;  </content>     <author>       <name>Tom MacWright</name>       <uri>http://macwright.org/about/</uri>     </author>   </entry>      <entry>     <title>ownership</title>     <link href=\"http://macwright.org/2015/01/11/ownership.html\"/>     <updated>2015-01-11T00:00:00+00:00</updated>     <id>http://macwright.org/2015/01/11/ownership</id>     <content type=\"html\">&lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7545/15626788444_fcccd819a1_b.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/tmcw/ownership&quot;&gt;ownership&lt;/a&gt; is a powertool for distributing permission to publish &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; packages.&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;This is a templated version of an in-house tool at &lt;a href=&quot;https://www.mapbox.com/&quot;&gt;Mapbox&lt;/a&gt; called &lt;code&gt;mapbox-owners&lt;/code&gt;. Mapbox is a &lt;a href=&quot;https://www.mapbox.com/about/team/&quot;&gt;lot of people&lt;/a&gt; and maintains numerous &lt;a href=&quot;https://github.com/mapbox&quot;&gt;open source projects&lt;/a&gt;, such that frequently people need to ask for &lt;a href=&quot;https://docs.npmjs.com/cli/owner&quot;&gt;npm ownership&lt;/a&gt; of new projects. I wrote &lt;code&gt;mapbox-owners&lt;/code&gt; to automate this conversation: in one command, anyone can give ownership of a module to everyone.&lt;/p&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;~/src/turf-jsdoc\\ufffd\\ufffd\\ufffdturf-owners turf-jsdoc adding &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt; owners to turf-jsdoc \\ufffd\\ufffd\\ufffd tmcw \\ufffd\\ufffd\\ufffd cwmma \\ufffd\\ufffd\\ufffd cspanring \\ufffd\\ufffd\\ufffd jseppi \\ufffd\\ufffd\\ufffd jvrousseau \\ufffd\\ufffd\\ufffd mourner \\ufffd\\ufffd\\ufffd morganherlocker&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   &lt;p&gt;Working on &lt;a href=&quot;https://github.com/Turfjs/turf&quot;&gt;Turf&lt;/a&gt; - a GIS system composed of 54 modules and counting - made me consider both dimensions of the problem, both modules and people. It&amp;rsquo;s likely that Turf&amp;rsquo;s modules will evolve all-at-once occasionally due to generated code. The Turf team will also grow - there are &lt;a href=&quot;https://github.com/Turfjs/turf-owners/blob/master/example-users.json&quot;&gt;8 maintainers&lt;/a&gt; and counting. Hence &lt;code&gt;ownership-all&lt;/code&gt;: a command that iterates through a &lt;a href=&quot;https://github.com/Turfjs/turf-owners/blob/master/example-packages.json&quot;&gt;list of modules&lt;/a&gt; and a list of users, adding each user to each module. In turf&amp;rsquo;s case, it automated 432 calls to the &lt;code&gt;npm owner add&lt;/code&gt; command.&lt;/p&gt;  &lt;p&gt;When new people join, add them to the list of users in your &lt;code&gt;owners&lt;/code&gt; module and publish a new version to have them added by default. So far &lt;code&gt;ownership&lt;/code&gt; hasn&amp;rsquo;t dealt with the problem of removing owners, but that&amp;rsquo;d be a great contribution to &lt;a href=&quot;https://github.com/tmcw/ownership&quot;&gt;the open source project&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://github.com/tmcw/ownership&quot;&gt;&lt;code&gt;ownership&lt;/code&gt;&lt;/a&gt; is designed to be forked, not used directly. Fork, rename, and manage as you&amp;rsquo;d like, so that you can &lt;code&gt;npm install mycorp-owners&lt;/code&gt; and run &lt;code&gt;mycorp-owners&lt;/code&gt; to use it with your team.&lt;/p&gt; </content>     <author>       <name>Tom MacWright</name>       <uri>http://macwright.org/about/</uri>     </author>   </entry>      <entry>     <title>parse-gedcom</title>     <link href=\"http://macwright.org/2015/01/05/parse-gedcom.html\"/>     <updated>2015-01-05T00:00:00+00:00</updated>     <id>http://macwright.org/2015/01/05/parse-gedcom</id>     <content type=\"html\">&lt;p&gt;&lt;img src=&quot;https://farm9.staticflickr.com/8605/16014597819_cbddce1d22_b.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href=&quot;https://github.com/tmcw/parse-gedcom&quot;&gt;&lt;code&gt;parse-gedcom&lt;/code&gt;&lt;/a&gt; is a simple parser for the &lt;a href=&quot;http://en.wikipedia.org/wiki/GEDCOM&quot;&gt;GEDCOM&lt;/a&gt; Genealogy data format. I&amp;rsquo;ve maintained my family tree in &lt;a href=&quot;http://www.geni.com/&quot;&gt;Geni&lt;/a&gt; since 2007, and currently it has 168 people in the graph. Having invested a significant amount of time tracking down relatives of the distant, and now on the cusp of figuring out what happened before Ellis Island, I wanted to understand this data and be able to do interesting things with it.&lt;/p&gt;  &lt;p&gt;As &lt;a href=&quot;http://www.somebits.com/weblog/tech/good/ancestry-uncertain-data.html&quot;&gt;Nelson Minar wrote yesterday&lt;/a&gt;, geneaology and the technology around it is fascinating and often ahead of its time in terms of annotation, representing uncertainty, and finding corresponding entries across datasets.&lt;/p&gt;  &lt;p&gt;&lt;code&gt;parse-gedcom&lt;/code&gt; is a simple, tasteful parser that does the bare minimum to make GEDCOM&amp;rsquo;s rather unusual encoding palatable to computers. GEDCOM is a weird tree that &lt;code&gt;parse-gedcom&lt;/code&gt; transforms into a nested JavaScript object that can be serialized and deserialized as &lt;a href=&quot;http://www.json.org/&quot;&gt;JSON&lt;/a&gt;.&lt;/p&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* INPUT&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;0 @I58346@ INDI&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt; 1 NAME Tom /MacWright/&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;  2 GIVN Tom&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;  2 SURN MacWright&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt; 1 SEX M&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;*/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pointer&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;@I58346@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;s2&quot;&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;INDI&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;s2&quot;&gt;&amp;quot;tree&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;     &lt;span class=&quot;s2&quot;&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;NAME&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Tom /MacWright/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;s2&quot;&gt;&amp;quot;tree&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;       &lt;span class=&quot;s2&quot;&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;GIVN&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;       &lt;span class=&quot;s2&quot;&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;SURN&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;MacWright&amp;quot;&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;s2&quot;&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;SEX&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;M&amp;quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   &lt;p&gt;The package also includes &lt;code&gt;parse-gedcom-d3&lt;/code&gt;, a tool that translates &lt;code&gt;parse-gedcom&lt;/code&gt;&amp;rsquo;s output into JSON that fits perfectly into a &lt;a href=&quot;http://d3js.org/&quot;&gt;d3&lt;/a&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Force-directed_graph_drawing&quot;&gt;force directed graph&lt;/a&gt;, since d3&amp;rsquo;s data expectations are a fairly common point of confusion.&lt;/p&gt;  &lt;p&gt;Finally, there&amp;rsquo;s a &lt;a href=&quot;http://www.macwright.org/parse-gedcom/live/&quot;&gt;web interface where you can drag &amp;amp; drop a GEDCOM file&lt;/a&gt; and get a live d3 chart in an instant.&lt;/p&gt; </content>     <author>       <name>Tom MacWright</name>       <uri>http://macwright.org/about/</uri>     </author>   </entry>      <entry>     <title>making juice with reduce / foldl</title>     <link href=\"http://macwright.org/2015/01/03/reduce-juice.html\"/>     <updated>2015-01-03T00:00:00+00:00</updated>     <id>http://macwright.org/2015/01/03/reduce-juice</id>     <content type=\"html\">&lt;p&gt;&lt;a href=&quot;http://www.macwright.org/2015/01/03/reduce-juice.html&quot;&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7511/16002581689_0529f29fec_h.jpg&quot; alt=&quot;making juice with Array.reduce&quot; /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;JavaScript&amp;rsquo;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt;&lt;code&gt;Array.reduce&lt;/code&gt;&lt;/a&gt; method is an underrated little method. Along with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&quot;&gt;&lt;code&gt;Array.map&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter&quot;&gt;&lt;code&gt;Array.filter&lt;/code&gt;&lt;/a&gt;, it fits under the banner of &amp;lsquo;functional programming&amp;rsquo;, in that it lets you do things you would do with &lt;code&gt;for&lt;/code&gt; loops except with functions.&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;&lt;code&gt;Array.map&lt;/code&gt; &lt;strong&gt;maps&lt;/strong&gt; values in one array to computed values in another&lt;/li&gt; &lt;li&gt;&lt;code&gt;Array.reduce&lt;/code&gt; &lt;strong&gt;reduces&lt;/strong&gt; values in one array into one value.&lt;/li&gt; &lt;/ul&gt;   &lt;p&gt;To run &lt;code&gt;Array.reduce&lt;/code&gt;, you&amp;rsquo;ll need:&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;an array&lt;/li&gt; &lt;li&gt;a function that takes arguments of &lt;code&gt;(previousValue, currentValue)&lt;/code&gt; and returns a new value.&lt;/li&gt; &lt;li&gt;the &lt;code&gt;initialValue&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt;   &lt;p&gt;Here&amp;rsquo;s &lt;strong&gt;sum&lt;/strong&gt; implemented with reduce. The input array is &lt;code&gt;[1, 2, 3]&lt;/code&gt;, and the function adds the running sum to the current value. The starting value is &lt;code&gt;0&lt;/code&gt;. The neat part is that there&amp;rsquo;s a sort of feedback loop going: what you return from the function is given back to it for the next element.&lt;/p&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   &lt;p&gt;Reduce feels a lot to me like making juice: you have&lt;/p&gt;  &lt;ul&gt; &lt;li&gt;the ingredients&lt;/li&gt; &lt;li&gt;a function that combines the current mixture with the next ingredient&lt;/li&gt; &lt;li&gt;a glass&lt;/li&gt; &lt;/ul&gt;   &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;cherries&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;juice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fruit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;juice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fruit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   &lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7493/16187867642_621fd22743_h.jpg&quot; alt=&quot;making juice with Array.reduce&quot; /&gt;&lt;/p&gt;  &lt;h3&gt;Excruciating Technical Detail&lt;/h3&gt;  &lt;p&gt;&lt;code&gt;Array.reduce&lt;/code&gt; underrated since it can easily implement a lot of other functions with just itself: the &amp;lsquo;single value&amp;rsquo; it reduces into can be anything: a number, and array, an object, and so on..&lt;/p&gt;  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Array.find&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tester&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Array.map&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]);&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Array.filter&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// .length&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// zip&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;apples&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;grapes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;   &lt;p&gt;&lt;a href=&quot;http://mistakes.io/#fa858878cf84f5029848&quot;&gt;(live examples of these working)&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;See Also&lt;/h3&gt;  &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://gist.github.com/tmcw/1c7dd591b11f0fa55cdc&quot;&gt;What kind of iteration to use when in JavaScript&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Fold_%28higher-order_function%29#Folds_in_various_languages&quot;&gt;Lots of languages have Array.reduce and many call it by the name &amp;lsquo;foldl&amp;rsquo;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;  </content>     <author>       <name>Tom MacWright</name>       <uri>http://macwright.org/about/</uri>     </author>   </entry>    </feed> ", 
    "identity": {
        "subtype": "", 
        "is_error": false, 
        "version": "", 
        "protocol": "", 
        "language": "", 
        "service": "", 
        "has_dataset": false, 
        "has_metadata": false
    }, 
    "digest": "2170ccb64a8e411fad9cc489e6d227fc", 
    "source_url": "http://www.macwright.org/atom.xml"
}