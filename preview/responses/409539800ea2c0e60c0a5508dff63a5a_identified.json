{
    "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?> <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns=\"http://purl.org/rss/1.0/\" xmlns:taxo=\"http://purl.org/rss/1.0/modules/taxonomy/\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:syn=\"http://purl.org/rss/1.0/modules/syndication/\" xmlns:admin=\"http://webns.net/mvcb/\">   <channel rdf:about=\"http://blog.gmane.org/gmane.comp.compression.xz.devel\">     <title>gmane.comp.compression.xz.devel</title>     <link>http://blog.gmane.org/gmane.comp.compression.xz.devel</link>     <description/>     <syn:updatePeriod>hourly</syn:updatePeriod>     <syn:updateFrequency>1</syn:updateFrequency>     <syn:updateBase>1901-01-01T00:00+00:00</syn:updateBase>     <items>       <rdf:Seq>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/224\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/223\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/222\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/221\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/220\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/219\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/218\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/217\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/216\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/211\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/210\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/209\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/208\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/207\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/206\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/205\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/204\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/203\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/202\"/>         <rdf:li rdf:resource=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/201\"/>       </rdf:Seq>     </items>     <image rdf:resource=\"http://gmane.org/img/gmane-25t.png\"/>     <textinput rdf:resource=\"\"/>   </channel>   <image rdf:about=\"http://gmane.org/img/gmane-25t.png\">     <title>Gmane</title>     <url>http://gmane.org/img/gmane-25t.png</url>     <link>http://gmane.org</link>   </image>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/224\">     <title>Re: Fairly Complete MSVC 2013 Solution/Project</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/224</link>     <description>&lt;pre&gt; Thanks! I finally test-built it. I fixed a few warnings and will fix a few more, but most warnings probably won't be fixed.  I'll get back to you when I have more to say, hopefully in 1-3 weeks. Sorry that this is progressing slowly.  &lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2015-03-08T20:35:30</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/223\">     <title>Re: Fairly Complete MSVC 2013 Solution/Project</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/223</link>     <description>&lt;pre&gt;Hi All,  I've addressed some(all?) of the comments above and rebased on 5.2.1. The relevant changes are available https://github.com/mindw/xz in the cmake branch.  Comments are welcome.  -gabi  -gabi   On Tue, Feb 3, 2015 at 8:44 PM, Lasse Collin &amp;lt;lasse.collin-/AfLDCr7/tBAfugRpC6u6w&amp;lt; at &amp;gt;public.gmane.org&amp;gt; wrote:   &lt;/pre&gt;</description>     <dc:creator>Gabi Davar</dc:creator>     <dc:date>2015-02-27T08:07:22</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/222\">     <title>XZ Utils 5.2.1</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/222</link>     <description>&lt;pre&gt;XZ Utils 5.2.1 is available at &amp;lt;http://tukaani.org/xz/&amp;gt;. Here is an  extract from the NEWS file:    * Fixed a compression-ratio regression in fast mode of LZMA1 and     LZMA2. The bug is present in 5.1.4beta and 5.2.0 releases.    * Fixed a portability problem in xz that affected at least OpenBSD.    * Fixed xzdiff to be compatible with FreeBSD's mktemp which differs     from most other mktemp implementations.    * Changed CPU core count detection to use cpuset_getaffinity() on     FreeBSD.  &lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2015-02-26T17:12:09</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/221\">     <title>Re: Fairly Complete MSVC 2013 Solution/Project</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/221</link>     <description>&lt;pre&gt; Maybe I can test with VS Community myself some day.    OK, I will change it.    The only sane way to keep them identical would be removing the \"restrict\" keywords from the .c files. It wouldn't be a big loss but it would be a bit silly.   liblzma is implemented in C99 but keeping the API headers compatible with C89 and C++98 allows using the library from those languages too.  I might be wrong, but doesn't it work to mix runtimes if one doesn't expose runtime-specific stuff via the DLL API? For example, liblzma API doesn't have any C-library-dependent declarations and it doesn't, for example, expose file descriptor numbers or throw exceptions. I have understood that this way it's fine to use MinGW-w64-built liblzma.dll with other toolchains. Most of time time it doesn't work with static libraries though, which is why people have been wishing that liblzma could be built with Visual Studio so that they could create a static executable that includes liblzma. For non-static uses the existing binaries should be OK.    Well, I'm not sure what is reasonable. Note that xz uses vsnprintf too which is equally non-standard in VS 2013, but since it exists in VS 2013, one doesn't get an error when compiling. The non-standard implementations don't always null-terminate the string and the return value is non-standard in some cases. I think it shouldn't be a problem in the current xz code, yet it leaves a slightly uncomfortable feeling.  Hopefully there aren't other traps like this in VS 2013. On the other hand it's good to keep in mind that the xz command line tools were originally written with POSIX-like systems in mind. Getting liblzma to build should be much simpler (and safer) since it doesn't need much from the C library. liblzma is also more important than the command line tools since the command line tools already are available for Windows, but making them build with VS 2013 is still good, I guess.    The idea of .in.h is that if configure detects that the system getopt.h isn't good enough, a replacement getopt.h will be created. The \"lib\" directory, which might contain getopt.h, is always in the compiler include path. My understanding is that this is a common way to handle replacement headers.  As long as there is just a single replacement header, other tricks could work. Since there might be other replacement headers in the future, it's no use to change this. It's simplest to add a one-line wrapper header for VS 2013.  &lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2015-02-03T18:44:17</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/220\">     <title>Re: Fairly Complete MSVC 2013 Solution/Project</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/220</link>     <description>&lt;pre&gt; I see the point of that rule. On the other hand, I think it can get boring to copypaste #include &amp;lt;config.h&amp;gt;, &amp;lt;stdbool.h&amp;gt;, &amp;lt;stdint.h&amp;gt;, &amp;lt;assert.h&amp;gt; and such in every file (or perhaps I'm too lazy).  Making XZ Utils strictly follow the rule would need quite a big patch. For example, various portability issues are taken care in src/common/sysdefs.h. Those could be moved to &amp;lt;config.h&amp;gt; and one could create replacement &amp;lt;stdint.h&amp;gt;, &amp;lt;inttypes.h&amp;gt;, and other headers (like gnulib can do) that are used when the system headers aren't good enough. So it wouldn't be only about modifying the .c and .h files but also about adding the replacement file logic to the build system.  Some clean up could certainly be done. For example in the xz command line tool, perhaps some includes could be omitted from src/xz/private.h and only added to files that need them. I think I still like to keep the includes for the internal xz headers (src/xz/*.h) in private.h. The whole point of private.h is that it's the very first file that is included by every .c file in in src/xz.   With &amp;lt;windows.h&amp;gt; surprises are still possible. According to [1] GetTickCount64() is declared iff _WIN32_WINNT &amp;gt;= 0x0600 when &amp;lt;windows.h&amp;gt; is included. That definition is missing from the patch. It's not in \"private.h\" either because so far nothing in xz itself needs it. \"private.h\" includes \"mythread.h\" though which does define _WIN32_WINNT to 0x0600. So it's actually mythread.h that makes GetTickCount64() declaration available, which is not good; doing it in private.h itself would be OK for me (although perhaps it could be moved out of private.h completely).  [1] https://msdn.microsoft.com/en-us/library/windows/desktop/ms724411%28v=vs.85%29.aspx   C99 and C11 don't allow implicit declarations, although for some unfortunate reason GCC and Clang only give a warning about them instead of an error even when in C99/C11 mode. XZ Utils doesn't compile with C89 compilers which limits the possible age of the compilers.  &lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2015-01-30T22:04:37</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/219\">     <title>Re: Fairly Complete MSVC 2013 Solution/Project</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/219</link>     <description>&lt;pre&gt;Hi Lasse,  A general note, the CMake implementation is a work in progress. It was tested with vs2013, nmake and ninja generators. It is very basic and at the very least lacks: * tests * testing on mingw/linux/osx * packaging. * gettext * doc generation.  There many warnings detected by VS which I'm not sure how to fix.   Also, Please see inline:  [GabiD] - I'll try my best to remedy this now that there is interest :)  [GabiD] - Yes - I'll fix that.  [GabiD] - It's a left over from some experiments in static analysis. I'll remove this.  [GabiD] - They silence a few warnings.  [GabiD] - They generate warnings. It's best to keep the definition and deceleration of a function identical.  I'll revert this is an interface change and there are other places where it's not fixed. On a side note, It's unclear to me why the interfaces are to be in C89 since the implementation requires it (mixing C runtimes in windows will caused failures).  [GabiD] - John Reiser answered this in length.  [GabiD] If it's that important I'll add an implementation for pre VS 14. . [GabiD] - Since they are identical, How about renaming getopt.in.h to getopt.h?  [GabiD] The ones in tree cannot be opened by VS 2013. Creating ones with CMakes eliminates the need to maintain a separate one for each utility.  You're welcome.    &lt;/pre&gt;</description>     <dc:creator>Gabi Davar</dc:creator>     <dc:date>2015-01-30T15:17:47</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/218\">     <title>Re: Fairly Complete MSVC 2013 Solution/Project</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/218</link>     <description>&lt;pre&gt;   [[snip]]   Please do not rely on transitive #include.  Retain the \"#include &amp;lt;windows.h&amp;gt;\" in mytime.c as long as anything in mytime.c relies on anything in &amp;lt;windows.h&amp;gt;, namely GetTickCount64().  The rule should be, \"If code in a file uses a symbol (name of function, variable, macro, typedef, struct, etc.) then the file must provide the appropriate declaration within the file itself, or via a specific #include which contains such a declaration directly.\"  Abiding by that rule makes it easier to read, understand, and maintain the code because each search for declaration will succeed with a #include depth of at most 1.  The rule makes the code more robust, because changes to the intermediate #includes (such as removing the transitive #include) cannot result in surprises.  Surprises are particularly likely with older compilers, where the omission of a function prototype might not be detected by default. Instead, the compiler silently uses the default prototype int func(...); which cannot detect type errors in arguments, and likely will cause bad code if any of the actual types is not 'int' or pointer.  &lt;/pre&gt;</description>     <dc:creator>John Reiser</dc:creator>     <dc:date>2015-01-28T20:50:04</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/217\">     <title>Re: Fairly Complete MSVC 2013 Solution/Project</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/217</link>     <description>&lt;pre&gt; Yes, I'm interested. This will need some work though. The changes need some explanation. Right now there is a single big commit with no information why something has been done.  A few thoughts:    - The .gitignore has wrong dir name (2012 vs. 2013).    - Adding __declspec(noreturn) breaks other compilers. How important     this change even is? Whatever optimizations it allows aren't     important in the places those functions get called. If it is to     silence a compiler warning, it can be considered but it's still not     that important.    - Are the casts added in tuklib_integer.h there to silence warnings?     If so, I'll add the casts.    - I don't want \"restrict\" keywords in the API headers. The headers     need to be C89 and C++98 compatible. There is nothing wrong having     the restricts only in the .c files. Maybe they were added to     silence warnings? The restricts aren't that important so maybe they     could even be removed, but I think the best is to leave those as is     unless MSVC cannot compile it at all now (maybe add a flag to MSVC     to omit that warning).    - Including &amp;lt;windows.h&amp;gt; in mytime.c shouldn't be needed because     private.h already does that.    - _snprintf isn't a safe replacement for C99 snprintf. Maybe it is     acceptable here since the buffers used in xz should be big enough,     but I have still liked using snprintf. (It's good to note that     snprintf is only needed for the command line tools, not liblzma.)    - I don't want to commit a second copy of getopt.h. Perhaps just make     windows/msvc2013/getopt.h #include \"../../lib/getopt.in.h\"?    - I don't have an opinion if it is useful to use CMake for this.     Note that there already are resource files so creating one with     CMake seems redundant. I don't know if the included resource files     can be used as is with MSVC though.  Thanks for your help.  &lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2015-01-28T19:03:50</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/216\">     <title>Fairly Complete MSVC 2013 Solution/Project</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/216</link>     <description>&lt;pre&gt;Hi,  I've created vs2013 based solution for lzma DLL, lzma static and most utils. It based on the works of Garen &amp;amp; M\\ufffd\\ufffdrti\\ufffd\\ufffd\\ufffd\\ufffd Mo\\ufffd\\ufffdeiko. It can be found at https://github.com/mindw/xz vs2013_520 branch.  The cmake branch has the build system ported to cmake (only for VS). It enabled me to build xz for Python 2.7 use. (Intel C++ Compiler targeted at VS2008).  Any interest?   -gabi   &lt;/pre&gt;</description>     <dc:creator>Gabi Davar</dc:creator>     <dc:date>2015-01-23T11:19:01</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/211\">     <title>Re: How to compress a folder with xz ?</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/211</link>     <description>&lt;pre&gt; Yes although you probably want to use new.tar.xz as the file name, not new.xz.  &lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2014-11-11T19:14:44</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/210\">     <title>Re: How to compress a folder with xz ?</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/210</link>     <description>&lt;pre&gt;Hi, Thansk. Is the following also good fo tar cfJ new.xz /etc  because:  file new.xz returns: new.xz: XZ compressed data  Regards, Kevin   On Tue, Nov 11, 2014 at 2:43 PM, Lasse Collin &amp;lt;lasse.collin-/AfLDCr7/tBAfugRpC6u6w&amp;lt; at &amp;gt;public.gmane.org&amp;gt; wrote:   &lt;/pre&gt;</description>     <dc:creator>Kevin Wilson</dc:creator>     <dc:date>2014-11-11T17:08:25</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/209\">     <title>Re: How to compress a folder with xz ?</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/209</link>     <description>&lt;pre&gt; Thanks. I fixed the link.   This list is fine for user questions too.   xz isn't an archiver, that is, it cannot pack multiple files into a single file. tar is an archiver but it isn't a compressor. To archive and compress, you can use tar and xz together:      tar cf - /etc | xz &amp;gt; etc.tar.xz  GNU tar and BSD tar can call xz themselves:      tar caf etc.tar.xz /etc  Maybe you have used .zip or .7z files. With such file formats the archiving, compression, and possibly also encryption are done by a single file format and tool. When using tar with gzip/bzip2/xz/whatever the tasks are done by separate file formats and tools.  &lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2014-11-11T12:43:47</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/208\">     <title>How to compress a folder with xz ?</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/208</link>     <description>&lt;pre&gt;Hi, all,  The forum webpage give an error. So I hope you will forgive me for sending to xz-devel, in the hope that someone may advice.  According to the man page of xz, it seems that xz folderName or xz folderName/ is enough. However, when running: xz /etc/ I get; xz: /etc/: Is a directory, skipping  I saw that it is possible with the tar command, with soem command options, but isn't it possible with xz ?  regards, Kevin   &lt;/pre&gt;</description>     <dc:creator>Kevin Wilson</dc:creator>     <dc:date>2014-11-09T18:24:07</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/207\">     <title>Optimizing lzma_memcmplen for non-x86 processors</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/207</link>     <description>&lt;pre&gt;XZ Utils 5.1.4beta got a speed optimization for buffer comparisons which improves encoding speed. It works on systems that support unaligned memory access. The relevant code is in src/liblzma/common/memcmplen.h:      http://git.tukaani.org/?p=xz.git;a=blob;f=src/liblzma/common/memcmplen.h  Different architectures get the best performance with different code. The code should be decent for x86-64 and maybe also for 32-bit x86 (at least the SSE2 version). Those may still have some room left for improvement and help is welcome to improve them. However, no one has looked at how the code could be improved for non-x86 archs, so I'm especially interested in finding people to help with that.  I have heard that the generic versions work on little endian 32-bit ARM and 32-bit big endian PowerPC. On those the generic code is slightly faster than the byte-by-byte buffer comparison, but perhaps arch-specific code could do better. The method used for x86-64 could be good for other 64-bit CPUs too if __builtin_ctzll maps to a fast instruction.  Timing the speed of \"xz -e\" when compressing a fairly compressible file (many source code tarballs are such) is a good way to test different lzma_memcmplen implementations. The reason for using -e is that the relative improvement tends to be bigger when that option is used. On x86-64 I've seen even 25 % faster compression with some files compared to the byte-by-byte method.  &lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2014-10-13T19:28:10</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/206\">     <title>XZ Utils 5.0.7</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/206</link>     <description>&lt;pre&gt;XZ Utils 5.0.7 is available at &amp;lt;http://tukaani.org/xz/&amp;gt;. Here is an  extract from the NEWS file:      * Fix regressions introduced in 5.0.6:          - Fix building with non-GNU make.          - Fix invalid Libs.private value in liblzma.pc which broke           static linking against liblzma if the linker flags were           taken from pkg-config.  &lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2014-09-20T18:04:06</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/205\">     <title>XZ Utils 5.0.6 and 5.1.4beta</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/205</link>     <description>&lt;pre&gt;XZ Utils 5.0.6 and 5.1.4beta are available at &amp;lt;http://tukaani.org/xz/&amp;gt;. Here is an extract from the NEWS file:  5.0.6 (2014-09-14)      * xzgrep now exits with status 0 if at least one file matched.      * A few minor portability and build system fixes  5.1.4beta (2014-09-14)      * All fixes from 5.0.6      * liblzma: Fixed the use of presets in threaded encoder       initialization.      * xz --block-list and --block-size can now be used together       in single-threaded mode. Previously the combination only       worked in multi-threaded mode.      * Added support for LZMA_IGNORE_CHECK to liblzma and made it       available in xz as --ignore-check.      * liblzma speed optimizations:          - Initialization of a new LZMA1 or LZMA2 encoder has been           optimized. (The speed of reinitializing an already-allocated           encoder isn't affected.) This helps when compressing many           small buffers with lzma_stream_buffer_encode() and other           similar situations where an already-allocated encoder state           isn't reused. This speed-up is visible in xz too if one           compresses many small files one at a time instead running xz           once and giving all files as command-line arguments.          - Buffer comparisons are now much faster when unaligned access           is allowed (configured with --enable-unaligned-access). This           speeds up encoding significantly. There is arch-specific code           for 32-bit and 64-bit x86 (32-bit needs SSE2 for the best           results and there's no run-time CPU detection for now).           For other archs there is only generic code which probably           isn't as optimal as arch-specific solutions could be.          - A few speed optimizations were made to the SHA-256 code.           (Note that the builtin SHA-256 code isn't used on all           operating systems.)      * liblzma can now be built with MSVC 2013 update 2 or later       using windows/config.h.      * Vietnamese translation was added.  &lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2014-09-14T19:46:01</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/204\">     <title>Re: Disabling CRC/SHA-256 checks on decompression</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/204</link>     <description>&lt;pre&gt; Done. I don't have any plans about a new release of XZ for Java yet, but if one is needed for this feature, let me know and I'll do it next week.  &lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2014-08-14T19:47:49</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/203\">     <title>Re: Disabling CRC/SHA-256 checks on decompression</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/203</link>     <description>&lt;pre&gt; Probably. I try to look at it next week.  &lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2014-08-08T17:39:01</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/202\">     <title>Re: Disabling CRC/SHA-256 checks on decompression</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/202</link>     <description>&lt;pre&gt; Nice, thanks!  Could you add something similar to the xz-java as well?  &lt;/pre&gt;</description>     <dc:creator>Florian Weimer</dc:creator>     <dc:date>2014-08-05T20:40:20</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/201\">     <title>Re: Disabling CRC/SHA-256 checks on decompression</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/201</link>     <description>&lt;pre&gt; This feature is available in xz.git now.  &lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2014-08-05T19:36:18</dc:date>   </item>   <item rdf:about=\"http://permalink.gmane.org/gmane.comp.compression.xz.devel/200\">     <title>Re: Disabling CRC/SHA-256 checks on decompression</title>     <link>http://permalink.gmane.org/gmane.comp.compression.xz.devel/200</link>     <description>&lt;pre&gt; I think so. I will look at this relatively soon since it shouldn't be hard to implement.  &lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2014-08-03T17:26:06</dc:date>   </item>   <textinput rdf:about=\"http://search.gmane.org/?group=$group=gmane.comp.compression.xz.devel\">     <title>Search Engine</title>     <description>Search the mailing list at Gmane</description>     <name>query</name>     <link>http://search.gmane.org/?group=$group=gmane.comp.compression.xz.devel</link>   </textinput> </rdf:RDF> ", 
    "identity": {
        "subtype": "dataset", 
        "is_error": false, 
        "version": "", 
        "protocol": "RDF", 
        "language": "", 
        "service": "", 
        "has_dataset": false, 
        "has_metadata": false
    }, 
    "digest": "409539800ea2c0e60c0a5508dff63a5a", 
    "source_url": "http://rss.gmane.org/messages/complete/gmane.comp.compression.xz.devel"
}