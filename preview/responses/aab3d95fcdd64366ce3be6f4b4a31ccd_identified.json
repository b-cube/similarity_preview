{
    "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><?rfc linefile=\"1:xml/complete/rfc2011.xml\"?> <!-- automatically generated by xml2rfc v1.36 on 2012-11-19T22:05:16Z --> <!DOCTYPE rfc SYSTEM \"rfc2629.dtd\"> <?rfc toc=\"yes\"?>  <!--      ASCII to XML transformation by Invisible Worlds, Inc.      http://invisible.net/      Last transformation: 03-Feb-1999, 02:08:01       Cannonical version of this document is at:      http://info.internet.isi.edu/in-notes/rfc/files/rfc2011.txt       Implementors should verify all content with      cannonical version.  Failure to do so may result in      protocol failures. -->  <rfc number=\"2011\"      category=\"std\"      updates=\"1213\"> <front> <title abbrev=\"IP MIB\">SNMPv2 Management Information Base for the Internet Protocol using SMIv2</title> <author initials=\"K.\" surname=\"McCloghrie\" fullname=\"Keith McCloghrie\"> <organization>Cisco Systems, Inc.</organization> <address> <postal> <street>170 West Tasman Drive</street> <street>San Jose</street> <street>CA  95134-1706</street> <country>US</country> </postal> <phone>+1 408 526 5260</phone> <email>kzm@cisco.com</email> </address> </author> <date month=\"November\" year=\"1996\"/> <area>Management</area> <area>Internet</area> <keyword>Management Information Base</keyword> <keyword>internet control message protocol</keyword> <keyword>simple network management protocol version 2</keyword> <keyword>structure of management information version 2</keyword> <note title=\"IESG Note\"> <t>    The IP, UDP, and TCP MIB modules currently support only IPv4.  These    three modules use the IpAddress type defined as an OCTET STRING of    length 4 to represent the IPv4 32-bit internet addresses.  (See RFC    1902, SMI for SNMPv2.)  They do not support the new 128-bit IPv6    internet addresses. </t> </note> </front> <middle> <!-- RFC original section: (1.) --> <section title=\"Introduction\"> <t>    A management system contains: several (potentially many) nodes, each    with a processing entity, termed an agent, which has access to    management instrumentation; at least one management station; and, a    management protocol, used to convey management information between    the agents and management stations.  Operations of the protocol are    carried out under an administrative framework which defines    authentication, authorization, access control, and privacy policies. </t> <t>    Management stations execute management applications which monitor and    control managed elements.  Managed elements are devices such as    hosts, routers, terminal servers, etc., which are monitored and    controlled via access to their management information. </t> <t>    Management information is viewed as a collection of managed objects,    residing in a virtual information store, termed the Management    Information Base (MIB).  Collections of related objects are defined    in MIB modules.  These modules are written using a subset of OSI&apos;s    Abstract Syntax Notation One (ASN.1) <xref target=\"_XREF_1\"/>, termed the Structure of    Management Information (SMI) <xref target=\"_XREF_2\"/>. </t> <t>    This document is the MIB module which defines managed objects for    managing implementations of the Internet Protocol (IP) <xref target=\"_XREF_3\"/> and its    associated Internet Control Message Protocol (ICMP) <xref target=\"_XREF_4\"/>. </t> <t>    The managed objects in this MIB module were originally defined using    the SNMPv1 framework as a part of MIB-II <xref target=\"_XREF_5\"/>.  Since then, the    managed objects related to managing routes in an IP internet were    updated by RFC 1354 [6].  This document takes the remaining MIB-II    objects for these protocols, and defines them using the SNMPv2    framework. </t> </section> <!-- RFC original section: (2.) --> <section title=\"Definitions\"> <figure><artwork> IP-MIB DEFINITIONS ::= BEGIN   IMPORTS     MODULE-IDENTITY, OBJECT-TYPE, Integer32,     Counter32, IpAddress, mib-2        FROM SNMPv2-SMI     PhysAddress                        FROM SNMPv2-TC     MODULE-COMPLIANCE, OBJECT-GROUP    FROM SNMPv2-CONF;   ipMIB MODULE-IDENTITY     LAST-UPDATED &quot;9411010000Z&quot;     ORGANIZATION &quot;IETF SNMPv2 Working Group&quot;     CONTACT-INFO             &quot;        Keith McCloghrie                Postal: Cisco Systems, Inc.                      170 West Tasman Drive                      San Jose, CA  95134-1706                      US                Phone:  +1 408 526 5260              Email:  kzm@cisco.com&quot;       DESCRIPTION             &quot;The MIB module for managing IP and ICMP implementations,             but excluding their management of IP routes.&quot;     REVISION      &quot;9103310000Z&quot;     DESCRIPTION             &quot;The initial revision of this MIB module was part of MIB-             II.&quot;     ::= { mib-2 48}   -- the IP group   ip       OBJECT IDENTIFIER ::= { mib-2 4 }   ipForwarding OBJECT-TYPE     SYNTAX      INTEGER {                     forwarding(1),    -- acting as a router                     notForwarding(2)  -- NOT acting as a router                 }     MAX-ACCESS  read-write     STATUS      current     DESCRIPTION             &quot;The indication of whether this entity is acting as an IP             router in respect to the forwarding of datagrams received             by, but not addressed to, this entity.  IP routers forward             datagrams.  IP hosts do not (except those source-routed via             the host).&quot;     ::= { ip 1 }   ipDefaultTTL OBJECT-TYPE     SYNTAX      INTEGER (1..255)     MAX-ACCESS  read-write     STATUS      current     DESCRIPTION             &quot;The default value inserted into the Time-To-Live field of             the IP header of datagrams originated at this entity,             whenever a TTL value is not supplied by the transport layer             protocol.&quot;     ::= { ip 2 }   ipInReceives OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The total number of input datagrams received from             interfaces, including those received in error.&quot;     ::= { ip 3 }   ipInHdrErrors OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of input datagrams discarded due to errors in             their IP headers, including bad checksums, version number             mismatch, other format errors, time-to-live exceeded, errors             discovered in processing their IP options, etc.&quot;     ::= { ip 4 }   ipInAddrErrors OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of input datagrams discarded because the IP             address in their IP header&apos;s destination field was not a             valid address to be received at this entity.  This count             includes invalid addresses (e.g., 0.0.0.0) and addresses of             unsupported Classes (e.g., Class E).  For entities which are             not IP routers and therefore do not forward datagrams, this             counter includes datagrams discarded because the destination             address was not a local address.&quot;     ::= { ip 5 }   ipForwDatagrams OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of input datagrams for which this entity was not             their final IP destination, as a result of which an attempt             was made to find a route to forward them to that final             destination.  In entities which do not act as IP routers,             this counter will include only those packets which were             Source-Routed via this entity, and the Source-Route option             processing was successful.&quot;     ::= { ip 6 }   ipInUnknownProtos OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of locally-addressed datagrams received             successfully but discarded because of an unknown or             unsupported protocol.&quot;       ::= { ip 7 }   ipInDiscards OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of input IP datagrams for which no problems were             encountered to prevent their continued processing, but which             were discarded (e.g., for lack of buffer space).  Note that             this counter does not include any datagrams discarded while             awaiting re-assembly.&quot;     ::= { ip 8 }   ipInDelivers OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The total number of input datagrams successfully delivered             to IP user-protocols (including ICMP).&quot;     ::= { ip 9 }   ipOutRequests OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The total number of IP datagrams which local IP user-             protocols (including ICMP) supplied to IP in requests for             transmission.  Note that this counter does not include any             datagrams counted in ipForwDatagrams.&quot;     ::= { ip 10 }   ipOutDiscards OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of output IP datagrams for which no problem was             encountered to prevent their transmission to their             destination, but which were discarded (e.g., for lack of             buffer space).  Note that this counter would include             datagrams counted in ipForwDatagrams if any such packets met             this (discretionary) discard criterion.&quot;     ::= { ip 11 }   ipOutNoRoutes OBJECT-TYPE       SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of IP datagrams discarded because no route could             be found to transmit them to their destination.  Note that             this counter includes any packets counted in ipForwDatagrams             which meet this `no-route&apos; criterion.  Note that this             includes any datagrams which a host cannot route because all             of its default routers are down.&quot;     ::= { ip 12 }   ipReasmTimeout OBJECT-TYPE     SYNTAX      Integer32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The maximum number of seconds which received fragments are             held while they are awaiting reassembly at this entity.&quot;     ::= { ip 13 }   ipReasmReqds OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of IP fragments received which needed to be             reassembled at this entity.&quot;     ::= { ip 14 }   ipReasmOKs OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of IP datagrams successfully re-assembled.&quot;     ::= { ip 15 }   ipReasmFails OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of failures detected by the IP re-assembly             algorithm (for whatever reason: timed out, errors, etc).             Note that this is not necessarily a count of discarded IP             fragments since some algorithms (notably the algorithm in             RFC 815) can lose track of the number of fragments by               combining them as they are received.&quot;     ::= { ip 16 }   ipFragOKs OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of IP datagrams that have been successfully             fragmented at this entity.&quot;     ::= { ip 17 }   ipFragFails OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of IP datagrams that have been discarded because             they needed to be fragmented at this entity but could not             be, e.g., because their Don&apos;t Fragment flag was set.&quot;     ::= { ip 18 }   ipFragCreates OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of IP datagram fragments that have been             generated as a result of fragmentation at this entity.&quot;     ::= { ip 19 }   -- the IP address table   ipAddrTable OBJECT-TYPE     SYNTAX      SEQUENCE OF IpAddrEntry     MAX-ACCESS  not-accessible     STATUS      current     DESCRIPTION             &quot;The table of addressing information relevant to this             entity&apos;s IP addresses.&quot;     ::= { ip 20 }   ipAddrEntry OBJECT-TYPE     SYNTAX      IpAddrEntry     MAX-ACCESS  not-accessible     STATUS      current     DESCRIPTION             &quot;The addressing information for one of this entity&apos;s IP               addresses.&quot;     INDEX      { ipAdEntAddr }     ::= { ipAddrTable 1 }   IpAddrEntry ::= SEQUENCE {         ipAdEntAddr          IpAddress,         ipAdEntIfIndex       INTEGER,         ipAdEntNetMask       IpAddress,         ipAdEntBcastAddr     INTEGER,         ipAdEntReasmMaxSize  INTEGER     }   ipAdEntAddr OBJECT-TYPE     SYNTAX      IpAddress     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The IP address to which this entry&apos;s addressing information             pertains.&quot;     ::= { ipAddrEntry 1 }   ipAdEntIfIndex OBJECT-TYPE     SYNTAX      INTEGER (1..2147483647)     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The index value which uniquely identifies the interface to             which this entry is applicable.  The interface identified by             a particular value of this index is the same interface as             identified by the same value of RFC 1573&apos;s ifIndex.&quot;     ::= { ipAddrEntry 2 }   ipAdEntNetMask OBJECT-TYPE     SYNTAX      IpAddress     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The subnet mask associated with the IP address of this             entry.  The value of the mask is an IP address with all the             network bits set to 1 and all the hosts bits set to 0.&quot;     ::= { ipAddrEntry 3 }   ipAdEntBcastAddr OBJECT-TYPE     SYNTAX      INTEGER (0..1)     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The value of the least-significant bit in the IP broadcast               address used for sending datagrams on the (logical)             interface associated with the IP address of this entry.  For             example, when the Internet standard all-ones broadcast             address is used, the value will be 1.  This value applies to             both the subnet and network broadcasts addresses used by the             entity on this (logical) interface.&quot;     ::= { ipAddrEntry 4 }   ipAdEntReasmMaxSize OBJECT-TYPE     SYNTAX      INTEGER (0..65535)     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The size of the largest IP datagram which this entity can             re-assemble from incoming IP fragmented datagrams received             on this interface.&quot;     ::= { ipAddrEntry 5 }   -- ipRouteTable  ::=   { ip 21 }        obsolete   -- the IP Address Translation table   -- The Address Translation tables contain the IpAddress to -- &quot;physical&quot; address equivalences.  Some interfaces do not -- use translation tables for determining address -- equivalences (e.g., DDN-X.25 has an algorithmic method); -- if all interfaces are of this type, then the Address -- Translation table is empty, i.e., has zero entries.   ipNetToMediaTable OBJECT-TYPE     SYNTAX      SEQUENCE OF IpNetToMediaEntry     MAX-ACCESS  not-accessible     STATUS      current     DESCRIPTION             &quot;The IP Address Translation table used for mapping from IP             addresses to physical addresses.&quot;     ::= { ip 22 }   ipNetToMediaEntry OBJECT-TYPE     SYNTAX      IpNetToMediaEntry     MAX-ACCESS  not-accessible     STATUS      current     DESCRIPTION             &quot;Each entry contains one IpAddress to `physical&apos; address             equivalence.&quot;     INDEX       { ipNetToMediaIfIndex,                   ipNetToMediaNetAddress }       ::= { ipNetToMediaTable 1 }   IpNetToMediaEntry ::= SEQUENCE {         ipNetToMediaIfIndex      INTEGER,         ipNetToMediaPhysAddress  PhysAddress,         ipNetToMediaNetAddress   IpAddress,         ipNetToMediaType         INTEGER     }   ipNetToMediaIfIndex OBJECT-TYPE     SYNTAX      INTEGER (1..2147483647)     MAX-ACCESS  read-create     STATUS      current     DESCRIPTION             &quot;The interface on which this entry&apos;s equivalence is             effective.  The interface identified by a particular value             of this index is the same interface as identified by the             same value of RFC 1573&apos;s ifIndex.&quot;     ::= { ipNetToMediaEntry 1 }   ipNetToMediaPhysAddress OBJECT-TYPE     SYNTAX      PhysAddress     MAX-ACCESS  read-create     STATUS      current     DESCRIPTION             &quot;The media-dependent `physical&apos; address.&quot;     ::= { ipNetToMediaEntry 2 }   ipNetToMediaNetAddress OBJECT-TYPE     SYNTAX      IpAddress     MAX-ACCESS  read-create     STATUS      current     DESCRIPTION             &quot;The IpAddress corresponding to the media-dependent             `physical&apos; address.&quot;     ::= { ipNetToMediaEntry 3 }   ipNetToMediaType OBJECT-TYPE     SYNTAX      INTEGER {                 other(1),        -- none of the following                 invalid(2),      -- an invalidated mapping                 dynamic(3),                 static(4)             }     MAX-ACCESS  read-create     STATUS      current     DESCRIPTION             &quot;The type of mapping.               Setting this object to the value invalid(2) has the effect             of invalidating the corresponding entry in the             ipNetToMediaTable.  That is, it effectively disassociates             the interface identified with said entry from the mapping             identified with said entry.  It is an implementation-             specific matter as to whether the agent removes an             invalidated entry from the table.  Accordingly, management             stations must be prepared to receive tabular information             from agents that corresponds to entries not currently in             use.  Proper interpretation of such entries requires             examination of the relevant ipNetToMediaType object.&quot;     ::= { ipNetToMediaEntry 4 }   ipRoutingDiscards OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of routing entries which were chosen to be             discarded even though they are valid.  One possible reason             for discarding such an entry could be to free-up buffer             space for other routing entries.&quot;     ::= { ip 23 }   -- the ICMP group   icmp     OBJECT IDENTIFIER ::= { mib-2 5 }   icmpInMsgs OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The total number of ICMP messages which the entity             received.  Note that this counter includes all those counted             by icmpInErrors.&quot;     ::= { icmp 1 }   icmpInErrors OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP messages which the entity received but             determined as having ICMP-specific errors (bad ICMP             checksums, bad length, etc.).&quot;     ::= { icmp 2 }   icmpInDestUnreachs OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Destination Unreachable messages             received.&quot;     ::= { icmp 3 }   icmpInTimeExcds OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Time Exceeded messages received.&quot;     ::= { icmp 4 }   icmpInParmProbs OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Parameter Problem messages received.&quot;     ::= { icmp 5 }   icmpInSrcQuenchs OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Source Quench messages received.&quot;     ::= { icmp 6 }   icmpInRedirects OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Redirect messages received.&quot;     ::= { icmp 7 }   icmpInEchos OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Echo (request) messages received.&quot;     ::= { icmp 8 }   icmpInEchoReps OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Echo Reply messages received.&quot;     ::= { icmp 9 }   icmpInTimestamps OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Timestamp (request) messages received.&quot;     ::= { icmp 10 }   icmpInTimestampReps OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Timestamp Reply messages received.&quot;     ::= { icmp 11 }   icmpInAddrMasks OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Address Mask Request messages received.&quot;     ::= { icmp 12 }   icmpInAddrMaskReps OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Address Mask Reply messages received.&quot;     ::= { icmp 13 }   icmpOutMsgs OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The total number of ICMP messages which this entity             attempted to send.  Note that this counter includes all             those counted by icmpOutErrors.&quot;       ::= { icmp 14 }   icmpOutErrors OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP messages which this entity did not send             due to problems discovered within ICMP such as a lack of             buffers.  This value should not include errors discovered             outside the ICMP layer such as the inability of IP to route             the resultant datagram.  In some implementations there may             be no types of error which contribute to this counter&apos;s             value.&quot;     ::= { icmp 15 }   icmpOutDestUnreachs OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Destination Unreachable messages sent.&quot;     ::= { icmp 16 }   icmpOutTimeExcds OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Time Exceeded messages sent.&quot;     ::= { icmp 17 }   icmpOutParmProbs OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Parameter Problem messages sent.&quot;     ::= { icmp 18 }   icmpOutSrcQuenchs OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Source Quench messages sent.&quot;     ::= { icmp 19 }   icmpOutRedirects OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Redirect messages sent.  For a host,             this object will always be zero, since hosts do not send             redirects.&quot;     ::= { icmp 20 }   icmpOutEchos OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Echo (request) messages sent.&quot;     ::= { icmp 21 }   icmpOutEchoReps OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Echo Reply messages sent.&quot;     ::= { icmp 22 }   icmpOutTimestamps OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Timestamp (request) messages sent.&quot;     ::= { icmp 23 }   icmpOutTimestampReps OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Timestamp Reply messages sent.&quot;     ::= { icmp 24 }   icmpOutAddrMasks OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Address Mask Request messages sent.&quot;       ::= { icmp 25 }   icmpOutAddrMaskReps OBJECT-TYPE     SYNTAX      Counter32     MAX-ACCESS  read-only     STATUS      current     DESCRIPTION             &quot;The number of ICMP Address Mask Reply messages sent.&quot;     ::= { icmp 26 }   -- conformance information   ipMIBConformance OBJECT IDENTIFIER ::= { ipMIB 2 }   ipMIBCompliances OBJECT IDENTIFIER ::= { ipMIBConformance 1 } ipMIBGroups      OBJECT IDENTIFIER ::= { ipMIBConformance 2 }   -- compliance statements   ipMIBCompliance MODULE-COMPLIANCE     STATUS  current     DESCRIPTION             &quot;The compliance statement for SNMPv2 entities which             implement IP.&quot;     MODULE  -- this module         MANDATORY-GROUPS { ipGroup,                            icmpGroup }     ::= { ipMIBCompliances 1 }   -- units of conformance   ipGroup OBJECT-GROUP     OBJECTS   { ipForwarding, ipDefaultTTL, ipInReceives,                 ipInHdrErrors, ipInAddrErrors,                 ipForwDatagrams, ipInUnknownProtos,                 ipInDiscards, ipInDelivers, ipOutRequests,                 ipOutDiscards, ipOutNoRoutes,                 ipReasmTimeout, ipReasmReqds, ipReasmOKs,                 ipReasmFails, ipFragOKs,                 ipFragFails, ipFragCreates,                 ipAdEntAddr, ipAdEntIfIndex, ipAdEntNetMask,                 ipAdEntBcastAddr, ipAdEntReasmMaxSize,                 ipNetToMediaIfIndex, ipNetToMediaPhysAddress,                 ipNetToMediaNetAddress, ipNetToMediaType,                 ipRoutingDiscards }     STATUS    current     DESCRIPTION               &quot;The ip group of objects providing for basic management of             IP entities, exclusive of the management of IP routes.&quot;     ::= { ipMIBGroups 1 }   icmpGroup OBJECT-GROUP     OBJECTS   { icmpInMsgs, icmpInErrors,                 icmpInDestUnreachs, icmpInTimeExcds,                 icmpInParmProbs, icmpInSrcQuenchs,                 icmpInRedirects, icmpInEchos,                 icmpInEchoReps, icmpInTimestamps,                 icmpInTimestampReps, icmpInAddrMasks,                 icmpInAddrMaskReps, icmpOutMsgs,                 icmpOutErrors, icmpOutDestUnreachs,                 icmpOutTimeExcds, icmpOutParmProbs,                 icmpOutSrcQuenchs, icmpOutRedirects,                 icmpOutEchos, icmpOutEchoReps,                 icmpOutTimestamps, icmpOutTimestampReps,                 icmpOutAddrMasks, icmpOutAddrMaskReps }     STATUS    current     DESCRIPTION             &quot;The icmp group of objects providing ICMP statistics.&quot;     ::= { ipMIBGroups 2 }   END </artwork></figure> </section> <!-- RFC original section: (3.) --> <section title=\"Acknowledgements\"> <t>    This document contains a modified subset of RFC 1213. </t> </section> <!-- RFC original section: (4.) --> <section title=\"References (BOILERPLATE)\"> <t> This RFC contained boilerplate in this section which has been moved to the RFC2223-compliant unnumbered section &quot;References.&quot; </t> </section> <!-- RFC original section: (5.) --> <section title=\"Security Considerations\"> <t>    Security issues are not discussed in this memo. </t> </section> <!-- RFC original section: (6.) --> <section title=\"Editor&apos;s Address (BOILERPLATE)\"> <t> This RFC contained boilerplate in this section which has been moved to the RFC2223-compliant unnumbered section &quot;Author&apos;s Address.&quot; </t> </section> </middle> <back> <!-- BEGIN INCLUDE REFERENCES ** DO NOT REMOVE --> <references> <reference anchor=\"_XREF_1\"> <front> <title abbrev=\"Information processing systems - Open Systems\">Information processing systems - Open Systems Interconnection -Specification of Abstract Syntax Notation One (ASN.1), International Organization for Standardization.  International Standard 8824</title> <author> <organization/> </author> <date month=\"December\" year=\"1987\"/> </front> </reference> <reference anchor=\"_XREF_2\"> <front> <title abbrev=\"Structure of Management Information\">Structure of Management Information for version 2 of the Simple Network Management Protocol (SNMPv2,  Cisco Systems</title> <author initials=\"K.\" surname=\"McCloghrie\" fullname=\"K. McCloghrie\"> <organization/> </author> <date month=\"January\" year=\"1996\"/> </front> <seriesInfo>RFC 1902</seriesInfo> </reference> <reference anchor=\"_XREF_3\"> <front> <title abbrev=\"Internet Protocol - DARPA Internet\">Internet Protocol - DARPA Internet Program Protocol Specification,  DARPA</title> <author initials=\"J.\" surname=\"Postel\" fullname=\"J. Postel\"> <organization/> </author> <date month=\"September\" year=\"1981\"/> </front> <seriesInfo>STD 5</seriesInfo> <seriesInfo>RFC 791</seriesInfo> </reference> <reference anchor=\"_XREF_4\"> <front> <title abbrev=\"Internet Control Message Protocol - DARPA\">Internet Control Message Protocol - DARPA Internet Program Protocol Specification,  USC/Information Sciences Institute</title> <author initials=\"J.\" surname=\"Postel\" fullname=\"J. Postel\"> <organization/> </author> <date month=\"September\" year=\"1981\"/> </front> <seriesInfo>STD 5</seriesInfo> <seriesInfo>RFC 792</seriesInfo> </reference> <reference anchor=\"_XREF_5\"> <front> <title abbrev=\"Management Information Base for Network\">Management Information Base for Network Management of TCP/IP-based internets: MIB-II</title> <author initials=\"K.\" surname=\"McCloghrie\" fullname=\"K. McCloghrie\"> <organization/> </author> <author initials=\"M.\" surname=\"Rose\" fullname=\"M. Rose\"> <organization/> </author> <date month=\"March\" year=\"1991\"/> </front> <seriesInfo>STD 17</seriesInfo> <seriesInfo>RFC 1213</seriesInfo> </reference> </references> <!-- END INCLUDE REFERENCES ** DO NOT REMOVE --> </back> </rfc> ", 
    "identity": {
        "subtype": "", 
        "is_error": false, 
        "version": "", 
        "protocol": "", 
        "language": "", 
        "service": "", 
        "has_dataset": false, 
        "has_metadata": false
    }, 
    "digest": "aab3d95fcdd64366ce3be6f4b4a31ccd", 
    "source_url": "http://xml2rfc.tools.ietf.org/public/rfc/xml/rfc2011.xml"
}