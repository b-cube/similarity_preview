{
    "content": "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\" ?> <feed xmlns=\"http://www.w3.org/2005/Atom\">   <title>Planet TurboGears</title>  <link rel=\"self\" href=\"http://planet.turbogears.org/atom.xml\"/>  <link href=\"http://planet.turbogears.org/\"/>  <id>http://planet.turbogears.org/atom.xml</id>  <updated>2015-03-20T04:00:16+00:00</updated>  <generator uri=\"http://www.planetplanet.org/\">Planet/2.0 +http://www.planetplanet.org</generator>   <entry xml:lang=\"de-DE\">   <title type=\"html\">EuroPython training checklist</title>   <link href=\"http://blog.chrisarndt.de/article/806\"/>   <id>http://blog.chrisarndt.de/?p=806</id>   <updated>2014-07-22T14:01:49+00:00</updated>   <content type=\"html\">Here&amp;#8217;s a checklist for participants of my training session Interactive experiments in sound synthesis with Nsound, numpy and matplotlib at EuroPython 2014 in Berlin. Have/bring a laptop with Linux (preferred), Windows, or OS X and good headphones. An external audio interface may help with audio performance but is not essential. Download and install my virtual [&amp;#8230;]</content>   <author>    <name>Christpher Arndt</name>    <uri>http://blog.chrisarndt.de</uri>   </author>   <source>    <title type=\"html\">Christopher Arndt</title>    <subtitle type=\"html\">Life of my Brain</subtitle>    <link rel=\"self\" href=\"http://blog.chrisarndt.de/feed\"/>    <id>http://blog.chrisarndt.de/feed</id>    <updated>2015-02-13T12:00:15+00:00</updated>   </source>  </entry>   <entry xml:lang=\"de-DE\">   <title type=\"html\">Setting up a virtualenv for IPython and Nsound</title>   <link href=\"http://blog.chrisarndt.de/article/807\"/>   <id>http://blog.chrisarndt.de/?p=807</id>   <updated>2014-07-22T14:00:52+00:00</updated>   <content type=\"html\">These instructions detail how to create a working environment for participants of my training session Interactive experiments in sound synthesis with Nsound, numpy and matplotlib at EuroPython 2014 in Berlin who do not want to or cannot use the virtual machine appliance I created for the course. These instructions are geared to Linux users, though [&amp;#8230;]</content>   <author>    <name>Christpher Arndt</name>    <uri>http://blog.chrisarndt.de</uri>   </author>   <source>    <title type=\"html\">Christopher Arndt</title>    <subtitle type=\"html\">Life of my Brain</subtitle>    <link rel=\"self\" href=\"http://blog.chrisarndt.de/feed\"/>    <id>http://blog.chrisarndt.de/feed</id>    <updated>2015-02-13T12:00:15+00:00</updated>   </source>  </entry>   <entry xml:lang=\"de-DE\">   <title type=\"html\">Virtual machine for my EuroPython 2014 sound experimentation training</title>   <link href=\"http://blog.chrisarndt.de/article/796\"/>   <id>http://blog.chrisarndt.de/?p=796</id>   <updated>2014-07-19T17:49:33+00:00</updated>   <content type=\"html\">I have created a virtual machine for virtualbox for the participants of my training session\\ufffd\\ufffdInteractive experiments in sound synthesis with Nsound, numpy and matplotlib at EuroPython 2014 in Berlin. It provides a ready to run Manjaro Linux System with an XFCE desktop and all the software necessary to follow the course. Update (2014-07-22): if you [&amp;#8230;]</content>   <author>    <name>Christpher Arndt</name>    <uri>http://blog.chrisarndt.de</uri>   </author>   <source>    <title type=\"html\">Christopher Arndt</title>    <subtitle type=\"html\">Life of my Brain</subtitle>    <link rel=\"self\" href=\"http://blog.chrisarndt.de/feed\"/>    <id>http://blog.chrisarndt.de/feed</id>    <updated>2015-02-13T12:00:15+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">Announcing the pyramid_assetmutator package</title>   <link href=\"http://blog.curiasolutions.com/announcing-the-pyramid_assetmutator-package.html\"/>   <id>tag:blog.curiasolutions.com,2014-04-19:announcing-the-pyramid_assetmutator-package.html</id>   <updated>2014-04-20T01:07:00+00:00</updated>   <content type=\"html\">&lt;p&gt;If you're like me, one of the first things you do when starting a new web application project is set up a CSS alternative such as LESS or SASS/SCSS. Those who aren't particularly fond of JavaScript might also tend to add CoffeeScript. These &amp;quot;metalanguages&amp;quot; can assist in making client-side/asset code more pleasurable to work with, as they typically provide functionality that's &amp;quot;missing&amp;quot; in the the languages they get interpreted into.&lt;/p&gt; &lt;p&gt;Some frameworks (e.g. Ruby on Rails) give you support for these alternatives out-of-the-box, but in the land of less opinionated software things can require a bit more work. Since I am personally a fan of the &lt;a class=&quot;reference external&quot; href=&quot;http://docs.pylonsproject.org/en/latest/docs/pyramid.html&quot;&gt;Pyramid&lt;/a&gt; web framework, I've used the &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/sontek/pyramid_webassets&quot;&gt;pyramid_webassets&lt;/a&gt; and&amp;nbsp;&lt;a class=&quot;reference external&quot; href=&quot;https://github.com/FormAlchemy/pyramid_fanstatic&quot;&gt;pyramid_fanstatic&lt;/a&gt; packages in the past to provide this support. However, these packages are so powerful and comprehensive that they can also tend to be somewhat involved in regards to configuration, so I&amp;nbsp;recently&amp;nbsp;decided to roll my own Pyramid add-on:&amp;nbsp;&lt;a class=&quot;reference external&quot; href=&quot;http://pyramid_assetmutator.readthedocs.org/&quot;&gt;pyramid_assetmutator&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Although definitely not as &amp;quot;feature-full&amp;quot; as the packages I have mentioned earlier, as of this writing&amp;nbsp;it&amp;nbsp;provides the following:&lt;/p&gt; &lt;ul class=&quot;simple&quot;&gt; &lt;li&gt;Support for piping (a.k.a &amp;quot;mutating&amp;quot;) assets through pretty much any command you like (its core functionality is quite rudimentary).&lt;/li&gt; &lt;li&gt;The ability to specify whether to have your assets &amp;quot;mutated&amp;quot; during each request, or on each &amp;quot;application boot&amp;quot;&amp;nbsp;(typically best for prod setups).&lt;/li&gt; &lt;li&gt;Partial support for template language parsing in your asset files (e.g. Mako or Jinja2 template tags in your JavaScript or CSS files).&lt;/li&gt; &lt;li&gt;A unified Python 2/3 codebase.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Feel free to &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/seedifferently/pyramid_assetmutator&quot;&gt;check it out on GitHub&lt;/a&gt; or &lt;a class=&quot;reference external&quot; href=&quot;http://pyramid_assetmutator.readthedocs.org/&quot;&gt;browse the documentation&lt;/a&gt;, and share here or open a GitHub issue if you have any comments or suggestions.&lt;/p&gt;</content>   <author>    <name>Curia</name>    <uri>http://blog.curiasolutions.com/</uri>   </author>   <source>    <title type=\"html\">Curia Blog</title>    <link rel=\"self\" href=\"http://blog.curiasolutions.com/feeds/all.rss.xml\"/>    <id>http://blog.curiasolutions.com/feeds/all.rss.xml</id>    <updated>2014-10-30T05:30:04+00:00</updated>   </source>  </entry>   <entry xml:lang=\"de-DE\">   <title type=\"html\">Select a Python code block in Geany with Lua</title>   <link href=\"http://blog.chrisarndt.de/article/784\"/>   <id>http://blog.chrisarndt.de/?p=784</id>   <updated>2014-04-03T23:09:54+00:00</updated>   <content type=\"html\">Here's a nifty little Lua script for the Geanylua plug-in for the Geany text editor to select a Python code block in Geany with Lua. When the script is activated, it will select the block corresponding to the current code folding level of the line the cursor is on in the active document. E.g. if you place the cursor in the body of a Python function on a line that is on the same indentation level as the first line of the body of the function, it will select the whole function. Also, if the cursor is on the opening line of a block, e.g. a line starting with class, def, if, etc., the script will select the block started by this line.</content>   <author>    <name>Christpher Arndt</name>    <uri>http://blog.chrisarndt.de</uri>   </author>   <source>    <title type=\"html\">Christopher Arndt</title>    <subtitle type=\"html\">Life of my Brain</subtitle>    <link rel=\"self\" href=\"http://blog.chrisarndt.de/feed\"/>    <id>http://blog.chrisarndt.de/feed</id>    <updated>2015-02-13T12:00:15+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">RIP hen #1</title>   <link href=\"http://feedproxy.google.com/~r/tplus1/wtPt/~3/umedBEx3zYU/\"/>   <id>http://blog.tplus1.com/?p=831</id>   <updated>2014-03-10T23:01:55+00:00</updated>   <content type=\"html\">&lt;p&gt;For two years now, I&amp;#8217;ve been letting my hens free range around in a fenced-in section in my back yard during the day.  They love it.&lt;/p&gt; &lt;p&gt;Went out to check for eggs today after work and found one of my girls had been killed in the coop.&lt;/p&gt; &lt;p&gt;Head bitten off.  No other signs of predation.  Internet forums say this was likely a possum or a raccoon.&lt;/p&gt; &lt;p&gt;Going to set up a live trap tonight.  And some wire snares.&lt;/p&gt; &lt;p&gt;I raised these girls since they were a day old.  Can&amp;#8217;t really remember the last time I was this angry and sad.&lt;/p&gt;</content>   <author>    <name>Matthew Wilson</name>    <uri>http://blog.tplus1.com</uri>   </author>   <source>    <title type=\"html\">t+1</title>    <subtitle type=\"html\">Programming, gardening, economics, life in Cleveland Heights</subtitle>    <link rel=\"self\" href=\"http://blog.tplus1.com/index.php/category/turbogears/feed/\"/>    <id>http://blog.tplus1.com/index.php/category/turbogears/feed/</id>    <updated>2014-12-03T21:00:23+00:00</updated>   </source>  </entry>   <entry xml:lang=\"de-DE\">   <title type=\"html\">Benjamins Schlaflied</title>   <link href=\"http://blog.chrisarndt.de/article/764\"/>   <id>http://blog.chrisarndt.de/?p=764</id>   <updated>2014-02-18T19:30:16+00:00</updated>   <content type=\"html\">Welcome, my Nephew Here is a little song I wrote for my nephew, who was born two weeks ago, to welcome him into this world and hopefully give him some comfort while he rests from the tiring all-day business of processing his mother&amp;#8217;s milk. It is thus called Benjamins Schlaflied (Benjamin&amp;#8217;s Lullaby) and I play [&amp;#8230;]</content>   <author>    <name>Christpher Arndt</name>    <uri>http://blog.chrisarndt.de</uri>   </author>   <source>    <title type=\"html\">Christopher Arndt</title>    <subtitle type=\"html\">Life of my Brain</subtitle>    <link rel=\"self\" href=\"http://blog.chrisarndt.de/feed\"/>    <id>http://blog.chrisarndt.de/feed</id>    <updated>2015-02-13T12:00:15+00:00</updated>   </source>  </entry>   <entry xml:lang=\"de-DE\">   <title type=\"html\">Get the gist of it</title>   <link href=\"http://blog.chrisarndt.de/article/750\"/>   <id>http://blog.chrisarndt.de/?p=750</id>   <updated>2014-02-11T19:43:07+00:00</updated>   <content type=\"html\">Some months ago I finally caught up with modern development practices and switched to Git for new software projects. Though I host my own projects &lt;a title=&quot;Repository browser for my software projects&quot; href=&quot;http://trac.chrisarndt.de/code/browser&quot; target=&quot;_blank&quot;&gt;on my own server&lt;/a&gt; with the help of Trac and gitosis, one thing I do like about GitHub though, are &lt;a href=&quot;https://gist.github.com/&quot; target=&quot;_blank&quot;&gt;Gists&lt;/a&gt;. Like many good ideas this one makes one wonder, why nobody came up with it before. It is also very easy to include Gists in your blog, which is what I'm starting with this post.  Recently, on the German mailing list of the &lt;a href=&quot;http://pycologne.de/&quot; target=&quot;_blank&quot;&gt;pyCologne&lt;/a&gt; User Group, someone was pointing out Python's poor performance at an implementation of the fibonacci series using recursion and showed some Scala code that profited from a few added type declarations. I showed that a similar performance gain could be achieved using &lt;a href=&quot;http://cython.org/&quot; target=&quot;_blank&quot;&gt;Cython&lt;/a&gt;, with very few changes to the original pure Python code. I created a small shell function to automate the process of compiling a Cython source file with the &lt;tt&gt;--embed&lt;/tt&gt; option and turning it it into a binary. The function then runs the resulting binary, so you can use this function to run a &lt;tt&gt;*.pyx&lt;/tt&gt; file directly. &lt;a href=&quot;http://blog.chrisarndt.de/article/750&quot;&gt;Read full article...&lt;/a&gt;</content>   <author>    <name>Christpher Arndt</name>    <uri>http://blog.chrisarndt.de</uri>   </author>   <source>    <title type=\"html\">Christopher Arndt</title>    <subtitle type=\"html\">Life of my Brain</subtitle>    <link rel=\"self\" href=\"http://blog.chrisarndt.de/feed\"/>    <id>http://blog.chrisarndt.de/feed</id>    <updated>2015-02-13T12:00:15+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">What\\ufffd\\ufffd\\ufffds good and bad about github issues</title>   <link href=\"http://feedproxy.google.com/~r/tplus1/wtPt/~3/iHDMQ9QywzU/\"/>   <id>http://blog.tplus1.com/?p=824</id>   <updated>2014-01-02T16:09:15+00:00</updated>   <content type=\"html\">&lt;p&gt;Ticketing / workflow / bugtracker systems are always nasty.  Github&amp;#8217;s is pretty good.  Maybe the best of what&amp;#8217;s out there.  But it ain&amp;#8217;t perfect.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s what I like:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;It&amp;#8217;s ready to go immediately once you start your github repo.&lt;/li&gt; &lt;li&gt;You can link a commit to an issue by mentioning the issue number in the commit.&lt;/li&gt; &lt;li&gt;Labels let you store a TON of metadata.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;And what I dislike:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;No obvious way to tell if somebody is actively working on an issue.  More generally, no &amp;#8220;status&amp;#8221; field exists on an issue.&lt;/li&gt; &lt;li&gt;No obvious way to do a query like &amp;#8220;label X or label Y&amp;#8221;.&lt;/li&gt; &lt;li&gt;No command-line interface.&lt;/li&gt; &lt;li&gt;Since github doesn&amp;#8217;t include a built-in mailing list, github issues often get used for support requests.  Then when somebody explains &amp;#8220;here&amp;#8217;s how to do &amp;#8230; &amp;#8220;, the issue gets closed, and that helpful expensive-to-write documentation is hidden away.  The solution here is for github to host a mailing list for every repository.&lt;/li&gt; &lt;/ul&gt;</content>   <author>    <name>Matthew Wilson</name>    <uri>http://blog.tplus1.com</uri>   </author>   <source>    <title type=\"html\">t+1</title>    <subtitle type=\"html\">Programming, gardening, economics, life in Cleveland Heights</subtitle>    <link rel=\"self\" href=\"http://blog.tplus1.com/index.php/category/turbogears/feed/\"/>    <id>http://blog.tplus1.com/index.php/category/turbogears/feed/</id>    <updated>2014-12-03T21:00:23+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">I really like my gardening boots</title>   <link href=\"http://feedproxy.google.com/~r/tplus1/wtPt/~3/gCteg31_tjg/\"/>   <id>http://blog.tplus1.com/?p=820</id>   <updated>2013-12-08T16:50:39+00:00</updated>   <content type=\"html\">&lt;p&gt;You don&amp;#8217;t need many tools to start gardening.  You can dig holes with a stick or a sharp rock.  You can start seeds in tin cans.  You can use all sorts of stuff to carry water.  You really only need dirt, sun, and seeds.  So don&amp;#8217;t run out and buy a bunch of stuff!&lt;/p&gt; &lt;p&gt;But when you realize you&amp;#8217;ve got the gardening bug bad, there&amp;#8217;s a few tools that really help.  First off, you need some rubber boots.  Otherwise, you&amp;#8217;re going to track mud everywhere.  That&amp;#8217;s going to make your significant other very annoyed!&lt;/p&gt; &lt;p&gt;I bought these boots in 2006.  They&amp;#8217;ve held up very well over the last seven years.  They&amp;#8217;re waterproof, thick enough to block thorns, easy to hose off, and the sole is thick enough that I can push on a shovel with them.&lt;/p&gt; &lt;p&gt;They&amp;#8217;re made here in Illinois, USA, by &lt;a href=&quot;http://www.bossgloves.com/&quot;&gt;Boss Manufacturing Company&lt;/a&gt;.  They&amp;#8217;ve been around since 1893!&lt;/p&gt; &lt;p&gt;You can order them on Amazon.  You can&amp;#8217;t order them direct from the company.  &lt;/p&gt; &lt;p&gt;Note: I will get some commission if you order the boots from the link below, so if you hate me, you should not click on that link.&lt;/p&gt; &lt;p&gt;&lt;/p&gt;</content>   <author>    <name>Matthew Wilson</name>    <uri>http://blog.tplus1.com</uri>   </author>   <source>    <title type=\"html\">t+1</title>    <subtitle type=\"html\">Programming, gardening, economics, life in Cleveland Heights</subtitle>    <link rel=\"self\" href=\"http://blog.tplus1.com/index.php/category/turbogears/feed/\"/>    <id>http://blog.tplus1.com/index.php/category/turbogears/feed/</id>    <updated>2014-12-03T21:00:23+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">Upload files directly to Rackspace from the browser with AJAX PUT</title>   <link href=\"http://feedproxy.google.com/~r/tplus1/wtPt/~3/yrEbiSiq0-k/\"/>   <id>http://blog.tplus1.com/?p=817</id>   <updated>2013-11-16T21:43:41+00:00</updated>   <content type=\"html\">&lt;p&gt;I just wrote this up on &lt;a href=&quot;https://216software.com&quot;&gt;my biz site&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://216software.com/use-ajax-put-to-upload-files-directly-to-rackspace/&quot;&gt;Upload files directly to Rackspace Cloudfiles from the browser with AJAX PUT&lt;/a&gt;&lt;/p&gt; &lt;p&gt;I hope it helps somebody out!&lt;/p&gt;</content>   <author>    <name>Matthew Wilson</name>    <uri>http://blog.tplus1.com</uri>   </author>   <source>    <title type=\"html\">t+1</title>    <subtitle type=\"html\">Programming, gardening, economics, life in Cleveland Heights</subtitle>    <link rel=\"self\" href=\"http://blog.tplus1.com/index.php/category/turbogears/feed/\"/>    <id>http://blog.tplus1.com/index.php/category/turbogears/feed/</id>    <updated>2014-12-03T21:00:23+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en\">   <title type=\"html\">TurboGears 2.3 Hidden Gems #2 - Application Wrappers</title>   <link href=\"http://blog.axant.it/archives/516\"/>   <id>http://blog.axant.it/?p=516</id>   <updated>2013-11-10T13:16:25+00:00</updated>   <content type=\"html\">&lt;p&gt;One of the less known features introduced in TurboGears 2.3 are &lt;a href=&quot;http://turbogears.readthedocs.org/en/latest/turbogears/hooks.html#application-wrappers&quot;&gt;application wrappers&lt;/a&gt;.&lt;br /&gt; Application wrappers are much like &lt;a href=&quot;http://turbogears.readthedocs.org/en/latest/turbogears/hooks.html#controller-wrappers&quot;&gt;controller wrappers&lt;/a&gt; (available since 2.2), but instead of wrapping controllers they actually wrap the whole application providing an easier way to implement what in plain WSGI is done through middlewares.&lt;/p&gt; &lt;p&gt;The advantage of application wrappers over middlewares is that they have full access to TurboGears stack, they can access the current request, the database, session and caches as the application itself would do.&lt;/p&gt; &lt;p&gt;The great part is that, as they run between TGApp and TGController, they can also replace the &lt;strong&gt;TurboGears Context&lt;/strong&gt; and the &lt;strong&gt;TurboGears Response&lt;/strong&gt; providing a great way to hijack requests, responses or even replace entire features of the framework like the cache layer. A very similar concept is available in other frameworks like Pyramid Tweens.&lt;/p&gt; &lt;p&gt;A very simple application wrapper that intercepts exceptions and logs them without messing with the standard TurboGears error handling might look like:&lt;/p&gt;  &lt;div class=&quot;wp_syntax&quot;&gt;&lt;div class=&quot;code&quot;&gt;&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;class&lt;/span&gt; ErrorLoggingWrapper&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, handler, config&lt;span&gt;&amp;#41;&lt;/span&gt;:         &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;handler&lt;/span&gt; = handler         &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;config&lt;/span&gt; = config &amp;nbsp;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__call__&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, controller, environ, context&lt;span&gt;&amp;#41;&lt;/span&gt;:         path = context.&lt;span&gt;request&lt;/span&gt;.&lt;span&gt;path&lt;/span&gt;         &lt;span&gt;try&lt;/span&gt;:             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;handler&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;controller, environ, context&lt;span&gt;&amp;#41;&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;:             log.&lt;span&gt;exception&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Error while handling %s'&lt;/span&gt;, path&lt;span&gt;&amp;#41;&lt;/span&gt;             &lt;span&gt;raise&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;  &lt;p&gt;The wrapper can then be enabled calling&lt;/p&gt;  &lt;div class=&quot;wp_syntax&quot;&gt;&lt;div class=&quot;code&quot;&gt;&lt;pre class=&quot;python&quot;&gt;base_config.&lt;span&gt;register_wrapper&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;ErrorLoggingWrapper&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;  &lt;p&gt; inside &lt;strong&gt;config/app_cfg.py&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Now that we have an application wrapper able to log exceptions we can decide for example to add another one that suppresses exceptions and prints &amp;#8220;Something went wrong!&amp;#8221;, as it is possible to specify the order of execution for application wrappers we can register a SuppressErrorsWrapper that should execute after the &lt;strong&gt;ErrorLoggingWrapper&lt;/strong&gt;:&lt;/p&gt;  &lt;div class=&quot;wp_syntax&quot;&gt;&lt;div class=&quot;code&quot;&gt;&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;from&lt;/span&gt; webob &lt;span&gt;import&lt;/span&gt; Response &amp;nbsp; &lt;span&gt;class&lt;/span&gt; SuppressErrorsWrapper&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__init__&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, handler, config&lt;span&gt;&amp;#41;&lt;/span&gt;:         &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;handler&lt;/span&gt; = handler         &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;config&lt;/span&gt; = config &amp;nbsp;     &lt;span&gt;def&lt;/span&gt; &lt;span&gt;__call__&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, controller, environ, context&lt;span&gt;&amp;#41;&lt;/span&gt;:         &lt;span&gt;try&lt;/span&gt;:             &lt;span&gt;return&lt;/span&gt; &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;handler&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;controller, environ, context&lt;span&gt;&amp;#41;&lt;/span&gt;         &lt;span&gt;except&lt;/span&gt;:             &lt;span&gt;return&lt;/span&gt; Response&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Oh! Oh! Something went wrong!'&lt;/span&gt;, status=&lt;span&gt;500&lt;/span&gt;, content_type=&lt;span&gt;'text/plain'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;  &lt;p&gt;Then it can be registered after the ErrorLoggingWrapper using:&lt;/p&gt;  &lt;div class=&quot;wp_syntax&quot;&gt;&lt;div class=&quot;code&quot;&gt;&lt;pre class=&quot;python&quot;&gt;base_config.&lt;span&gt;register_wrapper&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;SuppressErrorsWrapper, after=ErrorLoggingWrapper&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;  &lt;p&gt;While applications wrappers are a powerful feature, most of their power comes from the new response management refactoring that makes possible to access the current context and replace the outgoing response while working with high level objects instead of having to manually cope with WSGI.&lt;/p&gt;</content>   <author>    <name>Alessandro Molina</name>    <uri>http://blog.axant.it</uri>   </author>   <source>    <title type=\"html\">Axant Tech Blog \\ufffd\\ufffd turbogears</title>    <subtitle type=\"html\">AXANT Experience Report</subtitle>    <link rel=\"self\" href=\"http://blog.axant.it/archives/tag/turbogears/feed\"/>    <id>http://blog.axant.it/archives/tag/turbogears/feed</id>    <updated>2014-08-19T09:00:11+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en\">   <title type=\"html\">TurboGears 2.3 Hidden Gems #1 - New Response Management</title>   <link href=\"http://blog.axant.it/archives/488\"/>   <id>http://blog.axant.it/?p=488</id>   <updated>2013-11-02T22:51:38+00:00</updated>   <content type=\"html\">&lt;p&gt;TurboGears2.3 has been a major improvement for the framework, most of its code got rewritten to achieve less dependencies, cleaner codebase a cleaner API and a faster framework. This resulted in reduction to only &lt;strong&gt;7 dependencies&lt;/strong&gt; in minimal mode and a &lt;strong&gt;3x faster&lt;/strong&gt; codebase.&lt;/p&gt; &lt;p&gt;While those are the core changes for the release, there are a lot of side effects that users can exploit at their benefit. This is the reason why I decided to start this set of posts to describe some of those hidden gems and explain users how to achieve the best from the new release.&lt;/p&gt; &lt;p&gt;The first change I&amp;#8217;m going to talk about is how the response management got refactored and simplified. While this has some direct benefits it also provided some interesting side effects it makes sense to explore.&lt;/p&gt; &lt;h3&gt;How TurboGears on Pylons did it&lt;/h3&gt; &lt;p&gt;TurboGears tried to abstract a lot of response complexity through\\ufffd\\ufffd&lt;em&gt;tg.response&lt;/em&gt; object and as there were not many reasons to override &lt;em&gt;TGController.__call__&lt;/em&gt; it was common that the response object body was always set by TurboGears itself. &lt;/p&gt; &lt;p&gt;Due to the fact that Pylons controllers were somehow compliant to WSGI itself the &lt;em&gt;TGController&lt;/em&gt; was then in charge of calling the &lt;em&gt;start_response&lt;/em&gt; function by actually providing all the headers user set into &lt;em&gt;tg.response&lt;/em&gt;&lt;/p&gt;  &lt;div class=&quot;wp_syntax&quot;&gt;&lt;div class=&quot;code&quot;&gt;&lt;pre class=&quot;python&quot;&gt;response = &lt;span&gt;self&lt;/span&gt;._dispatch_call&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &amp;nbsp; &lt;span&gt;# Here the response body got set, removed for brevity&lt;/span&gt; &amp;nbsp; &lt;span&gt;if&lt;/span&gt; &lt;span&gt;hasattr&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;response, &lt;span&gt;'wsgi_response'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:   &lt;span&gt;# Copy the response object into the testing vars if we're testing&lt;/span&gt;   &lt;span&gt;if&lt;/span&gt; &lt;span&gt;'paste.testing_variables'&lt;/span&gt; &lt;span&gt;in&lt;/span&gt; environ:       environ&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;'paste.testing_variables'&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;'response'&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt; = response   &lt;span&gt;if&lt;/span&gt; log_debug:       log.&lt;span&gt;debug&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;quot;Calling Response object to return WSGI data&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &amp;nbsp;   &lt;span&gt;return&lt;/span&gt; response&lt;span&gt;&amp;#40;&lt;/span&gt;environ, &lt;span&gt;self&lt;/span&gt;.&lt;span&gt;start_response&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;  &lt;p&gt;While this made sense for Pylons, where you are expected to subclass the controller to perform advanced customizations, it was actually something unexposed to TurboGears users.&lt;/p&gt; &lt;p&gt;TurboGears made possible to change application behaviour using &lt;strong&gt;&lt;a href=&quot;http://turbogears.readthedocs.org/en/rtfd2.3.0b1/turbogears/configuration/appconfig.html#available-hooks&quot;&gt;hooks&lt;/a&gt; and&lt;/strong&gt; &lt;strong&gt;controller_wrappers&lt;/strong&gt;.  So the use for subclassing the TGController was actually strictly related to custom dispatching methods, which was usually better solved by\\ufffd\\ufffd&lt;span&gt;specializing&lt;/span&gt; the &lt;em&gt;TGController.&lt;/em&gt;&lt;em&gt;_dispatch&lt;/em&gt; method (&lt;a href=&quot;https://github.com/TurboGears/tgext.routes&quot;&gt;tgext.routes&lt;/a&gt; is a simple enough example of this).&lt;/p&gt; &lt;h3&gt;Cleaning Up Things&lt;/h3&gt; &lt;p&gt;This lead to a curious situation where the &lt;em&gt;TGController&lt;/em&gt; needed to speak with &lt;em&gt;TGApp&lt;/em&gt; through WSGI to make Pylons happy, so it needed to call start_response and return the response iterator itself. &lt;em&gt;TGApp&lt;/em&gt; was supposed to be the WSGI application, but in fact most of the real work was happening into &lt;em&gt;TGController&lt;/em&gt;, in the end we had two WSGI applications: both &lt;em&gt;TGController&lt;/em&gt; and &lt;em&gt;TGApp&lt;/em&gt; were callable that spoke WSGI.&lt;/p&gt; &lt;p&gt;The 2.3 rewrite has been a great occasion to solve this ambiguity by providing a clear communication channel between TGController and TGApp by assigning each one a specific responsibility.&lt;/p&gt; &lt;h3&gt;Communication Channel&lt;/h3&gt; &lt;p&gt;In TG2.3 only the TGApp is now in charge of exposing the WSGI application interface. The TGController is expected to get a &lt;strong&gt;TurboGears Request Context object&lt;/strong&gt; and provide back a &lt;strong&gt;TurboGears Response object&lt;/strong&gt;. The TGApp will then use the provided response object to submit headers and response body.&lt;/p&gt; &lt;p&gt;The TGController code got much more straightforward and the whole testing and call response part was moved to the TGApp itself:&lt;/p&gt;  &lt;div class=&quot;wp_syntax&quot;&gt;&lt;div class=&quot;code&quot;&gt;&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;try&lt;/span&gt;:     response = &lt;span&gt;self&lt;/span&gt;._perform_call&lt;span&gt;&amp;#40;&lt;/span&gt;context&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;except&lt;/span&gt; HTTPException &lt;span&gt;as&lt;/span&gt; httpe:     response = httpe &amp;nbsp; &lt;span&gt;# Here the response body got set, removed for brevity&lt;/span&gt; &amp;nbsp; &lt;span&gt;return&lt;/span&gt; response&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;  &lt;p&gt;This has been possible without breaking backward compatibility thanks to the fact that the only subclassing of &lt;em&gt;TGController&lt;/em&gt; common in TurboGears world was the &lt;em&gt;BaseController&lt;/em&gt; class implemented by most applications.&lt;/p&gt; &lt;p&gt;The &lt;em&gt;BaseController&lt;/em&gt; usually acts just as a pass-through between &lt;em&gt;TGApp&lt;/em&gt; and &lt;em&gt;TGController&lt;/em&gt; to setup some shortcuts to authentication data and other helpers for each request. So the fact that the parameters received by &lt;em&gt;BaseController.__call__&lt;/em&gt; changed didn&amp;#8217;t cause an huge issue as they were just forwarded to &lt;em&gt;TGController.__call__&lt;/em&gt;&lt;/p&gt; &lt;h3&gt;A little side effect&lt;/h3&gt; &lt;p&gt;One of the interesting effects of this change is that your controllers are now enabled to return any instance of &lt;em&gt;webob.Response&lt;/em&gt;. &lt;/p&gt; &lt;p&gt;In previous versions it was possible to return practically only &lt;em&gt;webob. WSGIHTTPException&lt;/em&gt; subclasses (as they exposed a wsgi_response property which was consumed by Pylons), so it was possible to return an &lt;em&gt;HTTPFound&lt;/em&gt; instance to force a redirect, but it was not possible to return a plain response.&lt;/p&gt; &lt;p&gt;A consequence of the new change is enabling your controller to call third party WSGI applications by using &lt;em&gt;tg.request.get_reponse&lt;/em&gt; with a given application. The returned response can be directly provided as the return value of your controller.&lt;/p&gt; &lt;p&gt;This behaviour also makes easier to write reusable components that don&amp;#8217;t need to rely on tg.response and change it. Your application can forward the request to them and proxy back the response they return.&lt;/p&gt; &lt;p&gt;Part #2 will cover Application Wrappers, which greatly benefit from the new response management.&lt;/p&gt;</content>   <author>    <name>Alessandro Molina</name>    <uri>http://blog.axant.it</uri>   </author>   <source>    <title type=\"html\">Axant Tech Blog \\ufffd\\ufffd turbogears</title>    <subtitle type=\"html\">AXANT Experience Report</subtitle>    <link rel=\"self\" href=\"http://blog.axant.it/archives/tag/turbogears/feed\"/>    <id>http://blog.axant.it/archives/tag/turbogears/feed</id>    <updated>2014-08-19T09:00:11+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">jqGrid in TurboGears2 Admin Screens</title>   <link href=\"https://enc.com.au/2013/09/17/jqgrid-in-turbogears2-admin-screens/\"/>   <id>https://enc.com.au/?p=949</id>   <updated>2013-09-17T12:29:33+00:00</updated>   <content type=\"html\">&lt;p&gt;I wanted to use the jqGrid for my admin pages as I liked that look and it matches some of the other screens outside the admin controller.\\ufffd\\ufffd The admin controller, or rather the CrudRestController out of tgext.crud, has a way of exporting results in &lt;a class=&quot;zem_slink&quot; title=&quot;JSON&quot; href=&quot;http://json.org/&quot; target=&quot;_blank&quot; rel=&quot;homepage&quot;&gt;json&lt;/a&gt; format. So surely its a matter of changing the TableBase to use jqGrid in the admin controller and we&amp;#8217;re done?&lt;/p&gt; &lt;p&gt;Well, no.&lt;/p&gt; &lt;p&gt;First you need to adjust the jsonReader options so that it lines up to the field names that the controller sends and this was one of the first (or last snags). The json output looks like:&lt;/p&gt;   &lt;div class=&quot;wp-geshi-highlight-wrap5&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap4&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap3&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap2&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap&quot;&gt;&lt;div class=&quot;wp-geshi-highlight&quot;&gt;&lt;div class=&quot;json&quot;&gt;&lt;pre class=&quot;de1&quot;&gt;{   &quot;value_list&quot;: {     &quot;total&quot;: 20,     &quot;items_per_page&quot;: 7,     &quot;page&quot;: 1,     &quot;entries&quot;: [(lots of entries)...]   } }&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;   &lt;p&gt;Now this is a little odd because of the top-level dictionary that is being used here. Most of the examples have everything that is inside the value_list being returned. In fact adjusting the controller to return only those items in the value_list values works.&lt;/p&gt; &lt;p&gt;To look inside this structure we need to adjust the jsonReader options. &lt;a title=&quot;Retrieving Data in jqGrid&quot; href=&quot;https://enc.com.au/tag/turbogears/feed/www.trirand.com/jqgridwiki/doku.php?id=wiki:retrieving_data&quot; target=&quot;_blank&quot;&gt;jqGrid documentation&lt;/a&gt; uses the format &amp;#8220;toptier&amp;gt;subtier&amp;#8221; for the XML reader so that was the intial attempt. It was also an intial fail, it doesn&amp;#8217;t work and you get your very familiar empty grid.&lt;/p&gt; &lt;p&gt;The trick is close to this format, but slightly different for json. You change the options to &amp;#8220;toptier.subtier&amp;#8221;. In other words change the greater than symbol to a full stop for json access.&lt;/p&gt; &lt;p&gt;The jqGridWidget now has the following options (amongst others):&lt;/p&gt;   &lt;div class=&quot;wp-geshi-highlight-wrap5&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap4&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap3&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap2&quot;&gt;&lt;div class=&quot;wp-geshi-highlight-wrap&quot;&gt;&lt;div class=&quot;wp-geshi-highlight&quot;&gt;&lt;div class=&quot;python&quot;&gt;&lt;pre class=&quot;de1&quot;&gt;options &lt;span class=&quot;sy0&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;&amp;#123;&lt;/span&gt;   &lt;span class=&quot;st0&quot;&gt;'datatype'&lt;/span&gt;: &lt;span class=&quot;st0&quot;&gt;'json'&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;st0&quot;&gt;'jsonReader'&lt;/span&gt;: &lt;span class=&quot;br0&quot;&gt;&amp;#123;&lt;/span&gt;     &lt;span class=&quot;st0&quot;&gt;'repeatitems'&lt;/span&gt;: &lt;span class=&quot;kw2&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;st0&quot;&gt;'root'&lt;/span&gt;: &lt;span class=&quot;st0&quot;&gt;'value_list.entries'&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;st0&quot;&gt;'total'&lt;/span&gt;: &lt;span class=&quot;st0&quot;&gt;'value_list.total'&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;st0&quot;&gt;'page'&lt;/span&gt;: &lt;span class=&quot;st0&quot;&gt;'value_list.page'&lt;/span&gt;&lt;span class=&quot;sy0&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;br0&quot;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&quot;br0&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;   &lt;p&gt;There might be a way of saying all entries sit under value_list inside jqGrid, but I couldn&amp;#8217;t find it. Those options given above do give a working jqGrid on the admin screens.&lt;/p&gt; &lt;div class=&quot;zemanta-pixie&quot;&gt;&lt;a class=&quot;zemanta-pixie-a&quot; title=&quot;Enhanced by Zemanta&quot; href=&quot;http://www.zemanta.com/?px&quot;&gt;&lt;/a&gt;&lt;/div&gt;</content>   <author>    <name>Craig Small</name>    <uri>https://enc.com.au</uri>   </author>   <source>    <title type=\"html\">Small Dropbear | Tag Archives: TurboGears</title>    <subtitle type=\"html\">Stuff from Debian and Free Software developer Craig Small</subtitle>    <link rel=\"self\" href=\"https://enc.com.au/tag/turbogears/feed/\"/>    <id>https://enc.com.au/tag/turbogears/feed/</id>    <updated>2015-03-20T04:00:11+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">old-school code checklist</title>   <link href=\"http://feedproxy.google.com/~r/tplus1/wtPt/~3/rxLxvxkFVrs/\"/>   <id>http://blog.tplus1.com/?p=811</id>   <updated>2013-07-23T17:06:52+00:00</updated>   <content type=\"html\">&lt;p&gt;You can&amp;#8217;t call it old-school code unless a majority of these are true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;global vars are all registered at the top of the file, and are used to track state&lt;/li&gt; &lt;li&gt;Comments contain author&amp;#8217;s initials and a date&lt;/li&gt; &lt;li&gt;Last line of the file is just the number 1;&lt;/li&gt; &lt;li&gt;Uses LDAP&lt;/li&gt; &lt;li&gt;You recognize the dude that wrote it because you&amp;#8217;ve seen his email address at the bottom of some man pages&lt;/li&gt; &lt;/ul&gt;</content>   <author>    <name>Matthew Wilson</name>    <uri>http://blog.tplus1.com</uri>   </author>   <source>    <title type=\"html\">t+1</title>    <subtitle type=\"html\">Programming, gardening, economics, life in Cleveland Heights</subtitle>    <link rel=\"self\" href=\"http://blog.tplus1.com/index.php/category/turbogears/feed/\"/>    <id>http://blog.tplus1.com/index.php/category/turbogears/feed/</id>    <updated>2014-12-03T21:00:23+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">Step or Sloping Graphs</title>   <link href=\"https://enc.com.au/2013/07/18/step-or-sloping-graphs/\"/>   <id>https://enc.com.au/?p=919</id>   <updated>2013-07-18T13:05:08+00:00</updated>   <content type=\"html\">&lt;p&gt;Even though the backend of Rosenberg NMS uses &lt;a class=&quot;zem_slink&quot; title=&quot;RRDtool&quot; href=&quot;http://oss.oetiker.ch/rrdtool/&quot; target=&quot;_blank&quot; rel=&quot;homepage&quot;&gt;rrdtool&lt;/a&gt; RRD files, the front end graphs are created using jqPlot.\\ufffd\\ufffd The idea is to have a set of templates for the different types of graphs and just apply them to the various data sets.\\ufffd\\ufffd It makes things a lot simpler for new graphs because you just select which one you want; unless you want something a lot different which would involve a new graph template.&lt;/p&gt; &lt;p&gt;In any case, anyone that looks enough at the standard rrdtool graphs will know they are a series of steps. While it depends on the RRA, usually they are 5 minute steps, so a graph showing an increasing rate might show 5 minutes of 2 Mbps and then the next 5 minutes of 11 Mbps. jqPlot graphs as I&amp;#8217;ve currently got them draws a line between two data points, so there would be a sloping line starting at 2.5 minutes (half of the first 5 minute interval) and 2Mbps sloping up to 11 Mbps at 7.5 minutes.&lt;/p&gt; &lt;p&gt;At first I thought this was wrong and spent some time attempting to &amp;#8220;fix&amp;#8221; the graph by making it look like a rrdtool graph more. Someway through that process I stopped and wondered, what IS the right way? The answer like a lot of other things, is &amp;#8220;it depends&amp;#8221;.&lt;/p&gt; &lt;p&gt;For a graph showing a rate, such as the output bits per second on an interface, the way this is done is at regular intervals a counter is measured. So if at time 0 the counter is 140 and time 60 the counter is 200 and finally at time 120 the counter is at 800 there has been an average rate of 1 [(200-140)/60] and 100 [(800-200)/60)]. rrdtool would show a horizontal bar at 1 bps and then another horizontal bar at 100 at the next time interval. jqPlot would show a sloping line going from 30,1 up to 90,100.&lt;/p&gt; &lt;p&gt;Two graphs looking very different from the same data, what gives?\\ufffd\\ufffd Each graph is right, or rather is showing an estimation of different things, hence their differences.&lt;/p&gt; &lt;p&gt;rrdtool is showing the average rate for that time period. It is in some ways accurate because leaving aside missed wrap-arounds and resets that many bits did pass through that interface for the time specified.\\ufffd\\ufffd However often the graphs are interpreted incorrectly as the real rate and not an average.\\ufffd\\ufffd We can be reasonably sure for a rate that it would not be 1 for exactly a minute and then immediately jump to 100 for another minute.\\ufffd\\ufffd This isn&amp;#8217;t rrdtool&amp;#8217;s fault, it is just how the graphs can be interpreted.&lt;/p&gt; &lt;p&gt;jqplot will show more &amp;#8220;realistic&amp;#8221; graphs, with a curve sloping up. However this too makes assumptions that the rate increase is linear which often it is not. It just gives the illusion that the graph knows more about the data than it really does.&lt;/p&gt; &lt;p&gt;In the end, both graphs are at the same time accurate and misleading. It&amp;#8217;s important when looking at any graph in general (not just these two types) that you understand its limits and assumptions.\\ufffd\\ufffd To give one example of the problems that can be missed, traffic interfaces may have microbursts (large amount of traffic in short amount of time) which, due to the averaging that goes on in graphing are invisible to graphs and give an incorrect account of what is going on.&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;div class=&quot;zemanta-pixie&quot;&gt;&lt;a class=&quot;zemanta-pixie-a&quot; title=&quot;Enhanced by Zemanta&quot; href=&quot;http://www.zemanta.com/?px&quot;&gt;&lt;/a&gt;&lt;/div&gt;</content>   <author>    <name>Craig Small</name>    <uri>https://enc.com.au</uri>   </author>   <source>    <title type=\"html\">Small Dropbear | Tag Archives: TurboGears</title>    <subtitle type=\"html\">Stuff from Debian and Free Software developer Craig Small</subtitle>    <link rel=\"self\" href=\"https://enc.com.au/tag/turbogears/feed/\"/>    <id>https://enc.com.au/tag/turbogears/feed/</id>    <updated>2015-03-20T04:00:11+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">Obscure python syntax error</title>   <link href=\"http://feedproxy.google.com/~r/tplus1/wtPt/~3/MM2MG3QgdxM/\"/>   <id>http://blog.tplus1.com/?p=807</id>   <updated>2013-06-28T18:53:44+00:00</updated>   <content type=\"html\">&lt;p&gt;Been writing python for a long time.  When I wrote this code, I could not figure out why I was getting a syntax error.&lt;/p&gt; &lt;p&gt;&lt;pre&gt;&lt;code&gt; d1 = dict( &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;user_id=99, &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;display_name=&amp;#039;Matt Wilson&amp;#039;,)  d2 = dict( &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;email_address=&amp;#039;matt@tplus1.com&amp;#039;, &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;**d1,) &lt;/code&gt;&lt;/pre&gt;&lt;/p&gt; &lt;p&gt;It is the trailing comma after **d1.  It is not OK.  Which is really weird, because the trailing comma after display_name=&amp;#8217;Matt Wilson&amp;#8217; is just fine.&lt;/p&gt;</content>   <author>    <name>Matthew Wilson</name>    <uri>http://blog.tplus1.com</uri>   </author>   <source>    <title type=\"html\">t+1</title>    <subtitle type=\"html\">Programming, gardening, economics, life in Cleveland Heights</subtitle>    <link rel=\"self\" href=\"http://blog.tplus1.com/index.php/category/turbogears/feed/\"/>    <id>http://blog.tplus1.com/index.php/category/turbogears/feed/</id>    <updated>2014-12-03T21:00:23+00:00</updated>   </source>  </entry>   <entry>   <title type=\"html\">Announcing TurboGears 2.2.1!</title>   <link href=\"http://codersbuffet.blogspot.com/2013/01/announcing-turbogears-221.html\"/>   <id>tag:blogger.com,1999:blog-1176744327252521223.post-8987648400418941591</id>   <updated>2013-01-23T21:24:46+00:00</updated>   <content type=\"html\">&lt;br /&gt;&lt;h3 class=&quot;post-title entry-title&quot;&gt;&lt;span&gt;That's right, it's out right now, and you can begin using it in your own projects! Follow the directions on http://www.turbogears.org/ you'll get 2.2.0.&lt;/span&gt;&lt;/h3&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-4775748713595586975&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-4775748713595586975&quot;&gt;I'd like to thank&amp;nbsp;&lt;a class=&quot;g-profile&quot; href=&quot;http://plus.google.com/106236049129871380115&quot; target=&quot;_blank&quot;&gt;+Alessandro Molina&lt;/a&gt;,&amp;nbsp;&lt;a class=&quot;g-profile&quot; href=&quot;http://plus.google.com/101069407605391188838&quot; target=&quot;_blank&quot;&gt;+Christoph Zwerschke&lt;/a&gt;, and&amp;nbsp;&lt;a class=&quot;g-profile&quot; href=&quot;http://plus.google.com/115517428228170119688&quot; target=&quot;_blank&quot;&gt;+Carlos Daniel Ruvalcaba Valenzuela&lt;/a&gt;. Between the three of them, TurboGears is becoming better every day, and they deserve much praise and thanks.&lt;/div&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-4775748713595586975&quot;&gt;&lt;br /&gt;The full changelog is below.&lt;/div&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-4775748713595586975&quot;&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-4775748713595586975&quot;&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-4775748713595586975&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;Ming / Mongo&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-4775748713595586975&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Support connection options for ming/mongodb&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Support new ming configuration API&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Fix datastore options for ming&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-4775748713595586975&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;Templating&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-4775748713595586975&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Jinja autoload filters&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Added jinja filter autoloading namespace protection test cases.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;When autoloading jinja filters use the special __all__ module variable to import the filters, if it is not defined then just import any defined callables.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Jinja2 didn't perform escaping while mako, genshi and kajiki did&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Closes #17, mako bytecaching only works when use_dotted_templatenames = False.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-4775748713595586975&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;Authentication&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-4775748713595586975&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Better configuration of authenticators.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;More flexible configuration of authenticators. By adding ('default', None) to the list of authenticators, you can now include the default authenticator in the list of custom authenticators.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-4775748713595586975&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;Documentation&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-4775748713595586975&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Fix more references to pylons.c&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Update doc to deprecated pylons ns&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Update Wiki20 tutorial to TG2.2 and try to make it easier to follow and faster to read by hightlighting code and reducing parts that are more advanced or pure web developemnt/python related&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-4775748713595586975&quot;&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;TurboGears Project&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-4775748713595586975&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Fix for travis due to repoze.who 2.1 now bringing in WebOb 1.2&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Travis-ci for development branch&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Add contributing file.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-4775748713595586975&quot;&gt;&lt;span&gt;&lt;b&gt;Everything Else&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;post-body entry-content&quot; id=&quot;post-body-4775748713595586975&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;urljoin behavior on schemas seems to change depending on python version&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Refactor request_type detection usage&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Fix issue with request extensions being wrongly handled two times&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Use the new built-in translations provided by ToscaWidgets 2.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;@beaker_cache was not available inside the deacorators module while it should have been&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;@require now provides smart behavior, and can be used to just abort, rather than do redirect. Closes #27&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Make possible to import controllers (and so expose templates) before AppConfig.init_config has been called&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Most packages used by TG currently don't work with SQLAlchemy 0.8&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Permission._groups is currently defined as an array, so it expects to receive a list&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content>   <author>    <name>Michael Pedersen</name>    <email>noreply@blogger.com</email>    <uri>http://codersbuffet.blogspot.com/search/label/turbogears</uri>   </author>   <source>    <title type=\"html\">The Coder's Buffet</title>    <subtitle type=\"html\">As a developer, I explore numerous bits of technology. Some stick, some suck, and all of them teach me. It's time for me to tell the world why I use what I use.</subtitle>    <link rel=\"self\" href=\"http://codersbuffet.blogspot.com/feeds/posts/default/-/turbogears\"/>    <id>tag:blogger.com,1999:blog-1176744327252521223</id>    <updated>2015-03-20T03:00:06+00:00</updated>   </source>  </entry>   <entry xml:lang=\"de-DE\">   <title type=\"html\">A Song For The New Year</title>   <link href=\"http://blog.chrisarndt.de/article/708\"/>   <id>http://blog.chrisarndt.de/?p=708</id>   <updated>2012-12-28T16:41:19+00:00</updated>   <content type=\"html\">The days between Christmas and New Year&amp;#8217;s Eve have always been a time for me where I find the tranquility to dig into personal projects without much distraction. The past few days I have been writing and recording a new song, which is a first for me, in that I wrote a two-hand Piano part [&amp;#8230;]</content>   <author>    <name>Christpher Arndt</name>    <uri>http://blog.chrisarndt.de</uri>   </author>   <source>    <title type=\"html\">Christopher Arndt</title>    <subtitle type=\"html\">Life of my Brain</subtitle>    <link rel=\"self\" href=\"http://blog.chrisarndt.de/feed\"/>    <id>http://blog.chrisarndt.de/feed</id>    <updated>2015-02-13T12:00:15+00:00</updated>   </source>  </entry>   <entry xml:lang=\"de-DE\">   <title type=\"html\">On The AN1x Machine</title>   <link href=\"http://blog.chrisarndt.de/article/702\"/>   <id>http://blog.chrisarndt.de/?p=702</id>   <updated>2012-12-01T02:00:22+00:00</updated>   <content type=\"html\">Kleine Spielerei mit dem Step-Sequenzer des Yamaha AN1x: Share &amp;#038; Enjoy!</content>   <author>    <name>Christpher Arndt</name>    <uri>http://blog.chrisarndt.de</uri>   </author>   <source>    <title type=\"html\">Christopher Arndt</title>    <subtitle type=\"html\">Life of my Brain</subtitle>    <link rel=\"self\" href=\"http://blog.chrisarndt.de/feed\"/>    <id>http://blog.chrisarndt.de/feed</id>    <updated>2015-02-13T12:00:15+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en\">   <title type=\"html\">It\\ufffd\\ufffd\\ufffds a Pluggable World</title>   <link href=\"http://blog.axant.it/archives/466\"/>   <id>http://blog.axant.it/?p=466</id>   <updated>2012-09-08T21:30:57+00:00</updated>   <content type=\"html\">&lt;p&gt;One of the new additions in TG2.1.4 has been the support for the so called pluggable applications, this is a really powerful and convenient feature that probably not enough TurboGears users started embracing.&lt;/p&gt; &lt;p&gt;For people that never used them, pluggable applications provide a python package that can be installed and &amp;#8220;plugged&amp;#8221; inside any existing TurboGears application to add new features. Django has been probably the first framework to bring this feature to Python world and TurboGears implementation tries to be as convenient by making pluggable applications identical to plain TurboGears applications and providing a &amp;#8220;quickstart-pluggable&amp;#8221; command that creates the application skeleton for you. Pluggable applications can be installed using easy_install or pip and they can off course depend on any other pluggable application they need.&lt;/p&gt; &lt;p&gt;This year, at EuroPython 2012, I have been pleased to present a talk about using &lt;a href=&quot;http://www.slideshare.net/__amol__/rapid-prototyping-with-turbogears2&quot;&gt;TurboGears for rapid prototyping&lt;/a&gt; (both in Italian and English, you should be able to find the videos on EuroPython youtube channel), so I decided to dedicate a part of it to pluggable applications as they are actually the fastest way to rapidly prototype a project. With my surprise most the questions I received were about the &lt;a href=&quot;http://www.turbogears.org/2.2/docs/main/Extensions/Crud/index.html#easycrudrestcontroller&quot;&gt;EasyCrudRestController&lt;/a&gt; and not about pluggable applications.&lt;/p&gt; &lt;p&gt;While the EasyCrudRestController is definitively a powerful tool, it&amp;#8217;s far from being the answer to all the web developments needs. In most of the applications you are going to develop, users will probably prefer consulting content from something more engaging than an administration table of database entries. &lt;/p&gt; &lt;p&gt;This month, to create a set of utilities that can help people with their everyday needs, I decided to ask guys that work with me to make every part of the web sites that they were writing as pluggable applications. The result of this experiment has been that most of the pluggable apps that I did in my spare time (&lt;a href=&quot;http://pypi.python.org/pypi/tgapp-smallpress&quot;&gt;tgapp-smallpress&lt;/a&gt;, &lt;a href=&quot;http://pypi.python.org/pypi/tgapp-photos&quot;&gt;tgapp-photos&lt;/a&gt;, &lt;a href=&quot;http://pypi.python.org/pypi/tgapp-tgcomments&quot;&gt;tgapp-tgcomments&lt;/a&gt;, &lt;a href=&quot;http://pypi.python.org/pypi/tgext.tagging&quot;&gt;tgext.tagging&lt;/a&gt; and so on) ended being used in real world projects and started to improve exposing hooks and ways to customize their behavior for the project they were going to be used.&lt;/p&gt; &lt;p&gt;After a few weeks, new pluggables like &lt;a href=&quot;http://pypi.python.org/pypi/tgapp-fbauth&quot;&gt;tgapp-fbauth&lt;/a&gt;, &lt;a href=&quot;http://pypi.python.org/pypi/tgapp-userprofile&quot;&gt;tgapp-userprofile&lt;/a&gt;, &lt;a href=&quot;http://pypi.python.org/pypi/tgapp-calendarevents&quot;&gt;tgapp-calendarevents&lt;/a&gt;, &lt;a href=&quot;https://bitbucket.org/puria/tgapp-fbcontest&quot;&gt;tgapp-fbcontest&lt;/a&gt;, &lt;a href=&quot;https://bitbucket.org/_amol_/tgapp-youtubevideo&quot;&gt;tgapp-youtubevideo&lt;/a&gt; has seen light and developing the target application started becoming blazing fast: Just plug what you need and customize it.&lt;/p&gt; &lt;p&gt;Embracing this philosophy the last project I&amp;#8217;m working on has an app_cfg.py file that looks like:&lt;/p&gt;  &lt;div class=&quot;wp_syntax&quot;&gt;&lt;div class=&quot;code&quot;&gt;&lt;pre class=&quot;python&quot;&gt;plug&lt;span&gt;&amp;#40;&lt;/span&gt;base_config, &lt;span&gt;'tgext.debugbar'&lt;/span&gt;, inventing=&lt;span&gt;True&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; plug&lt;span&gt;&amp;#40;&lt;/span&gt;base_config, &lt;span&gt;'tgext.scss'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; plug&lt;span&gt;&amp;#40;&lt;/span&gt;base_config, &lt;span&gt;'tgext.browserlimit'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; plug&lt;span&gt;&amp;#40;&lt;/span&gt;base_config, &lt;span&gt;'registration'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; plug&lt;span&gt;&amp;#40;&lt;/span&gt;base_config, &lt;span&gt;'photos'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; plug&lt;span&gt;&amp;#40;&lt;/span&gt;base_config, &lt;span&gt;'smallpress'&lt;/span&gt;, &lt;span&gt;'press'&lt;/span&gt;, form=&lt;span&gt;'XXX.lib.forms.ArticleForm'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; plug&lt;span&gt;&amp;#40;&lt;/span&gt;base_config, &lt;span&gt;'tgcomments'&lt;/span&gt;, allow_anonymous=&lt;span&gt;False&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &lt;span&gt;from&lt;/span&gt; XXX.&lt;span&gt;lib&lt;/span&gt;.&lt;span&gt;matches&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; MyKindOfEvent plug&lt;span&gt;&amp;#40;&lt;/span&gt;base_config, &lt;span&gt;'calendarevents'&lt;/span&gt;, &lt;span&gt;'eventi'&lt;/span&gt;, event_types=&lt;span&gt;&amp;#91;&lt;/span&gt;MyKindOfEvent&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; replace_template&lt;span&gt;&amp;#40;&lt;/span&gt;base_config, &lt;span&gt;'smallpress.templates.article'&lt;/span&gt;,                                &lt;span&gt;'XXX.templates.press.article'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; replace_template&lt;span&gt;&amp;#40;&lt;/span&gt;base_config, &lt;span&gt;'smallpress.templates.excerpt'&lt;/span&gt;,                                &lt;span&gt;'XXX.templates.press.excerpt'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;  &lt;p&gt;Thanks to this our development process has really improved: whenever a developer finds a bug he just has to propose a patch for the target pluggable, whenever someone notices a missing index on a query he has just to add it to the given pluggable. All the websites under development improved like people were working on the same project.&lt;/p&gt; &lt;p&gt;While existing pluggables might be limited, buggy or slow I&amp;#8217;m getting confident that they will continue to improve, and some day they will surpass whatever custom implementation I can think of. I think I&amp;#8217;m going to heavily rely on pluggable applications for any future project sticking to only one rule: &amp;#8220;make it opensource&amp;#8221;. This way, apart from probably helping other people, I&amp;#8217;m also improving my own projects through other people feedbacks, bug reports and patches to the pluggables I used.&lt;/p&gt; &lt;p&gt;So, next time you have to start a new project give a look at the &lt;a href=&quot;http://turbogears.org/cogbin#TurboGears2 Applications&quot;&gt;TurboGears CogBin&lt;/a&gt; and check if there is a pluggable application that looks like what you need. If you find any issue or find space for improvements just fork it and send a pull request, or send an email on the &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!forum/turbogears&quot;&gt;TurboGears Mailing List&lt;/a&gt; I&amp;#8217;ll do my best to address any reported issue thanking you for your feedbacks as I&amp;#8217;m aware that you are actually improving any past and future project that relies on that pluggable.&lt;/p&gt;</content>   <author>    <name>Alessandro Molina</name>    <uri>http://blog.axant.it</uri>   </author>   <source>    <title type=\"html\">Axant Tech Blog \\ufffd\\ufffd turbogears</title>    <subtitle type=\"html\">AXANT Experience Report</subtitle>    <link rel=\"self\" href=\"http://blog.axant.it/archives/tag/turbogears/feed\"/>    <id>http://blog.axant.it/archives/tag/turbogears/feed</id>    <updated>2014-08-19T09:00:11+00:00</updated>   </source>  </entry>   <entry>   <title type=\"html\">Announcing TurboGears 2.2.0!</title>   <link href=\"http://codersbuffet.blogspot.com/2012/08/announcing-turbogears-220.html\"/>   <id>tag:blogger.com,1999:blog-1176744327252521223.post-4775748713595586975</id>   <updated>2012-08-23T23:15:14+00:00</updated>   <content type=\"html\">That's right, we finally did it! It's up right now, and if you follow the directions on http://www.turbogears.org/ you'll get 2.2.0.&lt;br /&gt;&lt;br /&gt;I'd like to take a minute to thank Alessandro Molina in particular. I did what support I could, but this release really belongs to him. Please pass along congratulations and thanks to him. And if there's bugs, I'll take the blame myself for not doing more to help.&lt;br /&gt;&lt;br /&gt;The full changelog is below.&lt;br /&gt;&lt;br /&gt;&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Important Commit Messages&lt;/b&gt;:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Fix template engine extension collision in tw2.core &amp;gt;= 2.1&lt;/li&gt;&lt;li&gt;Permit TGController subclasses to keep the decorations made on the parent class methods around&lt;/li&gt;&lt;li&gt;Support repoze.who v2&lt;/li&gt;&lt;li&gt;New auth configuration layer that doesn't require repoze.what anymore while still being compatible&lt;/li&gt;&lt;li&gt;Support validation dict using TW2 validators and make validation less dependant from FormEncode&lt;/li&gt;&lt;li&gt;Always prefer default renderer when multiple engines are registered for the same content_type&lt;/li&gt;&lt;li&gt;Fix empty documentation for some decorators&lt;/li&gt;&lt;li&gt;Remove url kwargs which were marked for removal in 2.2&lt;/li&gt;&lt;li&gt;Remove legacy renderers support&lt;/li&gt;&lt;li&gt;Disable AuthMetadataProvider when is None&lt;/li&gt;&lt;li&gt;Improved kajiki loader to solve some issues with py:extends&lt;/li&gt;&lt;li&gt;use .jinja extension for jinja templates by default&lt;/li&gt;&lt;li&gt;On Mako when using file loader templates where reloaded using the&amp;nbsp;auto_reload_templates option, while when using dotted loader the&amp;nbsp;mako.reloadfromdisk option was used. Merge the two options in&amp;nbsp;auto_reload_templates as all the other templates engines use this&amp;nbsp;one&lt;/li&gt;&lt;li&gt;__before__ and __after__ were renamed to _before and _after&lt;/li&gt;&lt;li&gt;Expose render call as a public api with render_template name&lt;/li&gt;&lt;li&gt;Create sqla module for sqlalchemy related things and add BalancedSession for master/slave load balancing&lt;/li&gt;&lt;li&gt;Change prefix for tw2 to make resources archiving work correctly&lt;/li&gt;&lt;li&gt;prefer_toscawidgets2 option in app_cfg enables tw2 and disables&amp;nbsp;tw2. This should be the default in 2.2 newly quickstarted projects&lt;/li&gt;&lt;li&gt;Add option for setting the template rendering parameters.&lt;/li&gt;&lt;li&gt;Permit to avoid doctype injection when manually rendering templates with tg.render.render&lt;/li&gt;&lt;li&gt;Object dispatch has been delegated to the crank package, improving performance and test coverage&lt;/li&gt;&lt;li&gt;Quickstart new applications using repoze.who v2&lt;/li&gt;&lt;li&gt;Add dynamic response.charset to meta in mako templates&lt;/li&gt;&lt;li&gt;New quickstart template&lt;/li&gt;&lt;li&gt;Quickstart projects without repoze.what requirement using new auth layer&lt;/li&gt;&lt;li&gt;Fix issue with kajiki quickstart&lt;/li&gt;&lt;li&gt;Adapt the bootstrap based template to jinja changes, always provide&amp;nbsp;master.html for extensions and remove the minimal template as the&amp;nbsp;new one is minimal enough&lt;/li&gt;&lt;li&gt;Make genshi always available to have a lingua franca for pluggable apps and extensions&lt;/li&gt;&lt;li&gt;Storing sessions in encrypted cookies is easier to manage then the file based solution for newly quickstarted projects&lt;/li&gt;&lt;li&gt;tgext.admin now works with ToscaWidgets2&lt;/li&gt;&lt;li&gt;Paste quickstart command will now ask if you want to use an alternative templating system instead of asking for each one&lt;/li&gt;&lt;li&gt;New Upgrading TG2 page&lt;/li&gt;&lt;li&gt;Document new inherit option of @expose with examples&lt;/li&gt;&lt;li&gt;Fix missing kajiki setup_renderer reference and remove reference to default_renderer&lt;/li&gt;&lt;li&gt;Update Authentication documentation&lt;/li&gt;&lt;li&gt;Document flash and caching&lt;/li&gt;&lt;li&gt;Document lurl usage&lt;/li&gt;&lt;li&gt;Document WebFlash&lt;/li&gt;&lt;li&gt;Add more docs and example about app_globals and tmpl_context&lt;/li&gt;&lt;li&gt;Document ugettext and lazy_ugettext&lt;/li&gt;&lt;li&gt;Document DBsession().using_engine switch to a context manager&lt;/li&gt;&lt;li&gt;Minor fixes in MultipleDtabases documentation&lt;/li&gt;&lt;li&gt;Added documentation about master slave load balancing&lt;/li&gt;&lt;li&gt;Removing some old and now invalid parts of the documentation and add ToscaWidgets2 documentation&lt;/li&gt;&lt;li&gt;Remove some references to tw1 in core parts of the doc&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Tickets Closed&lt;/b&gt;:&lt;br /&gt;1&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Improve documentation on authentication, identification and authorization&lt;br /&gt;2&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Include lazy translations in the documentation&lt;br /&gt;11&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Document SecureFormMixin from TW&lt;br /&gt;19&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;DataGrid and pagination tutorial/\\ufffd\\ufffd\\ufffdreference missing for TG2&lt;br /&gt;21&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;sqlite db creation error in wiki20 tutorial&lt;br /&gt;26&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Documentation for app_globals unclear&lt;br /&gt;27&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Document webflash aka tg.flash&lt;br /&gt;51&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Turbogears 2.1b1 tgext.admin Doesn't Handle Boolean Options&lt;br /&gt;57&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;add a --clean option to quickstart&lt;br /&gt;68&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Simplify database migration in TG2&lt;br /&gt;70&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Migrating turbogears to pip&lt;br /&gt;71&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Create some kind of &quot;component&quot; architecture for TG2&lt;br /&gt;75&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;quickstart graphics aren't easy to modify&lt;br /&gt;137&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Proper use of url() for widgets in the documentation&lt;br /&gt;138&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Backport repoze.what-quickstart and repoze.what-pylonshq removal&lt;br /&gt;139&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Move dispatch to Crank&lt;br /&gt;140&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Verify quickstart and devtools dependency&lt;br /&gt;149&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Expose the tg.render.render function as render_template&lt;br /&gt;150&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Full ToscaWidgets2 support and make it default when quickstarting app&lt;br /&gt;151&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Minimal Search and Sorting functions in admin&lt;br /&gt;152&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Jinja Support in quickstart&lt;br /&gt;153&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Master /\\ufffd\\ufffd\\ufffd Slave database support&lt;br /&gt;154&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Merge autoreload options for template engines&lt;br /&gt;156&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Provide a way to quickstart with Kajiki&lt;br /&gt;157&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;repoze.who-1.0 is bugged when using auth_tkt&lt;br /&gt;158&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;Permit to inherit decorations on TGController subclasses&lt;br /&gt;160&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;allow_only doesn't get checked in dynamically dispatched RestController&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>   <author>    <name>Michael Pedersen</name>    <email>noreply@blogger.com</email>    <uri>http://codersbuffet.blogspot.com/search/label/turbogears</uri>   </author>   <source>    <title type=\"html\">The Coder's Buffet</title>    <subtitle type=\"html\">As a developer, I explore numerous bits of technology. Some stick, some suck, and all of them teach me. It's time for me to tell the world why I use what I use.</subtitle>    <link rel=\"self\" href=\"http://codersbuffet.blogspot.com/feeds/posts/default/-/turbogears\"/>    <id>tag:blogger.com,1999:blog-1176744327252521223</id>    <updated>2015-03-20T03:00:06+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en\">   <title type=\"html\">What\\ufffd\\ufffd\\ufffds new about Sprox 0.8</title>   <link href=\"http://blog.axant.it/archives/457\"/>   <id>http://blog.axant.it/?p=457</id>   <updated>2012-08-16T19:53:26+00:00</updated>   <content type=\"html\">&lt;p&gt;Today Sprox 0.8 got released, it is the first release to add ToscaWidgets2 support. Depending on which version of ToscaWidgets is available inside your environment Sprox will either use TW1 or TW2 to generate its forms.&lt;/p&gt; &lt;p&gt;Being mostly a TW2 oriented release it might seem that not a lot changed since the previous version, but a little gem is hidden between all the TW2 changes as Sprox now supports setting default behavior for models themselves using the &lt;strong&gt;__sprox__&lt;/strong&gt; attribute inside model declaration.&lt;/p&gt;  &lt;div class=&quot;wp_syntax&quot;&gt;&lt;div class=&quot;code&quot;&gt;&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;class&lt;/span&gt; Parent&lt;span&gt;&amp;#40;&lt;/span&gt;DeclarativeBase&lt;span&gt;&amp;#41;&lt;/span&gt;:     __tablename__ = &lt;span&gt;'parents'&lt;/span&gt; &amp;nbsp;     uid = Column&lt;span&gt;&amp;#40;&lt;/span&gt;Integer, primary_key=&lt;span&gt;True&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;     data = Column&lt;span&gt;&amp;#40;&lt;/span&gt;String&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &amp;nbsp; &lt;span&gt;class&lt;/span&gt; Child&lt;span&gt;&amp;#40;&lt;/span&gt;DeclarativeBase&lt;span&gt;&amp;#41;&lt;/span&gt;:     __tablename__ = &lt;span&gt;'children'&lt;/span&gt; &amp;nbsp;     &lt;span&gt;class&lt;/span&gt; __sprox__&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;object&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;:         dropdown_field_names = &lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'owner'&lt;/span&gt;: &lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;'data'&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt; &amp;nbsp;     uid = Column&lt;span&gt;&amp;#40;&lt;/span&gt;Integer, primary_key=&lt;span&gt;True&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;     data = Column&lt;span&gt;&amp;#40;&lt;/span&gt;String&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &amp;nbsp;     owner_id = Column&lt;span&gt;&amp;#40;&lt;/span&gt;Integer, ForeignKey&lt;span&gt;&amp;#40;&lt;/span&gt;Parent.&lt;span&gt;uid&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;     owner = relation&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'Parent'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;  &lt;p&gt;The previous code example makes Sprox use the Parent data field for selection fields when choosing the parent of Child entities.&lt;/p&gt; &lt;p&gt;Apart from making easier to share options between your AddRecordForm and EditableForm __sprox__ attribute opens a great way to customize the TurboGears admin.&lt;/p&gt; &lt;p&gt;By adding a &lt;strong&gt;__sprox__&lt;/strong&gt; attribute inside your models you will be able to change the TurboGears admin behavior without having to create a custom admin configuration. Setting __sprox__ attribute makes possible to change most sprox properties changing CrudRestController behavior, the same properties that are documented on &lt;a href=&quot;http://sprox.org&quot;&gt;sprox.org&lt;/a&gt; can be specified inside the __sprox__ attribute by simply removing the underscores.&lt;/p&gt;</content>   <author>    <name>Alessandro Molina</name>    <uri>http://blog.axant.it</uri>   </author>   <source>    <title type=\"html\">Axant Tech Blog \\ufffd\\ufffd turbogears</title>    <subtitle type=\"html\">AXANT Experience Report</subtitle>    <link rel=\"self\" href=\"http://blog.axant.it/archives/tag/turbogears/feed\"/>    <id>http://blog.axant.it/archives/tag/turbogears/feed</id>    <updated>2014-08-19T09:00:11+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">Jinja2 Bytecode Cache</title>   <link href=\"http://blog.blackchairsoft.com/2012/07/21/jinja2-bytecode-cache/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=jinja2-bytecode-cache\"/>   <id>http://blog.blackchairsoft.com/?p=106</id>   <updated>2012-07-21T16:43:51+00:00</updated>   <content type=\"html\">&lt;p&gt;I have been a bit busy and thus off from turbogears development for a while, but I see 2.2 release shaping up really good, props for Michael and Alessandro for their work.&lt;/p&gt; &lt;p&gt;Now, looking at the stuff that I&amp;#8217;m most familiar with (jinja2 support code), I have been thinking for a while that jinja2 does not have bytecode caching enable by default, in fact, there is no support at all in tg2 code for that, while Genshi does have caching available jinja2 is lacking in this area, where enabling the cache is actually very simple.&lt;/p&gt; &lt;p&gt;I created a few tests with the latest 2.2rc2 turbogears with jinja bytecode caching enabled, I used the included filesystem based cache and a custom (simple) in-memory cache, as we can see on the graphics from the benchmark the gains from enabling the cache a bit small, around 4 request per second more, but if you are looking to squeeze performance out of tg2 this could be a good option as its practically free, the cache is not really intrusive, if I make a change to the template it is reloaded automatically thus it doesn&amp;#8217;t affect the normal development workflow.&lt;/p&gt; &lt;div id=&quot;attachment_120&quot; class=&quot;wp-caption aligncenter&quot;&gt;&lt;a href=&quot;http://blog.blackchairsoft.com/wp-content/uploads/2012/07/tg_bench_cache.png&quot;&gt;&lt;img class=&quot;wp-image-120 &quot; title=&quot;tg_bench_cache&quot; src=&quot;http://blog.blackchairsoft.com/wp-content/uploads/2012/07/tg_bench_cache.png&quot; alt=&quot;&quot; width=&quot;480&quot; height=&quot;360&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Jinja2 Bytecode Benchmark: Cached vs Uncached&lt;/p&gt;&lt;/div&gt; &lt;p&gt;I should, however, do some additional test under gunicorn or uwsgi to see if there are even more substantial benefits to enabling the bytecode cache.&lt;/p&gt;</content>   <author>    <name>Carlos Daniel</name>    <uri>http://blog.blackchairsoft.com</uri>   </author>   <source>    <title type=\"html\">Blackchair Developers Blog</title>    <subtitle type=\"html\">&lt;span&gt;&lt;/span&gt;</subtitle>    <link rel=\"self\" href=\"http://blog.blackchairsoft.com/feed/atom/\"/>    <id>http://blog.blackchairsoft.com/feed/atom/</id>    <updated>2013-11-09T16:30:54+00:00</updated>   </source>  </entry>   <entry>   <title type=\"html\">Are we ready for +TurboGears 2.2.0?</title>   <link href=\"http://codersbuffet.blogspot.com/2012/07/are-we-ready-for-turbogears-220.html\"/>   <id>tag:blogger.com,1999:blog-1176744327252521223.post-1361963146407850964</id>   <updated>2012-07-16T21:32:57+00:00</updated>   <content type=\"html\">&lt;br /&gt;&lt;br /&gt;&lt;div&gt;It's time to ask that most dreaded and anticipated of questions: Are we ready to release 2.2.0?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We've pushed out out second release candidate. We've had it available for testing. Only one flaw has been found, and that can be integrated into the release easily (and since it's a security flaw, it will be).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;What say you, the community? Are you satisfied with what will be released if we were to release right now? I'd like to make the release official, and happen on Thursday, so speak before then!&lt;br /&gt;&lt;br /&gt;Note that if you reshare this, please block comments. Make people reply to &lt;b&gt;this&lt;/b&gt; post, so that we can be sure we'll see any replies in a timely fashion.&lt;br /&gt;&lt;br /&gt;Thank you!&lt;/div&gt;</content>   <author>    <name>Michael Pedersen</name>    <email>noreply@blogger.com</email>    <uri>http://codersbuffet.blogspot.com/search/label/turbogears</uri>   </author>   <source>    <title type=\"html\">The Coder's Buffet</title>    <subtitle type=\"html\">As a developer, I explore numerous bits of technology. Some stick, some suck, and all of them teach me. It's time for me to tell the world why I use what I use.</subtitle>    <link rel=\"self\" href=\"http://codersbuffet.blogspot.com/feeds/posts/default/-/turbogears\"/>    <id>tag:blogger.com,1999:blog-1176744327252521223</id>    <updated>2015-03-20T03:00:06+00:00</updated>   </source>  </entry>   <entry>   <title type=\"html\">Custom Renderers with Dynamic Content on TurboGears</title>   <link href=\"http://codersbuffet.blogspot.com/2012/07/custom-renderers-with-dynamic-content.html\"/>   <id>tag:blogger.com,1999:blog-1176744327252521223.post-4749025949135867943</id>   <updated>2012-07-14T21:48:37+00:00</updated>   <content type=\"html\">One of the most common questions we get on the &lt;a href=&quot;http://www.turbogears.org/&quot;&gt;TurboGears&lt;/a&gt; &lt;a href=&quot;http://groups.google.com/group/turbogears&quot;&gt;mailing&lt;/a&gt; &lt;a href=&quot;http://groups.google.com/group/turbogears-trunk&quot;&gt;lists&lt;/a&gt; is actually a group of questions:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;How do I make a controller return a customized PDF?&lt;/li&gt;&lt;li&gt;How do I display a custom graphic to a user?&lt;/li&gt;&lt;li&gt;How do I return an Excel spreadsheet?&lt;/li&gt;&lt;/ul&gt;This all boils down to the same question: How do I generate dynamic content that is tailored for the user and is returned in a non-HTML format? While I won't answer for each format (because of the fact that every format gets built differently), I will show you how to tell &lt;a href=&quot;http://www.turbogears.org/&quot;&gt;TurboGears&lt;/a&gt; about the format you want to send to the user.&lt;br /&gt;&lt;br /&gt;&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;The actual process of generating the output can be quite complex. For instance, if you are generating a PDF, you could be using &lt;a href=&quot;http://www.reportlab.com/software/opensource/&quot;&gt;ReportLab&lt;/a&gt;. If you're generating an Excel 2003 compatible file, you could be using &lt;a href=&quot;http://www.python-excel.org/&quot;&gt;Python-Excel&lt;/a&gt;. The list goes on and on. Because of this, I'm going to focus on a simple example: The &lt;a href=&quot;http://en.wikipedia.org/wiki/VCard&quot;&gt;vCard format&lt;/a&gt;. If you want to have your application send vCards (.vcf files), this example will show you how to do it, from beginning to end.&lt;br /&gt;&lt;br /&gt;Surprisingly enough, this cen be almost entirely done by modifying the configuration of your &lt;a href=&quot;http://www.turbogears.org/&quot;&gt;TurboGears&lt;/a&gt; application. In my case, I added a class to find (and load) a template file, a class to manage the actual rendering, and then changed the base configuration class to register those two classes. I put everything except the template into my app_cfg.py file.&lt;br /&gt;&lt;br /&gt;I'll show the classes, and then break down what each piece of the class does.&lt;br /&gt;&lt;h2&gt;          &lt;span&gt;The Template Loader&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;from genshi.template import TemplateLoader, NewTextTemplate&lt;br /&gt;&lt;br /&gt;class VCardTemplateLoader(TemplateLoader):&lt;br /&gt;    template_extension = '.vcf'&lt;br /&gt;&lt;br /&gt;    def get_dotted_filename(self, filename):&lt;br /&gt;        if not filename.endswith(self.template_extension):&lt;br /&gt;            finder = config['pylons.app_globals'].dotted_filename_finder&lt;br /&gt;            filename = finder.get_dotted_filename(&lt;br /&gt;                    template_name=filename,&lt;br /&gt;                    template_extension=self.template_extension)&lt;br /&gt;        return filename&lt;br /&gt;&lt;br /&gt;    def load(self, filename, relative_to=None, cls=None, encoding=None):&lt;br /&gt;        &quot;&quot;&quot;Actual loader function.&quot;&quot;&quot;&lt;br /&gt;        return TemplateLoader.load(&lt;br /&gt;                self, self.get_dotted_filename(filename),&lt;br /&gt;                relative_to=relative_to, cls=NewTextTemplate, encoding=encoding)&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;First, we specify the file extension for the template. The normal file extension is .vcf, so I'm going to use that.&lt;br /&gt;&lt;br /&gt;Next, the method get_dotted_filename is provided. This function attempts to find a real operating system filename for a given dotted filename that was passed in. A dotted filename will have dots as the path separators. So, for instance, a file name of &quot;/my/path/file.vcf&quot;, in dotted form, will be &quot;my.path.file&quot;. This function will be given the name that is provided to the @expose decorator. Since we don't have any need for special behavior here, we just go with the default dotted_filename_finder. If there is a need to change the normal search method for finding the dotted filename, we can do so here.&lt;br /&gt;&lt;br /&gt;Finally, the load method: This method's job is to return an object that can be rendered. In this case, it will return an object provided by Genshi that represents a loaded template, ready to be rendered. The return value of this method will be passed into the __init__ method of the Renderer class, up next.&lt;br /&gt;&lt;h2&gt;     &lt;span&gt;The Renderer&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;from pylons import templating&lt;br /&gt;&lt;br /&gt;class RenderVCard(object):&lt;br /&gt;    &quot;&quot;&quot;Singleton that can be called as the vcard render function.&quot;&quot;&quot;&lt;br /&gt;&lt;br /&gt;    genshi_functions = {} # auxiliary Genshi functions loaded on demand&lt;br /&gt;&lt;br /&gt;    def __init__(self, loader):&lt;br /&gt;        if not self.genshi_functions:&lt;br /&gt;            from genshi import HTML, XML&lt;br /&gt;            self.genshi_functions.update(HTML=HTML, XML=XML)&lt;br /&gt;        self.load_template = loader.load&lt;br /&gt;&lt;br /&gt;    def __call__(self, template_name, template_vars, **kwargs):&lt;br /&gt;        &quot;&quot;&quot;Render the template_vars with the Genshi template.&quot;&quot;&quot;&lt;br /&gt;        template_vars.update(self.genshi_functions)&lt;br /&gt;&lt;br /&gt;        doctype = 'text/x-vcard'&lt;br /&gt;        method='vcf'&lt;br /&gt;        kwargs['doctype'] = doctype&lt;br /&gt;        kwargs['method'] = method&lt;br /&gt;&lt;br /&gt;        def render_template():&lt;br /&gt;            template = self.load_template(template_name)&lt;br /&gt;            return template.generate(**template_vars).render(encoding=None)&lt;br /&gt;&lt;br /&gt;        return templating.cached_template(&lt;br /&gt;            template_name, render_template,&lt;br /&gt;            **kwargs)&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;This class is set up as a singleton, allowing any thread to use it without having to reinitialize it all the time. genshi_functions are put in place as a dictionary for the class, allowing us to have only one reference to the HTML and XML functions from Genshi itself.&lt;br /&gt;&lt;br /&gt;The __init__ method receives an instance of the loader class (from above). Since this rendered is aware that we are using Genshi, it gets a reference to the Genshi HTML and XML functions, setting them up in the genshi_functions dictionary (if this was not already done). It then saves a reference to the loader.&lt;br /&gt;&lt;br /&gt;The __call__ method allows the renderer to be called by TurboGears. Failure to include this method will result in TurboGears being unable to render your custom content type, so make sure to provide it! It will be given a name (the name provided to the @expose decorator in your controller), a dictionary of variables, can receive other (optional) keyword arguments.&lt;br /&gt;&lt;br /&gt;In our case, we are only going to care about the method and doctype keywords, and even then only to set them to their correct values. &amp;nbsp;The template_vars dictionary will be updated to include the Genshi functions, allowing HTML and XML to be referenced in the template.&lt;br /&gt;&lt;br /&gt;Finally, we declare a function inside of the __call__ method. This allows us to use variables defined in the main function optionally. The final step, the return statement, will attempt to cache the result. If it cannot, or if it cannot use the cached result, then it will call the nested function (render_template), which can use all the variables defined in this scope. We could, alternately, just return the result of render_template, instead of the cached_template.&lt;br /&gt;&lt;h2&gt;    &lt;span&gt;The Config&lt;/span&gt;&lt;/h2&gt;&lt;pre&gt;from tg.configuration import AppConfig, config&lt;br /&gt;&lt;br /&gt;class MyProjectConfig(AppConfig):&lt;br /&gt;    def setup_vcard_renderer(self):&lt;br /&gt;        loader = VCardTemplateLoader(search_path=self.paths.templates,&lt;br /&gt;                                auto_reload=self.auto_reload_templates)&lt;br /&gt;&lt;br /&gt;        self.render_functions.vcard = RenderVCard(loader)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;base_config = MyProjectConfig()&lt;br /&gt;base_config.renderers = []&lt;br /&gt;#Set the default renderer&lt;br /&gt;base_config.default_renderer = 'genshi'&lt;br /&gt;# Add vcard rendering (genshi plain text renderer)&lt;br /&gt;base_config.renderers.append('vcard')&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;Here, we define a function and we must be careful about the name: setup_vcard_renderer will set up a rendered named &quot;vcard&quot;, and that will be put at the front of the @expose decorator. So, if we want to write this:&lt;br /&gt;&lt;br /&gt;@expose('vcard:myvcard')&lt;br /&gt;&lt;br /&gt;We're okay. If we want to write this:&lt;br /&gt;&lt;br /&gt;@expose('vcf:myvcard')&lt;br /&gt;&lt;br /&gt;Then the setup function must be named &quot;setup_vcf_renderer&quot;. We also would have to change the last line of the function to say &quot;self.render_functions.vcf&quot; instead of &quot;self.render_functions.vcard&quot;.&lt;br /&gt;&lt;br /&gt;Note that the body of the setup_renderer function simply creates a loader, and then sets the value for the renderer function to be a new instance of the renderer class from above.&lt;br /&gt;&lt;h2&gt; The Template&lt;/h2&gt;That's it for code changes. Since I chose to make this into a Genshi rendered template, I also had to write the template. Here it is:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;{% python from datetime import datetime; now = datetime.now(); urls = user.links_to_dict(); phones=user.phones_to_dict() %}BEGIN:VCARD&lt;br /&gt;VERSION:2.1&lt;br /&gt;FN:${user.display_name}&lt;br /&gt;{% if user.title %}TITLE:${user.title}{% end %}&lt;br /&gt;{% for phone in phones %}TEL;${phone.upper()};VOICE;${phones[phone]}{% end %}&lt;br /&gt;ADR;HOME:;;${user.streetaddress.replace('\\ ','=0D=0A')};${user.city};${user.state_province if user.state_province else &quot;&quot;};${user.postal_code};${user.country if user.country else &quot;&quot;}&lt;br /&gt;LABEL;HOME;ENCODING=QUOTED-PRINTABLE:${user.streetaddress.replace('\\ ','=0D=0A')}=0D=0A${user.city}, ${user.state_province if user.state_province else &quot;&quot;} ${user.postal_code}=0D=0A${user.country if &lt;br /&gt;user.country else &quot;&quot;}&lt;br /&gt;{% if user.email_address %}EMAIL;PREF;INTERNET:${user.email_address}{% end %}&lt;br /&gt;{% if 'homepage' in urls %}URL:${urls['homepage']}{% end %}&lt;br /&gt;REV:${'%04d%02d%02dT%02d%02d%02dZ' % (now.year, now.month, now.day, now.hour, now.minute, now.second)}&lt;br /&gt;END:VCARD&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;And that's it. Very simple template, as you can see. It does rely on functions and attributes that are in the user model, but that's a little outside of what I want to address here.&lt;br /&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;With minor variations, you can take total control over what you want to do. For instance, you can change the renderer class to one that looks at data in the request (tg.request), and generates output graphs using &lt;a href=&quot;http://www.imagemagick.org/script/index.php&quot;&gt;ImageMagick&lt;/a&gt; with .png file extensions. You could build your own XML templating syntax (or, use &lt;a href=&quot;http://www.reportlab.com/software/reportlab-plus/&quot;&gt;ReportLab Plus&lt;/a&gt;) to make .pdf files (again, changing the renderer class).&lt;br /&gt;&lt;br /&gt;The possibilities are endless. You have control, from the way the template is found, to the way it is loaded, to the way it is rendered. If you would like to see this code in one file, it's available in &lt;a href=&quot;http://sourceforge.net/p/turbogears2/tg2tut/ci/master/tree/hiringpond/hiringpond/config/app_cfg.py&quot;&gt;our tutorials repository&lt;/a&gt;.</content>   <author>    <name>Michael Pedersen</name>    <email>noreply@blogger.com</email>    <uri>http://codersbuffet.blogspot.com/search/label/turbogears</uri>   </author>   <source>    <title type=\"html\">The Coder's Buffet</title>    <subtitle type=\"html\">As a developer, I explore numerous bits of technology. Some stick, some suck, and all of them teach me. It's time for me to tell the world why I use what I use.</subtitle>    <link rel=\"self\" href=\"http://codersbuffet.blogspot.com/feeds/posts/default/-/turbogears\"/>    <id>tag:blogger.com,1999:blog-1176744327252521223</id>    <updated>2015-03-20T03:00:06+00:00</updated>   </source>  </entry>   <entry>   <title type=\"html\">Announcing TurboGears 2.2.0rc2</title>   <link href=\"http://codersbuffet.blogspot.com/2012/06/announcing-turbogears-220rc2.html\"/>   <id>tag:blogger.com,1999:blog-1176744327252521223.post-1242076466537967835</id>   <updated>2012-06-27T10:55:04+00:00</updated>   <content type=\"html\">&lt;br /&gt;Hello everybody. It's been a while, but at least I have some good news to share: We've just put 2.2.0rc2 out.&lt;br /&gt;&lt;br /&gt;At this point, unless we find something seriously wrong, this is likely to become to 2.2 release officially. I've worked with Alessandro, and cleared up the issues we were seeing on jenkins.turbogears.org. We've upgraded many of our support packages. We've added more renderers, and more options. 2.2 looks amazing to me, and I think you'll feel the same way.&lt;br /&gt;&lt;br /&gt;The changes are listed below, but here's how to get it and try it out:&lt;br /&gt;&lt;br /&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;virtualenv ${HOME}/tg22rc2&lt;br /&gt;source ${HOME}/tg22rc2/bin/activate&lt;br /&gt;easy_install -i http://tg.gy/220rc2 tg.devtools&lt;br /&gt;paster quickstart tgtest&lt;br /&gt;# answer the questions here how you see fit&lt;br /&gt;cd tgtest&lt;br /&gt;python setup.py tgtestdevelop&lt;br /&gt;paster setup-app development.ini&lt;br /&gt;paster serve development.ini&lt;br /&gt;# now point a web browser at http://localhost:8080/&lt;/blockquote&gt;&lt;br /&gt;You should be up and running within 5 minutes.&lt;br /&gt;&lt;br /&gt;Here's the changes:&lt;br /&gt;&lt;br /&gt;TG2 Core Updates:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;Template engines in tw2.core could collide, based on template extensions. Fixed.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Subclassed controllers now keep the decorations inherited from their parents&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;repoze.who v2 is now supported&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Form validation now supports TW2 validation dictionaries, less dependent on FormEncode&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;When multiple renderers are registered for the same content type, the default renderer is now preferred&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;URL keyword args, marked for removal in 2.2, are now removed.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Ming setup issues are resolved, and Ming is in its own module&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;repoze.who v2 is not compatible with repoze.what v1. New compatible module has been provided to make code change minimal.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Jinja templates must now have the extension .jinja Conflicts with .html were being found when Genshi and Jinja were mixed in the same project.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Mako option &quot;reloadfromdisk&quot; has been deprecated. Use &quot;auto_reload_templates&quot; as this is the default for other rendering engines&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;__before__ and __after__ were renamed to _before and _after in the past. Code and documentation now reflects this.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;Devtools / Quickstart Updates&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;span&gt;New applications will be set up to use repoze.who v2 by default&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Improvements to the quickstart look, layout, and content&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Quickstarts now support Kajiki as a rendering engine&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Twitter Bootstrap support in quickstart&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Genshi is always available in new quickstarted projects. Provides a common template language for use in extensions&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;Sessions are now stored in encrypted cookies&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;</content>   <author>    <name>Michael Pedersen</name>    <email>noreply@blogger.com</email>    <uri>http://codersbuffet.blogspot.com/search/label/turbogears</uri>   </author>   <source>    <title type=\"html\">The Coder's Buffet</title>    <subtitle type=\"html\">As a developer, I explore numerous bits of technology. Some stick, some suck, and all of them teach me. It's time for me to tell the world why I use what I use.</subtitle>    <link rel=\"self\" href=\"http://codersbuffet.blogspot.com/feeds/posts/default/-/turbogears\"/>    <id>tag:blogger.com,1999:blog-1176744327252521223</id>    <updated>2015-03-20T03:00:06+00:00</updated>   </source>  </entry>   <entry>   <title type=\"html\">In which I avoid the inverse unicode sandwich</title>   <link href=\"http://threebean.org/blog/sieve\"/>   <id>http://threebean.org/blog/sieve</id>   <updated>2012-06-22T22:00:00+00:00</updated>   <content type=\"html\">&lt;div class=&quot;document&quot;&gt; &lt;p&gt;&lt;strong&gt;Problem #1&lt;/strong&gt; - I need to test tons of HTML output for correctness (because I maintain &lt;a class=&quot;reference external&quot; href=&quot;http://toscawidgets.org&quot;&gt;toscawidgets2&lt;/a&gt;). That output varies slightly because &lt;tt class=&quot;docutils literal&quot;&gt;tw2&lt;/tt&gt; supports five different templating languages (mako, genshi, jinja2, kajiki, and chameleon).  Using double-equals (&lt;tt class=&quot;docutils literal&quot;&gt;==&lt;/tt&gt;) just won't do it.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Solution #1&lt;/strong&gt; - We used &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/strainer&quot;&gt;strainer&lt;/a&gt;.  It works!&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Problem #2&lt;/strong&gt; - Imagine porting &lt;a class=&quot;reference external&quot; href=&quot;http://bit.ly/O57MFF&quot;&gt;this&lt;/a&gt; to Python 3.  Yes, that's right.  The encoding is sniffed by hand and then used to encode regular expressions; these are in turn applied to parse XML. Think &amp;quot;&lt;a class=&quot;reference external&quot; href=&quot;http://bit.ly/O58xi7&quot;&gt;inverse unicode sandwich&lt;/a&gt; with a side of &lt;a class=&quot;reference external&quot; href=&quot;http://bit.ly/O58lzf&quot;&gt;Cthulhu&lt;/a&gt;.&amp;quot;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Solution #2&lt;/strong&gt; - I wrote &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/sieve&quot;&gt;sieve&lt;/a&gt;: a baby module child of one corner of FormEncode and another corner of strainer.  It &lt;a class=&quot;reference external&quot; href=&quot;http://travis-ci.org/#!/ralphbean/sieve&quot;&gt;works on pythons 2.6, 2.7, and 3.2&lt;/a&gt;.  If you like, you may use it:&lt;/p&gt;   &lt;div class=&quot;pygments_monokai&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sieve.operators&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq_xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;foo&amp;gt;&amp;lt;bar&amp;gt;Value&amp;lt;/bar&amp;gt;&amp;lt;/foo&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;... &amp;lt;foo&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;...     &amp;lt;bar&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;...         Value&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;...     &amp;lt;/bar&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;... &amp;lt;/foo&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;... &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq_xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;foo&amp;gt;&amp;lt;bar&amp;gt;Value&amp;lt;/bar&amp;gt;&amp;lt;/foo&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 'needle' in a 'haystack'&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt;    &lt;p&gt;p.s. -- I looked into &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/xmldiff&quot;&gt;xmldiff&lt;/a&gt;. Awesome!&lt;/p&gt; &lt;/div&gt;</content>   <author>    <name>Ralph Bean</name>    <uri>http://threebean.org/blog</uri>   </author>   <source>    <title type=\"html\">[three]Bean</title>    <subtitle type=\"html\">Creates a Blog</subtitle>    <link rel=\"self\" href=\"http://threebean.org/blog/category/turbogears/feed/index.xml\"/>    <id>http://threebean.org/blog/category/turbogears/feed/index.xml</id>    <updated>2015-03-19T14:30:06+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">Turbogears 2.2 Beta: Benchmarking</title>   <link href=\"http://blog.blackchairsoft.com/2012/04/11/turbogears-2-2-beta-benchmarking/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=turbogears-2-2-beta-benchmarking\"/>   <id>http://blog.blackchairsoft.com/?p=89</id>   <updated>2012-04-11T09:02:31+00:00</updated>   <content type=\"html\">&lt;p&gt;TG 2.2 beta has been released and with it many improvements, I was quite curious about the results of the performance enhancements derived of moving TG to Crank, I do not expect to see a big improvement as this is only a Beta and there is still many things to do and tweak before final release, also the real performance work will come from the 2.3 branch, but for now I would like to post my benchmark results.&lt;/p&gt; &lt;p&gt;I&amp;#8217;m using the same benchmarking method as I used to tests the templating systems, this is now easier as 2.2 integrates many jinja improvements, the difference this time is that I will be benchmarking the build-in Paster server vs Gunicorn vs UWSGI, lets see how it goes.&lt;/p&gt; &lt;h2&gt;Paster&lt;/h2&gt; &lt;p&gt;&lt;a href=&quot;http://blog.blackchairsoft.com/wp-content/uploads/2012/04/tg_bench_paster.png&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-108&quot; title=&quot;tg_bench_paster&quot; src=&quot;http://blog.blackchairsoft.com/wp-content/uploads/2012/04/tg_bench_paster-300x225.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;225&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;As we can see templating performance status quo is more or less the same, Genshi is still slow but there has been good improvements, the environ page rendering is now as fast as other templates, but overall is Genshi in 2nd and Jinja and Mako more or less tied in 1st place.&lt;/p&gt; &lt;p&gt;Overall performance has improved in comparison with 2.1 as you can see, ~20 rps more has been squeezed in this release.&lt;/p&gt; &lt;h2&gt;Gunicorn&lt;/h2&gt; &lt;p&gt;gunicorn_paster 0.14.2 was used in this test, running with 2 sync workers.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://blog.blackchairsoft.com/wp-content/uploads/2012/04/tg_bench_gunicorn.png&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-107&quot; title=&quot;tg_bench_gunicorn&quot; src=&quot;http://blog.blackchairsoft.com/wp-content/uploads/2012/04/tg_bench_gunicorn-300x225.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;225&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;With Gunicorn we can see that the Genshi performance on the environ rendering test is no fluke, here Jinja is only a bit faster than Mako, overall speed wise 2.2 Beta is very similar to 2.1 under Gunicorn but Mako is now faster (as fast as Jinja) and Genshi has got a nice speedup too.&lt;/p&gt; &lt;h2&gt;uWSGI&lt;/h2&gt; &lt;p&gt;uwsgi 1.1.2 was used for this test, with 2 workers, with Master option (-M), using &amp;#8211;http :8080 option to serve directly instead of using uwsgi protocol (to serve under nginx).&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://blog.blackchairsoft.com/wp-content/uploads/2012/04/tg_bench_uwsgi.png&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-109&quot; title=&quot;tg_bench_uwsgi&quot; src=&quot;http://blog.blackchairsoft.com/wp-content/uploads/2012/04/tg_bench_uwsgi-300x225.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;225&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Finally the uWSGI server, here we can see TG 2.2 shine, uWSGI is a bit faster overall than Gunicorn, templating performance is similar in this test, Jinja and Mako are more or less tied.&lt;/p&gt; &lt;h2&gt;Closing&lt;/h2&gt; &lt;p&gt;As we can see Turbogears 2 is pretty much alive and kicking, development is going to ramp up pretty soon as tw2 sprints and migration has keeped the TG team busy but that is mostly done, it would be also awesome if people could give TG 2.2 Beta a try and report problems, to do so install as per TG Instructions but use the beta package repository instead of the regular one:&lt;/p&gt; &lt;pre&gt;easy_install -i &lt;a href=&quot;http://tg.gy/beta&quot; target=&quot;_blank&quot;&gt;http://tg.gy/beta&lt;/a&gt; tg.devtools&lt;/pre&gt; &lt;div&gt;All other things are the same as 2.1, meaning that you can follow the docs and guides and should work without changes, otherwise that should be reported.&lt;/div&gt;</content>   <author>    <name>Carlos Daniel</name>    <uri>http://blog.blackchairsoft.com</uri>   </author>   <source>    <title type=\"html\">Blackchair Developers Blog</title>    <subtitle type=\"html\">&lt;span&gt;&lt;/span&gt;</subtitle>    <link rel=\"self\" href=\"http://blog.blackchairsoft.com/feed/atom/\"/>    <id>http://blog.blackchairsoft.com/feed/atom/</id>    <updated>2013-11-09T16:30:54+00:00</updated>   </source>  </entry>   <entry>   <title type=\"html\">Announcing TurboGears 2.1.5 Release</title>   <link href=\"http://codersbuffet.blogspot.com/2012/04/announcing-turbogears-215-release.html\"/>   <id>tag:blogger.com,1999:blog-1176744327252521223.post-4964725516746700265</id>   <updated>2012-04-07T00:18:07+00:00</updated>   <content type=\"html\">&lt;div&gt;The TurboGears team is proud to announce the release of TurboGears 2.1.5!&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This release has many new features and bugfixes, all of them listed below. Due to issues with getting 2.2 released, we have chosen to produce another 2.1 based released. As a result, this release will be the final 2.1.x release, and the final release that will support Python 2.4.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We strongly recommend you upgrade. We are seeing benefits of newer template engines and faster response speeds, and it's only going to improve.&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Backport template rendering parameters from 2.2&lt;/li&gt;&lt;li&gt;Add hook for render calls to be able to hook even partials&lt;/li&gt;&lt;li&gt;Test unit for validation messing hooks&lt;/li&gt;&lt;li&gt;Improved Jinja template support for Python 2.4&lt;/li&gt;&lt;li&gt;Avoid running wrong decoration hooks when controller is switched due to a validation error&lt;/li&gt;&lt;li&gt;Permit to avoid doctype injection when manually rendering templates with tg.render.render&lt;/li&gt;&lt;li&gt;Added new new command (tgdevelop tgdeps) to setup.cfg to help with creating a good working virtualenv.&lt;/li&gt;&lt;li&gt;Added jinja2 template loader with dotted notation.&lt;/li&gt;&lt;li&gt;Fixed multiple paginators in same page&lt;/li&gt;&lt;li&gt;Fixed missing tw.forms dependency when auth is disabled&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>   <author>    <name>Michael Pedersen</name>    <email>noreply@blogger.com</email>    <uri>http://codersbuffet.blogspot.com/search/label/turbogears</uri>   </author>   <source>    <title type=\"html\">The Coder's Buffet</title>    <subtitle type=\"html\">As a developer, I explore numerous bits of technology. Some stick, some suck, and all of them teach me. It's time for me to tell the world why I use what I use.</subtitle>    <link rel=\"self\" href=\"http://codersbuffet.blogspot.com/feeds/posts/default/-/turbogears\"/>    <id>tag:blogger.com,1999:blog-1176744327252521223</id>    <updated>2015-03-20T03:00:06+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">Internet in Mexico, a story on monopolies</title>   <link href=\"http://blog.blackchairsoft.com/2012/03/31/internet-in-mexico-a-story-on-monopolies/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=internet-in-mexico-a-story-on-monopolies\"/>   <id>http://blog.blackchairsoft.com/?p=85</id>   <updated>2012-03-31T17:17:45+00:00</updated>   <content type=\"html\">&lt;p&gt;Internet in Mexico is something relatively new, I recall 10 years ago we had dial-up, then a few years later ADSL went live and we had 256kbps, the ISP has been steadily increasing its capacity and plans, the lowest bandwidth plan is now 1mbps, I have installed in my home 2mbps adsl line with phone line which runs around 50dlls monthly.&lt;/p&gt; &lt;p&gt;Now talking about prices, according to OECD, Mexico has one of the most expensive internet services of its member countries, and as you can see they are right, 50 dollars for only 2mbps is practically unheard from any other country on the OECD, this is very much attributed to the phone company Telmex, which is currently one of the biggest monopolies in our country from one of the richest man in the world (Carlos Slim).&lt;/p&gt; &lt;p&gt;This has been changing a bit lately, a few months ago my speed boosted from 2mbps to 20mbps, wow!, 20mbps for 50dlls with phone line!, that is a game changer!, we practically went up to being competitive on the OECD tables, but of course I got disappointing a few days ago, speeds got back to 10mbps, then to 5mbps where they are actually, 5 mbps for 50 dollars is still one of the most expensive internet services according OECD.&lt;/p&gt; &lt;p&gt;All in all we know monopolies are detrimental to a free capitalist economy, and Mexico is really full of monopolies, raging from government held monopolies (some really silly like electricity generation), to private monopolies (Telmex), duopolis (Azteca TV, Televisa), even at municipal scale there are monopolies which really impact negatively like the local transportation, bus transportation in the city where I live is a concession from the government to a single group, now we have problems with a transport system that is inefficient, in bad conditions and expensive, corruption in Mexico really aggravates this problem, take for example local transportation, if another group wanted to enter the fray and offer better and cheaper services it would have to acquire a concession from the government, which will surely reject them, this happens at all levels, phone and ISP competitors arevery new thanks to Telmex colluding with the government to not let other companies enter, even now any new company to enter the telecommunications segment has it very hard.&lt;/p&gt; &lt;p&gt;In the end ranting is mostly the only thing we can do, as even trying to break monopolies by opening your own company is not possible in this country, fortunately there are still many other segments which are not occupied by monopolies and where entrepreneurs can get in a grow.&lt;/p&gt;</content>   <author>    <name>Carlos Daniel</name>    <uri>http://blog.blackchairsoft.com</uri>   </author>   <source>    <title type=\"html\">Blackchair Developers Blog</title>    <subtitle type=\"html\">&lt;span&gt;&lt;/span&gt;</subtitle>    <link rel=\"self\" href=\"http://blog.blackchairsoft.com/feed/atom/\"/>    <id>http://blog.blackchairsoft.com/feed/atom/</id>    <updated>2013-11-09T16:30:54+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">Developing on OSX</title>   <link href=\"http://blog.blackchairsoft.com/2012/03/29/developing-on-osx/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=developing-on-osx\"/>   <id>http://blog.blackchairsoft.com/?p=86</id>   <updated>2012-03-30T05:01:47+00:00</updated>   <content type=\"html\">&lt;p&gt;I have always seen a lot of people speak highly of Mac OSX as a development platform and Apple hardware as a high quality platform in general, lately I have been in charge of some mobile development, a small OpenGL app, which I initially wrote on my linux machine taking care of making it very cross platform, then it came the time to port to IOS, the port was pretty simple and most things worked out of the box without much trouble.&lt;/p&gt; &lt;p&gt;As much as it sounds like a story with a happy ending I got to say it was a short but hellish walk when porting, stuff mostly worked ok, there where things like OpenAL that did not work as expected and required a bit of extra work, but the one thing that drove me mad was the general OSX interface, not the graphical interface per see, but the details that where totally different from what I was used to, like keybindings, for example, when editing code, I expect the End key to go to the end of the line, on OSX it just scrolls at the end of the file without moving the cursor, stuff like that really trowed me out of balance and maked developed way slower than it should and very painful, while I do not doubt you can get accustomed to OSX but coming from other OSes where stuff work a way (which by the way works exactly the same even on Windows and other OSes) and then having it all flipped it just pisses me of and lowers my productivity.&lt;/p&gt; &lt;p&gt;Personally I would not have an Apple machine as my main development workstation or laptop, I&amp;#8217;m already too accustomed to Linux and its quirks, OSX is a whole new set of quirks to workout on a platform which is less flexible to me for a relatively little gain.&lt;/p&gt;</content>   <author>    <name>Carlos Daniel</name>    <uri>http://blog.blackchairsoft.com</uri>   </author>   <source>    <title type=\"html\">Blackchair Developers Blog</title>    <subtitle type=\"html\">&lt;span&gt;&lt;/span&gt;</subtitle>    <link rel=\"self\" href=\"http://blog.blackchairsoft.com/feed/atom/\"/>    <id>http://blog.blackchairsoft.com/feed/atom/</id>    <updated>2013-11-09T16:30:54+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-us\">   <title type=\"html\">TurboGears Development Blog</title>   <link href=\"http://www.mengu.net/post/turbogears-development-blog\"/>   <id>http://www.mengu.net/post/turbogears-development-blog</id>   <updated>2012-03-27T20:39:23+00:00</updated>   <content type=\"html\">&lt;p&gt;A new era for TurboGears has started.&lt;/p&gt;  &lt;p&gt;From core developers to community members, we have started doing something for TurboGears. It deserves it. We love it. We want to spread it. That's why, if you are wondering.&lt;/p&gt;  &lt;p&gt;I have started a blog on TurboGears development. For you. For any web developer. For any Python web developer. You will start from scratch and become an advanced TurboGears developer. You will like it. You will become very productive with TurboGears. &lt;/p&gt;  &lt;p&gt;You can visit the blog at &lt;a href=&quot;http://tglogs.wordpress.com&quot;&gt;http://tglogs.wordpress.com&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Let me know your ideas, your suggestions and feedback.&lt;/p&gt;  &lt;p&gt;Enjoy!&lt;/p&gt;</content>   <author>    <name>Mengu Kagan</name>    <uri>http://www.mengu.net/</uri>   </author>   <source>    <title type=\"html\">Mengu.net - turbogears</title>    <subtitle type=\"html\">mengu on web programming.</subtitle>    <link rel=\"self\" href=\"http://www.mengu.net/feed/turbogears\"/>    <id>http://www.mengu.net/feed/turbogears</id>    <updated>2015-03-20T04:00:05+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">Turbogears Template Benchmark</title>   <link href=\"http://blog.blackchairsoft.com/2012/03/21/turbogears-template-benchmark/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=turbogears-template-benchmark\"/>   <id>http://blog.blackchairsoft.com/?p=67</id>   <updated>2012-03-22T03:18:06+00:00</updated>   <content type=\"html\">&lt;p&gt;I have been doing some work on benchmarking the many template systems under turbogears, currently the most visible are Genshi (default), Mako and now Jinja (which will be better integrated from 2.2 onwards), thus I made a simple benchmark to test the difference on speed with each template.&lt;/p&gt; &lt;p&gt;First I&amp;#8217;m using TurboGears2 from git branch 215 plus my jinja tg2devtools branch, this in order to preview the jinja based quickstart template. For each templating system a fresh project is created with all defaults, each project is setup and run under paster and gunicorn for each test (this to compare development environment and a more production like environment).&lt;/p&gt; &lt;p&gt;The tests where done using apache bench (ab2) v2.3, with concurrency of 2 and 1000 tests, I tested 4 pages, the welcome (index), the environ page (where it renders a table from environment variables), the manager_permission_only page and the editor_user_only page, last 2 ones to test the template+sqlalchemy.&lt;/p&gt; &lt;p&gt;Finally those tests are not absolute and only represent performance on my machine but should give you a good idea of the performance differences between templating systems, the test machine is a AMD A6-3410MX CPU with 4 cores at 1.6ghz, 4GB RAM and 500gb 5400rpm hard disk, running under opensuse 12.1 with custom Linux kernel 3.3.0&lt;/p&gt; &lt;p&gt;Result data was processed with python using matplotlib to do the graphs.&lt;/p&gt; &lt;h2&gt;Paster tests&lt;/h2&gt; &lt;p&gt;&lt;a href=&quot;http://blog.blackchairsoft.com/wp-content/uploads/2012/03/tg_paste_bench.png&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-78&quot; title=&quot;tg_paste_bench&quot; src=&quot;http://blog.blackchairsoft.com/wp-content/uploads/2012/03/tg_paste_bench-300x225.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;225&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;As we can see here both mako and jinja outperform genshi by a good margin, in this test jinja is slightly faster. What is interesting however is that the welcome page Genshi is almost as fast a jinja, I tough this was a glitch or something but it works out consistently after several tests, seems to me that because the welcome page is relatively static genshi does a good job caching.&lt;/p&gt; &lt;h2&gt;Gunicorn tests&lt;/h2&gt; &lt;p&gt;Gunicorn tests are done by running gunicorn_paste, with 2 sync workers. The results:&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://blog.blackchairsoft.com/wp-content/uploads/2012/03/tg_gunicorn_bench.png&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-77&quot; title=&quot;tg_gunicorn_bench&quot; src=&quot;http://blog.blackchairsoft.com/wp-content/uploads/2012/03/tg_gunicorn_bench-300x225.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;225&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Here we see it again, on the welcome page Genshi performs surprisingly on par with Jinja and Mako, but other tests really show, here Jinja is consistently faster than Mako.&lt;/p&gt; &lt;h2&gt;Conclusions&lt;/h2&gt; &lt;p&gt;As we can see Jinja is a good option for those looking for extra performance and are familiar already with Django templates, otherwise Mako is another great performance alternative under tg2.&lt;/p&gt; &lt;p&gt;Finally, I tried this test under pypy to see if I could squeeze even a bit more performance but the results where not consistent, the jit performance varies a lot, sometimes I get over 1000 request per second after jit warmup, but overall the results keep fluctuating, I can&amp;#8217;t really say that running under pypy is a win for TG, although results seem to imply that it is a bit faster most of the time.&lt;/p&gt;</content>   <author>    <name>Carlos Daniel</name>    <uri>http://blog.blackchairsoft.com</uri>   </author>   <source>    <title type=\"html\">Blackchair Developers Blog</title>    <subtitle type=\"html\">&lt;span&gt;&lt;/span&gt;</subtitle>    <link rel=\"self\" href=\"http://blog.blackchairsoft.com/feed/atom/\"/>    <id>http://blog.blackchairsoft.com/feed/atom/</id>    <updated>2013-11-09T16:30:54+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">TurboGears2 Jinja quickstart template</title>   <link href=\"http://blog.blackchairsoft.com/2012/03/21/turbogears2-jinja-quickstart-template/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=turbogears2-jinja-quickstart-template\"/>   <id>http://blog.blackchairsoft.com/?p=61</id>   <updated>2012-03-22T01:36:05+00:00</updated>   <content type=\"html\">&lt;p&gt;I have currently submitted a proposal for adding a set of jinja based templates to the tg2 quickstart command, with it the paster quickstart command will offer you the option to use jinja based templates, which means a full set of template files for jinja based development.&lt;/p&gt; &lt;p&gt;I tried to mimic as best as I could the way the Genshi templates are done, meaning that the rendering is exactly the same and that works more or less the same way, for example, using macros to define certain reusable parts of the page.&lt;/p&gt; &lt;p&gt;The probable timeframe for this patch to make it in mainline should be around v2.2 which is the current development branch, this patch however can work with older releases, you should have at least TG v2.1.5 (currently unreleased, under the 215 branch) for it to work as only on this version a patch for jinja template name resolution based on dotted notation has been integrated, the last means that from 2.1.5 onwards jinja will be able to load templates named after their import, such as &amp;#8220;myproject.templates.index&amp;#8221;, instead of the path based ones such as &amp;#8220;index.html&amp;#8221;.&lt;/p&gt; &lt;p&gt;Patches live under my jinja branch of tg2devtools for those who would like to test it earlier:&lt;/p&gt; &lt;p&gt;https://sourceforge.net/u/clsdaniel/tg2devtools/ci/2dd496a588d8705802e46d226a750a40bce691a4/tree/&lt;/p&gt;</content>   <author>    <name>Carlos Daniel</name>    <uri>http://blog.blackchairsoft.com</uri>   </author>   <source>    <title type=\"html\">Blackchair Developers Blog</title>    <subtitle type=\"html\">&lt;span&gt;&lt;/span&gt;</subtitle>    <link rel=\"self\" href=\"http://blog.blackchairsoft.com/feed/atom/\"/>    <id>http://blog.blackchairsoft.com/feed/atom/</id>    <updated>2013-11-09T16:30:54+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en\">   <title type=\"html\">TurboGears future performances comparison</title>   <link href=\"http://blog.axant.it/archives/452\"/>   <id>http://blog.axant.it/?p=452</id>   <updated>2012-03-21T16:41:34+00:00</updated>   <content type=\"html\">&lt;p&gt;Recently I decided to give a quick benchmark for curiosity to the going to be branches of TurboGears2.&lt;/p&gt; &lt;p&gt;I quickstarted a simple genshi based application (plain turbogears2 quckstart) and then I created a plain controller method without template, to avoid counting the template generation overhead.&lt;/p&gt; &lt;p&gt;The application has been installed in three virtual environments: one with TG2.1.4, one with the development branch which is going to be TG2.2 and one with the development branch which is going to be TG2.3&lt;/p&gt; &lt;p&gt;The following graph reports the resulting requests/second that my pc has been able to serve on each turbogears version.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://docs.google.com/spreadsheet/oimg?key=0AuIJBJ437w0BdHNHdUlwclF4WWtJcTBxZzJId0hLT0E&amp;oid=3&amp;zx=gu9w441yyug1&quot; /&gt;&lt;/p&gt; &lt;p&gt;I have to admit that I&amp;#8217;m quite happy with the results, the grow is steady and TG2.3 seems to be three times faster than the current turbogears while still being backward compatible (The benchmark application has been quickstarted with TG2.1.4 and ran without issues on all the three environments)&lt;/p&gt;</content>   <author>    <name>Alessandro Molina</name>    <uri>http://blog.axant.it</uri>   </author>   <source>    <title type=\"html\">Axant Tech Blog \\ufffd\\ufffd turbogears</title>    <subtitle type=\"html\">AXANT Experience Report</subtitle>    <link rel=\"self\" href=\"http://blog.axant.it/archives/tag/turbogears/feed\"/>    <id>http://blog.axant.it/archives/tag/turbogears/feed</id>    <updated>2014-08-19T09:00:11+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-us\">   <title type=\"html\">Deploying A TurboGears Project to DotCloud</title>   <link href=\"http://www.mengu.net/post/deploying-a-turbogears-project-to-dotcloud\"/>   <id>http://www.mengu.net/post/deploying-a-turbogears-project-to-dotcloud</id>   <updated>2012-03-19T23:57:23+00:00</updated>   <content type=\"html\">&lt;p&gt;Hello everyone!&lt;/p&gt;  &lt;p&gt;Recently I have seen a cloud service called DotCloud. It seemed nice and I wanted to check its Python support. I've looked at their documentation and saw their Django docs which basically means they support WSGI. I also wanted to see how much effort does it take to deploy on this service. I have jumped in, signed up and tried to deploy a very simple quickstarted TurboGears project to DotCloud. It went well.&lt;/p&gt;  &lt;p&gt;Let's go ahead and deploy a quickstarted project.&lt;/p&gt;</content>   <author>    <name>Mengu Kagan</name>    <uri>http://www.mengu.net/</uri>   </author>   <source>    <title type=\"html\">Mengu.net - turbogears</title>    <subtitle type=\"html\">mengu on web programming.</subtitle>    <link rel=\"self\" href=\"http://www.mengu.net/feed/turbogears\"/>    <id>http://www.mengu.net/feed/turbogears</id>    <updated>2015-03-20T04:00:05+00:00</updated>   </source>  </entry>   <entry>   <title type=\"html\">Teaching Open Source, Web-Based, Game Programming at RIT</title>   <link href=\"http://threebean.org/blog/floss-seminar-rundown\"/>   <id>http://threebean.org/blog/floss-seminar-rundown</id>   <updated>2012-03-06T23:00:00+00:00</updated>   <content type=\"html\">&lt;div class=&quot;document&quot;&gt; &lt;p&gt;This last &lt;a class=&quot;reference external&quot; href=&quot;http://www.rit.edu/emcs/admissions/bca/blog/item/academic-quarters&quot;&gt;quarter&lt;/a&gt; at &lt;a class=&quot;reference external&quot; href=&quot;http://www.rit.edu&quot;&gt;RIT&lt;/a&gt; I taught (for the first time) a &lt;a class=&quot;reference external&quot; href=&quot;http://ritfloss.rtfd.org&quot;&gt;course on open source, web-based, game programming&lt;/a&gt;.  The quarter just came to an end and I really want to brag on my students.  But before I do that, here's a glimmer of what we covered:&lt;/p&gt; &lt;blockquote&gt; &lt;ul class=&quot;simple&quot;&gt; &lt;li&gt;How to use bash and vim&lt;/li&gt; &lt;li&gt;How to use git and github&lt;/li&gt; &lt;li&gt;How to submit patches to projects you know nothing about&lt;/li&gt; &lt;li&gt;What makes a good, &lt;a class=&quot;reference external&quot; href=&quot;http://www.amazon.com/Casual-Game-Design-Designing-Gamer/dp/0123749530&quot;&gt;casual game&lt;/a&gt;&lt;/li&gt; &lt;li&gt;How to make &lt;a class=&quot;reference external&quot; href=&quot;http://www.amazon.com/Making-Isometric-Social-Real-Time-Javascript/dp/1449304753&quot;&gt;games with HTML5&lt;/a&gt;&lt;/li&gt; &lt;li&gt;How to program in JavaScript, CoffeeScript, and Python&lt;/li&gt; &lt;li&gt;Serverside programming with &lt;a class=&quot;reference external&quot; href=&quot;http://turbogears.org&quot;&gt;Turbogears2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;How to get your code running on Red Hat's &lt;a class=&quot;reference external&quot; href=&quot;http://openshift.redhat.com&quot;&gt;Openshift&lt;/a&gt; cloud.&lt;/li&gt; &lt;li&gt;How to give a lightning talk(!)&lt;/li&gt; &lt;/ul&gt; &lt;/blockquote&gt; &lt;p&gt;Really cool stuff was built into the class; it was about making open source software, so we &lt;a class=&quot;reference external&quot; href=&quot;http://ritfloss.readthedocs.org/en/latest/hw/fflight.html#patch-the-course-project&quot;&gt;open sourced the syllabus&lt;/a&gt;! Really cool stuff happened along the way; we hit ugly problems with openshift, so we &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/lmacken/turbogears2-openshift-quickstart/commits/&quot;&gt;patched the quickstarter script&lt;/a&gt;!&lt;/p&gt; &lt;p&gt;You can endure my self-indulgent drivel yes, but you get the best picture from reading the &lt;a class=&quot;reference external&quot; href=&quot;http://threebean.org/floss-planet&quot;&gt;students' blog posts&lt;/a&gt; themselves.  Enough of this!  &lt;cite&gt;Les projets de cours&lt;/cite&gt;!&lt;/p&gt; &lt;hr class=&quot;docutils&quot; /&gt; &lt;p&gt;&lt;strong&gt;#1&lt;/strong&gt; - &lt;a class=&quot;reference external&quot; href=&quot;http://lazorz-fossrit.rhcloud.com/welcome.html&quot;&gt;Lazorz&lt;/a&gt; teamed up with the &lt;a class=&quot;reference external&quot; href=&quot;http://www.mos.org/&quot;&gt;Boston Museum of Science&lt;/a&gt; to make &amp;quot;[An] educational game about the physics of light.  In it's current incarnation it helps demonstrate the concepts of reflection and color filtering.  The development team has plans to include other concepts such as refraction and prisms in future releases.&amp;quot;&lt;/p&gt; &lt;a class=&quot;reference external image-reference&quot; href=&quot;http://lazorz-fossrit.rhcloud.com/welcome.html&quot;&gt;&lt;img alt=&quot;http://lazorz-fossrit.rhcloud.com/image/lazorzscreenshot.png&quot; src=&quot;http://lazorz-fossrit.rhcloud.com/image/lazorzscreenshot.png&quot; /&gt;&lt;/a&gt; &lt;p&gt;They got a nasty front-end built, by hand, with javascript and HTML5 that &lt;strong&gt;works on every mobile device we could test it on&lt;/strong&gt;.  It is intuitive and fun. They have almost-working Facebook auth and they have an almost-working Turbogears2 backed JSON store. (really, &lt;em&gt;this&lt;/em&gt; close to completion!)&lt;/p&gt; &lt;hr class=&quot;docutils&quot; /&gt; &lt;p&gt;&lt;strong&gt;#2&lt;/strong&gt; - &lt;a class=&quot;reference external&quot; href=&quot;http://gold-rush.rhcloud.com&quot;&gt;Gold Rush&lt;/a&gt; is visually and game-ly amazing.  If I had to pick which of the three project was going to make one million dollars, it'd be this one.&lt;/p&gt; &lt;a class=&quot;reference external image-reference&quot; href=&quot;http://gold-rush.rhcloud.com&quot;&gt;&lt;img alt=&quot;http://i.imgur.com/XJCshh.jpg&quot; src=&quot;http://i.imgur.com/XJCshh.jpg&quot; /&gt;&lt;/a&gt; &lt;p&gt;The front-end is built in Unity (closed source, but compiles to a ton of platforms) and the back-end JSON store is built in TurboGears2.  These guys completely flew through development, mastering skills they'd never heard of in a day.  Its 3D with a moving camera and an incredibly fun game.  The original game idea belongs to team member &lt;a class=&quot;reference external&quot; href=&quot;http://ericheaney.wordpress.com/&quot;&gt;Eric Heaney&lt;/a&gt;.  It's fun to play as a normal old card game (I've played it at a number of parties since he pitched it to the class).&lt;/p&gt; &lt;hr class=&quot;docutils&quot; /&gt; &lt;p&gt;&lt;strong&gt;#3&lt;/strong&gt; -- &lt;a class=&quot;reference external&quot; href=&quot;http://webbot-qalthos.rhcloud.com&quot;&gt;WebBotWar&lt;/a&gt; (the python web robot fighting game) wins the prize for &lt;a class=&quot;reference external&quot; href=&quot;http://github.com/CodingRobots&quot;&gt;master hack&lt;/a&gt;.  They:&lt;/p&gt; &lt;blockquote&gt; &lt;ul class=&quot;simple&quot;&gt; &lt;li&gt;Forked &lt;a class=&quot;reference external&quot; href=&quot;http://code.google.com/p/pybotwar/&quot;&gt;pybotwar&lt;/a&gt;, ripped it's UI off and made it export JSON.&lt;/li&gt; &lt;li&gt;Reimplemented the front-end with &lt;a class=&quot;reference external&quot; href=&quot;http://calebevans.me/projects/jcanvas/index.php&quot;&gt;jCanvas&lt;/a&gt; (and cooked up all their own art assets!).&lt;/li&gt; &lt;li&gt;Wrote a TurboGears2 app that spins up serverside instances of their pybotwar fork.&lt;ul&gt; &lt;li&gt;Those instances dump their state into mongodb (or memcached, long story).&lt;/li&gt; &lt;li&gt;Their javascript client polls the TG2 app for the game state and &lt;a class=&quot;reference external&quot; href=&quot;http://webbot-qalthos.rhcloud.com&quot;&gt;voil\\ufffd\\ufffd&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/blockquote&gt; &lt;p&gt;They have (awesome) plans to:&lt;/p&gt; &lt;blockquote&gt; &lt;ul class=&quot;simple&quot;&gt; &lt;li&gt;Allow you to upload your own scripts (they have it working, just not secured).&lt;/li&gt; &lt;li&gt;Make a built-in script editor.&lt;/li&gt; &lt;li&gt;Tighter facebook integration (challenge your friends!)&lt;/li&gt; &lt;/ul&gt; &lt;/blockquote&gt; &lt;p&gt;BTW, it works on android and iPad.  It even works on &lt;a class=&quot;reference external&quot; href=&quot;http://projects.gnome.org/epiphany/&quot;&gt;Epiphany&lt;/a&gt; (&lt;a class=&quot;reference external&quot; href=&quot;https://www.destroyallsoftware.com/talks/wat&quot;&gt;wat?&lt;/a&gt;)  They also want you to know that python &lt;a class=&quot;reference external&quot; href=&quot;http://code.google.com/p/pybox2d/&quot;&gt;box2d&lt;/a&gt; is a pain in the ass.&lt;/p&gt; &lt;a class=&quot;reference external image-reference&quot; href=&quot;http://webbot-qalthos.rhcloud.com/&quot;&gt;&lt;img alt=&quot;https://github.com/ralphbean/WebBot/raw/c127a15b0c5f1d5683c7619676fc7aec4970e061/pywebbot-screenshot.png&quot; src=&quot;https://github.com/ralphbean/WebBot/raw/c127a15b0c5f1d5683c7619676fc7aec4970e061/pywebbot-screenshot.png&quot; /&gt;&lt;/a&gt; &lt;/div&gt;</content>   <author>    <name>Ralph Bean</name>    <uri>http://threebean.org/blog</uri>   </author>   <source>    <title type=\"html\">[three]Bean</title>    <subtitle type=\"html\">Creates a Blog</subtitle>    <link rel=\"self\" href=\"http://threebean.org/blog/category/turbogears/feed/index.xml\"/>    <id>http://threebean.org/blog/category/turbogears/feed/index.xml</id>    <updated>2015-03-19T14:30:06+00:00</updated>   </source>  </entry>   <entry>   <title type=\"html\">ToscaWidgets2 Bugsprint Report</title>   <link href=\"http://threebean.org/blog/bugsprint-report\"/>   <id>http://threebean.org/blog/bugsprint-report</id>   <updated>2012-03-04T20:00:00+00:00</updated>   <content type=\"html\">&lt;div class=&quot;document&quot;&gt; &lt;p&gt;Here's the rundown of the &lt;a class=&quot;reference external&quot; href=&quot;http://threebean.org/blog/announcing-tw2-bugsprint&quot;&gt;pre-PyCon tw2 bugsprint&lt;/a&gt;.  The unstoppable &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/gregjurman&quot;&gt;Greg Jurman&lt;/a&gt; and I coordinated in google+ and IRC (with lots of ad-hoc visitors in both) and did all the damage we could do to the &lt;a class=&quot;reference external&quot; href=&quot;http://bitbucket.org/paj/tw2core/issues&quot;&gt;bug list&lt;/a&gt;.  Our goal was to close enough that we could justify a solid 2.0 non-beta release but we didn't quite get there.  We settled on &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/tw2.core/2.0rc1&quot;&gt;2.0 release candidate 1&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; - Big progress.  We'll seal the deal on 2.0 at PyCon US next week.&lt;/p&gt; &lt;p&gt;Infrastructure:&lt;/p&gt; &lt;blockquote&gt; &lt;ul class=&quot;simple&quot;&gt; &lt;li&gt;tw2 sourcecode is spread out in repos all over the place.  We centralized &lt;em&gt;everything&lt;/em&gt; at &lt;a class=&quot;reference external&quot; href=&quot;http://github.com/toscawidgets&quot;&gt;http://github.com/toscawidgets&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;We're using &lt;a class=&quot;reference external&quot; href=&quot;http://github.com/nvie/gitflow&quot;&gt;git-flow&lt;/a&gt; to manage team development and releases.&lt;/li&gt; &lt;li&gt;We setup a &lt;a class=&quot;reference external&quot; href=&quot;http://cia.vc&quot;&gt;http://cia.vc&lt;/a&gt; bot in #toscawidgets/IRC, which is awesome.&lt;/li&gt; &lt;li&gt;We're in the continuous integration queue with &lt;a class=&quot;reference external&quot; href=&quot;https://www.shiningpanda.com/&quot;&gt;Shining Panda&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;/blockquote&gt; &lt;p&gt;Tickets closed:&lt;/p&gt; &lt;blockquote&gt; &lt;ul class=&quot;simple&quot;&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/92&quot;&gt;Duplicated TW Encoders&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/71&quot;&gt;Graceful degradation when JS disabled for tw2.dynforms&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/53&quot;&gt;HTML5 Prompt Text&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/95&quot;&gt;Configurable 'location' for resources&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/94&quot;&gt;Disable resource injection on a per-resource basis&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/96&quot;&gt;Document middleware configuration values&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/77&quot;&gt;Handling SCRIPT_NAME&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/97&quot;&gt;Internationalization&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/69&quot;&gt;Inline templates&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/5&quot;&gt;Refactor resources for better compatibility with tw0.9&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/14&quot;&gt;Automatic 'modname' for resources&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/88&quot;&gt;Shortcuts for controller registration / Tidy up tutorial&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/blockquote&gt; &lt;p&gt;Tickets worked on, but not complete:&lt;/p&gt; &lt;blockquote&gt; &lt;ul class=&quot;simple&quot;&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/31&quot;&gt;Make onload trigger onchange&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/44&quot;&gt;Growing grid - no label&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/7&quot;&gt;Problems with colons as id separators&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/67&quot;&gt;Refactor controller widgets&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/107&quot;&gt;Consider &amp;quot;crank&amp;quot;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/66&quot;&gt;Enhanced widgetbrowser&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/blockquote&gt; &lt;p&gt;Tickets created:&lt;/p&gt; &lt;blockquote&gt; &lt;ul class=&quot;simple&quot;&gt; &lt;li&gt;&lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/109&quot;&gt;Refactor the entire templates system&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/blockquote&gt; &lt;/div&gt;</content>   <author>    <name>Ralph Bean</name>    <uri>http://threebean.org/blog</uri>   </author>   <source>    <title type=\"html\">[three]Bean</title>    <subtitle type=\"html\">Creates a Blog</subtitle>    <link rel=\"self\" href=\"http://threebean.org/blog/category/turbogears/feed/index.xml\"/>    <id>http://threebean.org/blog/category/turbogears/feed/index.xml</id>    <updated>2015-03-19T14:30:06+00:00</updated>   </source>  </entry>   <entry>   <title type=\"html\">TW2 Bugsprint; the Final Countdown</title>   <link href=\"http://threebean.org/blog/the-final-countdown\"/>   <id>http://threebean.org/blog/the-final-countdown</id>   <updated>2012-03-02T16:00:00+00:00</updated>   <content type=\"html\">&lt;div class=&quot;document&quot;&gt; &lt;p&gt;Tomorrow marks the start of the &lt;a class=&quot;reference external&quot; href=&quot;http://threebean.org/blog/announcing-tw2-bugsprint&quot;&gt;toscawidgets2 24 hour bugsprint&lt;/a&gt; and I couldn't be more stoked.  We haven't even started yet but tw2 development pushed ahead anyways.&lt;/p&gt; &lt;p&gt;We have:&lt;/p&gt; &lt;blockquote&gt; &lt;ul class=&quot;simple&quot;&gt; &lt;li&gt;redesigned the &lt;a class=&quot;reference external&quot; href=&quot;http://threebean.org/blog/new-tw2-frontpage/&quot;&gt;tw2 homepage&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;improved tw2.jqplugins.jqgrid's &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ralphbean/tw2.jqplugins.jqgrid/pull/4&quot;&gt;sqlalchemy integration&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;pumped out &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ralphbean/tw2.jqplugins.ui/issues/8&quot;&gt;one&lt;/a&gt; or &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ralphbean/tw2.jqplugins.ui/issues/9&quot;&gt;two&lt;/a&gt; miscellaneous fixups to tw2.jqplugins.ui.&lt;ul&gt; &lt;li&gt;This includes &lt;a class=&quot;reference external&quot; href=&quot;https://github.com/ralphbean/tw2.jqplugins.ui/issues/7&quot;&gt;fixing the grievously broken support for certain alternate themes&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;released &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/tw2.jqplugins.elrte&quot;&gt;tw2.jqplugins.elrte&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;released &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/tw2.jqplugins.elrte&quot;&gt;tw2.jqplugins.elfinder&lt;/a&gt; (which is amazing).&lt;/li&gt; &lt;li&gt;released &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/tw2.captcha&quot;&gt;tw2.captcha&lt;/a&gt; based on &lt;cite&gt;tgcaptcha2&lt;/cite&gt;.&lt;/li&gt; &lt;li&gt;released an alpha version of &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/tw2.d3&quot;&gt;tw2.d3&lt;/a&gt;. It's built with WebSocket support in mind.  More on that soon!&lt;/li&gt; &lt;li&gt;been excited to learn that the &lt;a class=&quot;reference external&quot; href=&quot;https://groups.google.com/forum/?fromgroups#!topic/turbogears/N1xh_r0Sjt4&quot;&gt;TurboGears2 team is aiming to standardize on tw2&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;been fielding a lot more support for tw2 in &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/pyramid&quot;&gt;Pyramid 1.3&lt;/a&gt; both on the mailing list and in &lt;tt class=&quot;docutils literal&quot;&gt;#toscawidgets&lt;/tt&gt;.  There's a bug still lurking out there for &lt;a class=&quot;reference external&quot; href=&quot;https://bitbucket.org/paj/tw2core/issue/108/working-with-latest-pyramid-13&quot;&gt;windows+tw2+pyramid users&lt;/a&gt;. At this point, if you can reproduce it and tell us about it, that would be helpful.&lt;/li&gt; &lt;li&gt;got our first reports of people using tw2 with &lt;a class=&quot;reference external&quot; href=&quot;http://pypi.python.org/pypi/bottle&quot;&gt;bottle&lt;/a&gt;.  It worked!&lt;/li&gt; &lt;/ul&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;strong&gt;Goal:&lt;/strong&gt; (solidly) close as many bugs as possible and push as many libraries from beta to release as we can.&lt;/p&gt; &lt;p&gt;Here's to winning that game.&lt;/p&gt; &lt;/div&gt;</content>   <author>    <name>Ralph Bean</name>    <uri>http://threebean.org/blog</uri>   </author>   <source>    <title type=\"html\">[three]Bean</title>    <subtitle type=\"html\">Creates a Blog</subtitle>    <link rel=\"self\" href=\"http://threebean.org/blog/category/turbogears/feed/index.xml\"/>    <id>http://threebean.org/blog/category/turbogears/feed/index.xml</id>    <updated>2015-03-19T14:30:06+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en\">   <title type=\"html\">Mastering the TurboGears EasyCrudRestController</title>   <link href=\"http://blog.axant.it/archives/423\"/>   <id>http://blog.axant.it/?p=423</id>   <updated>2012-01-31T20:22:06+00:00</updated>   <content type=\"html\">&lt;p&gt;One of the key features of &lt;a href=&quot;http://www.turbogears.org&quot;&gt;TurboGears2&lt;/a&gt; is the great &lt;a href=&quot;http://pypi.python.org/pypi/tgext.crud&quot;&gt;CRUD extension&lt;/a&gt;. Mastering the CRUD extension can really make the difference between spending hours or just a few minutes on writing a web app prototype or even a full application.&lt;/p&gt; &lt;p&gt;The CRUD extension provides two main features, the &lt;a href=&quot;http://www.turbogears.org/2.1/docs/main/Extensions/Crud/index.html#creating-our-own-crudrestcontroller&quot;&gt;CrudRestController&lt;/a&gt; which is meant to help creating totally custom CRUDs and the &lt;a href=&quot;http://www.turbogears.org/2.1/docs/main/Extensions/Crud/index.html#easycrudrestcontroller&quot;&gt;EasyCrudRestController&lt;/a&gt; which provides a quick and easy way to create CRUD interfaces.&lt;/p&gt; &lt;p&gt;I&amp;#8217;ll focus on the EasyCrudRestController as it is the easiest and more productive one, moving forward to the CrudRestController is quite straightforward after you feel confident with the Easy one.&lt;/p&gt; &lt;p&gt;The target will be to create, in no more than 40 lines of controller code, a full featured photo gallery application with:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Multiple Albums&lt;/li&gt; &lt;li&gt;Uploads with Thumbnails Generation&lt;/li&gt; &lt;li&gt;Authenticated Access, only users in group &amp;#8220;photos&amp;#8221; will be able to manage photos&lt;/li&gt; &lt;li&gt;Contextual Management, manage photos of one album at time instead of having all photos mixed together in a generic management section&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a href=&quot;http://blog.axant.it/wp-content/uploads/2012/01/photos.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-426&quot; src=&quot;http://blog.axant.it/wp-content/uploads/2012/01/photos.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;320&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;If you don&amp;#8217;t already know how to create a new TurboGears project, start by giving a look at &lt;a href=&quot;http://www.turbogears.org/2.1/docs/main/DownloadInstall.html#installation-for-the-impatient&quot;&gt;TurboGears Installation for The Impatient&lt;/a&gt; guide. Just remember to add &lt;code&gt;tgext.datahelpers&lt;/code&gt; to dependencies inside your project &lt;code&gt;setup.py&lt;/code&gt; before running the &lt;code&gt;setup.py develop&lt;/code&gt; command.&lt;/p&gt; &lt;p&gt;I&amp;#8217;ll start by providing a Gallery and Photo model. To store the images I&amp;#8217;ll use &lt;a href=&quot;http://pypi.python.org/pypi/tgext.datahelpers&quot;&gt;tgext.datahelpers&lt;/a&gt; to avoid having to manage the attachments. Using datahelpers also provides the advantage of having thumbnails support for free.&lt;/p&gt;  &lt;div class=&quot;wp_syntax&quot;&gt;&lt;div class=&quot;code&quot;&gt;&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;from&lt;/span&gt; tgext.&lt;span&gt;datahelpers&lt;/span&gt;.&lt;span&gt;fields&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; Attachment, AttachedImage &amp;nbsp; &lt;span&gt;class&lt;/span&gt; Gallery&lt;span&gt;&amp;#40;&lt;/span&gt;DeclarativeBase&lt;span&gt;&amp;#41;&lt;/span&gt;:     __tablename__ = &lt;span&gt;'galleries'&lt;/span&gt; &amp;nbsp;    uid = Column&lt;span&gt;&amp;#40;&lt;/span&gt;Integer, autoincrement=&lt;span&gt;True&lt;/span&gt;, primary_key=&lt;span&gt;True&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;    name = Column&lt;span&gt;&amp;#40;&lt;/span&gt;Unicode&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;, nullable=&lt;span&gt;False&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &amp;nbsp; &lt;span&gt;class&lt;/span&gt; Photo&lt;span&gt;&amp;#40;&lt;/span&gt;DeclarativeBase&lt;span&gt;&amp;#41;&lt;/span&gt;:     __tablename__ = &lt;span&gt;'photos'&lt;/span&gt; &amp;nbsp;     uid = Column&lt;span&gt;&amp;#40;&lt;/span&gt;Integer, autoincrement=&lt;span&gt;True&lt;/span&gt;, primary_key=&lt;span&gt;True&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;     name = Column&lt;span&gt;&amp;#40;&lt;/span&gt;Unicode&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;100&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;, nullable=&lt;span&gt;False&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;     description = Column&lt;span&gt;&amp;#40;&lt;/span&gt;Unicode&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;2048&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;, nullable=&lt;span&gt;False&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;     image = Column&lt;span&gt;&amp;#40;&lt;/span&gt;Attachment&lt;span&gt;&amp;#40;&lt;/span&gt;AttachedImage&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &amp;nbsp;     author_id = Column&lt;span&gt;&amp;#40;&lt;/span&gt;Integer, ForeignKey&lt;span&gt;&amp;#40;&lt;/span&gt;model.&lt;span&gt;User&lt;/span&gt;.&lt;span&gt;user_id&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;     author = relation&lt;span&gt;&amp;#40;&lt;/span&gt;app_model.&lt;span&gt;User&lt;/span&gt;, backref=backref&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'photos'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt; &amp;nbsp;     gallery_id = Column&lt;span&gt;&amp;#40;&lt;/span&gt;Integer, ForeignKey&lt;span&gt;&amp;#40;&lt;/span&gt;Gallery.&lt;span&gt;uid&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;     gallery = relation&lt;span&gt;&amp;#40;&lt;/span&gt;Gallery, backref=backref&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'photos'&lt;/span&gt;, cascade=&lt;span&gt;'all, delete-orphan'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;  &lt;p&gt;Now to be able to start using our galleries we will have to provide a place where to view them and a gallery management controller to create and manage them. Viewing them should be quite straightforward, I&amp;#8217;ll just retrieve the galleries from the database inside my &lt;code&gt;index&lt;/code&gt; method and render them. To access a single gallery I&amp;#8217;ll rely on the datahelpers &lt;code&gt;SQLAEntityConverter&lt;/code&gt; which will retrieve the gallery for us ensuring it exists and is valid. For the management part I&amp;#8217;ll create an &lt;code&gt;EasyCrudRestController&lt;/code&gt; mounted as &lt;code&gt;/manage_galleries&lt;/code&gt;&lt;/p&gt;  &lt;div class=&quot;wp_syntax&quot;&gt;&lt;div class=&quot;code&quot;&gt;&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;from&lt;/span&gt; tgext.&lt;span&gt;crud&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; EasyCrudRestController &amp;nbsp; &lt;span&gt;class&lt;/span&gt; GalleriesController&lt;span&gt;&amp;#40;&lt;/span&gt;EasyCrudRestController&lt;span&gt;&amp;#41;&lt;/span&gt;:     allow_only = predicates.&lt;span&gt;in_group&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'photos'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;     title = &lt;span&gt;&amp;quot;Manage Galleries&amp;quot;&lt;/span&gt;     model = model.&lt;span&gt;Gallery&lt;/span&gt; &amp;nbsp;     __form_options__ = &lt;span&gt;&amp;#123;&lt;/span&gt;         &lt;span&gt;'__hide_fields__'&lt;/span&gt; : &lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;'uid'&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;,         &lt;span&gt;'__omit_fields__'&lt;/span&gt; : &lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;'photos'&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;     &lt;span&gt;&amp;#125;&lt;/span&gt; &amp;nbsp; &lt;span&gt;class&lt;/span&gt; RootController&lt;span&gt;&amp;#40;&lt;/span&gt;BaseController&lt;span&gt;&amp;#41;&lt;/span&gt;:     manage_galleries = GalleriesController&lt;span&gt;&amp;#40;&lt;/span&gt;DBSession&lt;span&gt;&amp;#41;&lt;/span&gt; &amp;nbsp;     @expose&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'photos.templates.index'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; index&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, &lt;span&gt;*&lt;/span&gt;args, &lt;span&gt;**&lt;/span&gt;kw&lt;span&gt;&amp;#41;&lt;/span&gt;:         galleries = DBSession.&lt;span&gt;query&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;Gallery&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span&gt;order_by&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;Gallery.&lt;span&gt;uid&lt;/span&gt;.&lt;span&gt;desc&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;.&lt;span&gt;all&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;dict&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;galleries=galleries&lt;span&gt;&amp;#41;&lt;/span&gt; &amp;nbsp;     @expose&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'photos.templates.gallery'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;     @validate&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;dict&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;gallery=SQLAEntityConverter&lt;span&gt;&amp;#40;&lt;/span&gt;Gallery&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;, error_handler=index&lt;span&gt;&amp;#41;&lt;/span&gt;     &lt;span&gt;def&lt;/span&gt; gallery&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;self&lt;/span&gt;, gallery&lt;span&gt;&amp;#41;&lt;/span&gt;:         &lt;span&gt;return&lt;/span&gt; &lt;span&gt;dict&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;gallery=gallery&lt;span&gt;&amp;#41;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;  &lt;p&gt;Logging in with an user inside the &lt;code&gt;photos&lt;/code&gt; group and accessing the &lt;code&gt;/manage_galleries&lt;/code&gt; url we will be able to create a new gallery and manage the existing ones. &lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://blog.axant.it/wp-content/uploads/2012/01/gallerylisting.png&quot;&gt;&lt;img src=&quot;http://blog.axant.it/wp-content/uploads/2012/01/gallerylisting.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;220&quot; class=&quot;alignnone size-full wp-image-444&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;To configure how the crud controller forms should appear and behave the &lt;code&gt;__form_options__&lt;/code&gt; property of the &lt;code&gt;EasyCrudRestController&lt;/code&gt; can be used. This property relies on the same options as &lt;a href=&quot;http://packages.python.org/sprox/modules/sprox.formbase.html#module-sprox.formbase&quot;&gt;Sprox FormBase&lt;/a&gt; and customizes both the &lt;strong&gt;Edit&lt;/strong&gt; and &lt;strong&gt;Add&lt;/strong&gt; forms.&lt;br /&gt; The next part is probably to be able to upload some photos inside our newly created galleries. To perform this we will create a new &lt;code&gt;EasyCrudRestController&lt;/code&gt; for gallery photos management.&lt;/p&gt; &lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;  &lt;div class=&quot;wp_syntax&quot;&gt;&lt;div class=&quot;code&quot;&gt;&lt;pre class=&quot;python&quot;&gt;&lt;span&gt;from&lt;/span&gt; tgext.&lt;span&gt;crud&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; EasyCrudRestController &lt;span&gt;from&lt;/span&gt; tw.&lt;span&gt;forms&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; FileField &lt;span&gt;from&lt;/span&gt; tw.&lt;span&gt;forms&lt;/span&gt;.&lt;span&gt;validators&lt;/span&gt; &lt;span&gt;import&lt;/span&gt; FieldStorageUploadConverter &lt;span&gt;from&lt;/span&gt; webhelpers &lt;span&gt;import&lt;/span&gt; html &amp;nbsp; &lt;span&gt;class&lt;/span&gt; PhotosController&lt;span&gt;&amp;#40;&lt;/span&gt;EasyCrudRestController&lt;span&gt;&amp;#41;&lt;/span&gt;:     allow_only = predicates.&lt;span&gt;in_group&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'photos'&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;     title = &lt;span&gt;&amp;quot;Manage Photos&amp;quot;&lt;/span&gt;     model = model.&lt;span&gt;Photo&lt;/span&gt;     keep_params = &lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;'gallery'&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt; &amp;nbsp;     __form_options__ = &lt;span&gt;&amp;#123;&lt;/span&gt;         &lt;span&gt;'__hide_fields__'&lt;/span&gt; : &lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;'uid'&lt;/span&gt;, &lt;span&gt;'author'&lt;/span&gt;, &lt;span&gt;'gallery'&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;,         &lt;span&gt;'__field_widget_types__'&lt;/span&gt; : &lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'image'&lt;/span&gt;:FileField&lt;span&gt;&amp;#125;&lt;/span&gt;,         &lt;span&gt;'__field_validator_types__'&lt;/span&gt; : &lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'image'&lt;/span&gt;:FieldStorageUploadConverter&lt;span&gt;&amp;#125;&lt;/span&gt;,         &lt;span&gt;'__field_widget_args__'&lt;/span&gt; : &lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'author'&lt;/span&gt;:&lt;span&gt;&amp;#123;&lt;/span&gt;&lt;span&gt;'default'&lt;/span&gt;:&lt;span&gt;lambda&lt;/span&gt;:request.&lt;span&gt;identity&lt;/span&gt;&lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;'user'&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;.&lt;span&gt;user_id&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt;&lt;span&gt;&amp;#125;&lt;/span&gt;     &lt;span&gt;&amp;#125;&lt;/span&gt; &amp;nbsp;     __table_options__ = &lt;span&gt;&amp;#123;&lt;/span&gt;         &lt;span&gt;'__omit_fields__'&lt;/span&gt; : &lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;'uid'&lt;/span&gt;, &lt;span&gt;'author_id'&lt;/span&gt;, &lt;span&gt;'gallery_id'&lt;/span&gt;, &lt;span&gt;'gallery'&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;,         &lt;span&gt;'__xml_fields__'&lt;/span&gt; : &lt;span&gt;&amp;#91;&lt;/span&gt;&lt;span&gt;'image'&lt;/span&gt;&lt;span&gt;&amp;#93;&lt;/span&gt;,         &lt;span&gt;'image'&lt;/span&gt;: &lt;span&gt;lambda&lt;/span&gt; filler,row: html.&lt;span&gt;literal&lt;/span&gt;&lt;span&gt;&amp;#40;&lt;/span&gt;&lt;span&gt;'\\ufffd\\ufffd\\ufffdimg src=&amp;quot;%s&amp;quot;/\\ufffd\\ufffd\\ufffd'&lt;/span&gt; &lt;span&gt;%&lt;/span&gt; row.&lt;span&gt;image&lt;/span&gt;.&lt;span&gt;thumb_url&lt;/span&gt;&lt;span&gt;&amp;#41;&lt;/span&gt;     &lt;span&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;  &lt;p&gt;&lt;/p&gt; &lt;p&gt;Mounting this inside the RootController as &lt;code&gt;manage_photos = PhotosController(DBSession)&lt;/code&gt; it will be possible to upload new photos inside any gallery. To manage the photos inside the first gallery for example we will have to access &lt;code&gt;/manage_photos?gallery=1&lt;/code&gt;url.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://blog.axant.it/wp-content/uploads/2012/01/photoslisting.png&quot;&gt;&lt;img src=&quot;http://blog.axant.it/wp-content/uploads/2012/01/photoslisting.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;294&quot; class=&quot;alignnone size-full wp-image-445&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Each parameter passed to the &lt;code&gt;EasyCrudRestController&lt;/code&gt; is used to filter the entries to show inside the management table and the &lt;code&gt;keep_params&lt;/code&gt; option provides a way to keep the filter around. This makes possible to edit the photos of only one gallery at the time instead of having all the photos mixed together. Also when a new photo is created it will be created in the current gallery.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;PhotosController&lt;/code&gt; got more customization than the &lt;code&gt;GalleriesController&lt;/code&gt;, through the &lt;code&gt;__field_widget_types__&lt;/code&gt; and &lt;code&gt;__field_validator_types__&lt;/code&gt; options we force the image field to be a file field and using the &lt;code&gt;__field_widget_args__&lt;/code&gt; we ensure that the newly uploaded photos have the current user as the author.&lt;/p&gt; &lt;p&gt;&lt;code&gt;__table_options__&lt;/code&gt; provide a way to customize the management table. The available options are the same as the &lt;a href=&quot;http://packages.python.org/sprox/modules/sprox.tablebase.html#sprox.tablebase.TableBase&quot;&gt;Sprox TableBase&lt;/a&gt; and &lt;a href=&quot;http://packages.python.org/sprox/modules/sprox.fillerbase.html#sprox.fillerbase.TableFiller&quot;&gt;Sprox TableFiller&lt;/a&gt; objects. in this case we hide the indexes of the rows on the database and the gallery itself, as we are managing the photos of a specific gallery we probably don&amp;#8217;t need to know which galleries the photos belong to. Using the &lt;code&gt;__xml_fields__&lt;/code&gt; we also specify that the &lt;strong&gt;image&lt;/strong&gt; field provides HTML and so doesn&amp;#8217;t have to be escaped. The &lt;code&gt;image&lt;/code&gt; entry forces the table to show the image thumbnail for the image column of the table instead of printing the &lt;code&gt;AttachedImage.__repr__&lt;/code&gt; as it would by default.&lt;/p&gt; &lt;p&gt;At first sight it might sound a bit complex, but once you start feeling confident, the CRUD extension makes possible to create entire applications in just a bunch of code lines. With just a few lines of code we created a photo gallery with multiple albums support and we can now focus on the &lt;strong&gt;index&lt;/strong&gt; and &lt;strong&gt;gallery&lt;/strong&gt; templates to make the gallery as pleasant as possible for our visitors.&lt;/p&gt; &lt;p&gt;The complete implementation of the photo gallery is available as a pluggable application on &lt;a href=&quot;https://bitbucket.org/_amol_/tgapp-photos&quot;&gt;bitbucket&lt;/a&gt;, feel free to use it in your TurboGears projects.&lt;/p&gt;</content>   <author>    <name>Alessandro Molina</name>    <uri>http://blog.axant.it</uri>   </author>   <source>    <title type=\"html\">Axant Tech Blog \\ufffd\\ufffd turbogears</title>    <subtitle type=\"html\">AXANT Experience Report</subtitle>    <link rel=\"self\" href=\"http://blog.axant.it/archives/tag/turbogears/feed\"/>    <id>http://blog.axant.it/archives/tag/turbogears/feed</id>    <updated>2014-08-19T09:00:11+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-us\">   <title type=\"html\">2011 At A Glance</title>   <link href=\"http://www.mengu.net/post/2011-at-a-glance\"/>   <id>http://www.mengu.net/post/2011-at-a-glance</id>   <updated>2011-12-31T19:07:11+00:00</updated>   <content type=\"html\">&lt;p&gt;I can call 2011 quite a good year on my behalf however when I look at things I've done, I feel I've done much less than I could. Here is a list of what I have done in 2011.&lt;/p&gt;  &lt;h2&gt;Things I've Done in 2011&lt;/h2&gt;  &lt;ul&gt; &lt;li&gt;&lt;p&gt;Executed an idea we had with my brother, &lt;a href=&quot;http://compector.com&quot;&gt;http://compector.com&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Built the start-up above with Ruby on Rails so I became more familiar with Ruby world.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;I have made the switch to PostgreSQL from MySQL.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Got a job in one of Turkey's top web sites where we deal with thousands of concurrent users...&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt;</content>   <author>    <name>Mengu Kagan</name>    <uri>http://www.mengu.net/</uri>   </author>   <source>    <title type=\"html\">Mengu.net - turbogears</title>    <subtitle type=\"html\">mengu on web programming.</subtitle>    <link rel=\"self\" href=\"http://www.mengu.net/feed/turbogears\"/>    <id>http://www.mengu.net/feed/turbogears</id>    <updated>2015-03-20T04:00:05+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">Jinja2 on Turbogears2</title>   <link href=\"http://blog.blackchairsoft.com/2011/12/22/jinja2-on-turbogears2/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=jinja2-on-turbogears2\"/>   <id>http://blog.blackchairsoft.com/?p=52</id>   <updated>2011-12-22T18:22:50+00:00</updated>   <content type=\"html\">&lt;p&gt;While Turbogears2 is a full stack python web framework and would seem to be opinionated, it has quite flexibility with certain components, for example, for database access there is SQLAlchemy as the default but you can also use MongoDB via Ming, which is supported in the mainline code. Template language is another thing that TG can swap, there is Genshi as default, Mako, Chameleon, Jinja, etc. Not about every template under the sun but quite a big selection for all tastes.&lt;/p&gt; &lt;p&gt;However, not all template languages have the same level of support, Genshi is the main one and the best supported as it is the successor of Kid (the template language on TG1), Genshi is mostly an XML/HTML driven language, it is designer friendly as it just extends XML tags it does not add any new or special syntax to XML/HTML, however, it can turn to be a bit slow and by the way Genshi is made isn&amp;#8217;t very compatible with other Python implementations such as pypy, jython, etc. Some may opt for another templating languages to overcome those difficulties, for them there is Mako which is a text based template language, it is fast and very well supported, after all Mako was sort of the default under pylons (which TG2 uses for controller dispatch and utilities).&lt;/p&gt; &lt;p&gt;There are other alternatives to speedup Genshi like Chameleon and finally there is Jinja, which apparently does not fit anywhere in the equation other than add choice, however, Jinja is very similar to Django templates which should make Django developers a bit more comfortable with working with Turbogears. Jinja support was minimally there, just support for loading and rendering jinja templates, there was no support for extensions or filters (even build-in filters).&lt;/p&gt; &lt;p&gt;In order to bring Jinja into shape I started playing around the turbogears core code and more or less learned my way in, finally started contributing patches to add features here and there for Jinja, extensions and filters where added on 2.1.3 and on 2.1.4 build-in filters where loaded in by default, also autoloading of project defined filters was added (see tg2 Jinja docs), yesterday I was working on getting dotted template name notation working for jinja templates, so you can load templates by its package hierarchy instead of the file path (&amp;#8220;myproject.templates.index&amp;#8221; instead of &amp;#8220;index.html&amp;#8221;), which is the default modus operandis of the rest of the templates, the code is fully tested ready to be checked and merged anytime.&lt;/p&gt; &lt;p&gt;All those new features while nice still aren&amp;#8217;t enough, the next step is to add Jinja templates to the base tg2 quickstart project template, so you can jumpstart a new project with jinja templates in place, which is the major hurdle for using Jinja under TG2, I&amp;#8217;m currently working on that on a branch of the tg2devtools package, well see how it pans out.&lt;/p&gt;</content>   <author>    <name>Carlos Daniel</name>    <uri>http://blog.blackchairsoft.com</uri>   </author>   <source>    <title type=\"html\">Blackchair Developers Blog</title>    <subtitle type=\"html\">&lt;span&gt;&lt;/span&gt;</subtitle>    <link rel=\"self\" href=\"http://blog.blackchairsoft.com/feed/atom/\"/>    <id>http://blog.blackchairsoft.com/feed/atom/</id>    <updated>2013-11-09T16:30:54+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-us\">   <title type=\"html\">Subqueries With SQLAlchemy</title>   <link href=\"http://www.mengu.net/post/subqueries-with-sqlalchemy\"/>   <id>http://www.mengu.net/post/subqueries-with-sqlalchemy</id>   <updated>2011-12-21T20:28:11+00:00</updated>   <content type=\"html\">&lt;p&gt;I have been developing the new version of www.osesturkiye.com for the Turkish version of the show called &quot;The Voice&quot;. It's already built with TurboGears, mako and SQLAlchemy. In the new version we have a gallery and many photos in it. My SQLAlchemy model is like this:&lt;/p&gt;  &lt;pre&gt;&lt;code&gt;class GalleryPhoto(DeclarativeBase):     __tablename__ = 'gallery_photo'      id = Column(Integer, primary_key=True)     photo_image = Column(UnicodeText)     photo_description = Column(UnicodeText)     dateline = Column(DateTime, default=datetime.now) &lt;/code&gt;&lt;/pre&gt;  &lt;p&gt;The problem I have is, in the photo detail page I will display &quot;Previous&quot; and &quot;Next&quot; links. I can implement this with two ways..&lt;/p&gt;</content>   <author>    <name>Mengu Kagan</name>    <uri>http://www.mengu.net/</uri>   </author>   <source>    <title type=\"html\">Mengu.net - turbogears</title>    <subtitle type=\"html\">mengu on web programming.</subtitle>    <link rel=\"self\" href=\"http://www.mengu.net/feed/turbogears\"/>    <id>http://www.mengu.net/feed/turbogears</id>    <updated>2015-03-20T04:00:05+00:00</updated>   </source>  </entry>   <entry>   <title type=\"html\">Hacking tw2 resource injection</title>   <link href=\"http://threebean.org/blog/2011/12/13/hacking-tw2-resource-injection/\"/>   <id>http://threebean.org/blog/2011/12/13/hacking-tw2-resource-injection/</id>   <updated>2011-12-13T10:44:53+00:00</updated>   <content type=\"html\">&lt;p&gt;Tonight, &lt;em&gt;VooDooNOFX&lt;/em&gt; was asking in IRC in #turbogears how to disable the injection of jquery.js by tw2.jquery into her/his TG2 app.  Using the &lt;code&gt;inject_resources=False&lt;/code&gt; middleware config value wouldn't cut it, since she/he wanted tw2 to inject all &lt;em&gt;other&lt;/em&gt; resources, they were loading jQuery via google CDN beforehand and tw2's injection was clobbering their code.&lt;/p&gt;  &lt;p&gt;I came up with the following hack to &lt;code&gt;myapp/lib/base.py&lt;/code&gt; which will remove tw2.jquery.jquery_js from the list of resources tw2 would inject into each page served by a TG2.1 app.&lt;/p&gt;  &lt;p&gt;At the top of &lt;code&gt;myapp/lib/base.py&lt;/code&gt; import:&lt;/p&gt;  &lt;div class=&quot;pygments_monokai&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tw2.core.core&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tw2.jquery&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt;     &lt;p&gt;and then replace:&lt;/p&gt;   &lt;div class=&quot;pygments_monokai&quot;&gt;&lt;pre&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TGController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt;     &lt;p&gt;with the following:&lt;/p&gt;   &lt;div class=&quot;pygments_monokai&quot;&gt;&lt;pre&gt;        &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TGController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;# Disable the injection of tw2.jquery&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;offending_link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tw2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jquery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jquery_js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tw2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request_local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'resources'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'resources'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offending_link&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;/pre&gt;&lt;/div&gt;     &lt;p&gt;The two tricks to this are&lt;/p&gt;  &lt;p&gt;&lt;ul&gt;&lt;li&gt;Simply knowing that tw2 resources register themselves with the   'request_local' object and that during the return-phase of the WSGI pipeline,   the tw2 middleware refers to that list when injecting   resources&lt;/li&gt;&lt;li&gt;Figuring out where in a TG2 app's request flow to place the   call to alter that object &lt;strong&gt;after&lt;/strong&gt; all widgets that might   register jquery have declared their resources but &lt;strong&gt;before&lt;/strong&gt; the   resources list is injected into the output stream.&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;  &lt;p&gt;We came out of it with &lt;a href=&quot;https://bitbucket.org/paj/tw2core/issue/94/jquery-resource-injection&quot;&gt;a   bug filed in the tw2 issue tracker&lt;/a&gt; so we can take care of it properly in the future.&lt;/p&gt;</content>   <author>    <name>Ralph Bean</name>    <uri>http://threebean.org/blog</uri>   </author>   <source>    <title type=\"html\">[three]Bean</title>    <subtitle type=\"html\">Creates a Blog</subtitle>    <link rel=\"self\" href=\"http://threebean.org/blog/category/turbogears/feed/index.xml\"/>    <id>http://threebean.org/blog/category/turbogears/feed/index.xml</id>    <updated>2015-03-19T14:30:06+00:00</updated>   </source>  </entry>   <entry>   <title type=\"html\">Announcing TurboGears 2.1.4 Release</title>   <link href=\"http://codersbuffet.blogspot.com/2011/12/announcing-turbogears-214-release.html\"/>   <id>tag:blogger.com,1999:blog-1176744327252521223.post-1826534574273761418</id>   <updated>2011-12-12T20:18:23+00:00</updated>   <content type=\"html\">&lt;div&gt;The TurboGears team is proud to announce the release of TurboGears 2.1.4!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This release has many new features and bugfixes, all of them listed below. The most important one, though, is that this is the final 2.1.x release, and the final release that will support Python 2.4.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Please make sure to update your code to work on Python 2.5, as that will be the next supported Python version.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I would like to take a moment to thank Alessandro Molina especially. His work made this release possible, and as large as it is. He's been a great asset to the team, and I'm glad to have him on board.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Deprecated Python 2.4 support. In 2.2, Python 2.4 support will be removed, and only 2.5-2.7 will be supported&lt;/li&gt;&lt;li&gt;TurboGears extension architecture enhanced. Better support for hooks before and after configuration&lt;/li&gt;&lt;li&gt;Performance enhancements in tg module and in default templates&lt;/li&gt;&lt;li&gt;Enhancements to lazy_url&lt;/li&gt;&lt;li&gt;WebOb version locked in. The change of virtualenv to &quot;distribute&quot; by default has broken dependency_links and allow_hosts in the config files, and this works around that issue.&lt;/li&gt;&lt;li&gt;Jinja2 filters are now automatically loaded&lt;/li&gt;&lt;li&gt;Work arounds for best_match, which was not producing the expected behavior with IE7 and IE8&lt;/li&gt;&lt;li&gt;Add &quot;auto_reload_template&quot; as an .ini option&lt;/li&gt;&lt;li&gt;Performance tuning the default size of the Genshi cache&lt;/li&gt;&lt;li&gt;Added Genshi advanced i18n support&lt;/li&gt;&lt;li&gt;Better compatibility with SQLAlchemy 0.7&lt;/li&gt;&lt;li&gt;Changed default quickstart options to help ensure that some model is always available&lt;/li&gt;&lt;li&gt;Documentation enhancements&lt;/li&gt;&lt;li&gt;Nested RestControllers now work as expected (no longer required to implement &quot;_custom_actions&quot;)&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>   <author>    <name>Michael Pedersen</name>    <email>noreply@blogger.com</email>    <uri>http://codersbuffet.blogspot.com/search/label/turbogears</uri>   </author>   <source>    <title type=\"html\">The Coder's Buffet</title>    <subtitle type=\"html\">As a developer, I explore numerous bits of technology. Some stick, some suck, and all of them teach me. It's time for me to tell the world why I use what I use.</subtitle>    <link rel=\"self\" href=\"http://codersbuffet.blogspot.com/feeds/posts/default/-/turbogears\"/>    <id>tag:blogger.com,1999:blog-1176744327252521223</id>    <updated>2015-03-20T03:00:06+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">An rsync-like utility for Amazon S3 and Google Storage</title>   <link href=\"http://blog.curiasolutions.com/an-rsync-like-utility-for-amazon-s3-and-google-storage.html\"/>   <id>tag:blog.curiasolutions.com,2011-12-11:an-rsync-like-utility-for-amazon-s3-and-google-storage.html</id>   <updated>2011-12-12T01:55:00+00:00</updated>   <content type=\"html\">&lt;p&gt;Every so often I find myself working on that odd job that requires syncing files with Amazon's S3. In the beginning, I tried some of the various S3 FUSE interfaces\\ufffd\\ufffd\\ufffdhoping for something that would play nice with rsync\\ufffd\\ufffd\\ufffdbut FUSE's stability always left something to be desired and more often than not I'd be left with that one transfer that never&amp;nbsp;would quite finish correctly.&lt;/p&gt; &lt;p&gt;Eventually I discovered &lt;a class=&quot;reference external&quot; href=&quot;http://github.com/boto/boto&quot;&gt;boto&lt;/a&gt;&amp;nbsp;and settled in to using a hacked together (but stable) Python/boto solution for these type of tasks\\ufffd\\ufffd\\ufffdall the while wondering why nobody took the time to write a &amp;quot;real&amp;quot; rsync-like client for S3.&lt;/p&gt; &lt;p&gt;Well, this last time around I&amp;nbsp;finally decided to stop whining and take matters into my own hands. After a couple of late nights fleshing out my original boto solution, I'm happy to announce what I'm calling &amp;quot;boto rsync&amp;quot;\\ufffd\\ufffd\\ufffdan rsync like wrapper for boto's cloud storage interfaces (both S3 &lt;em&gt;and&lt;/em&gt;&amp;nbsp;Google Storage).&lt;/p&gt; &lt;p&gt;Please take a look at the project on github and let me know what you think:&amp;nbsp;&lt;a class=&quot;reference external&quot; href=&quot;http://github.com/seedifferently/boto_rsync&quot;&gt;http://github.com/seedifferently/boto_rsync&lt;/a&gt;&lt;/p&gt;</content>   <author>    <name>Curia</name>    <uri>http://blog.curiasolutions.com/</uri>   </author>   <source>    <title type=\"html\">Curia Blog</title>    <link rel=\"self\" href=\"http://blog.curiasolutions.com/feeds/all.rss.xml\"/>    <id>http://blog.curiasolutions.com/feeds/all.rss.xml</id>    <updated>2014-10-30T05:30:04+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">Spamtastic</title>   <link href=\"http://blog.blackchairsoft.com/2011/11/26/spamtastic/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=spamtastic\"/>   <id>http://blog.blackchairsoft.com/?p=47</id>   <updated>2011-11-26T19:13:44+00:00</updated>   <content type=\"html\">&lt;p&gt;When I first started this blog I started receiving some spam comments that went trough, no harm here, just mark as spam and done, however lately I have been watching something more interesting, trackback spam.&lt;/p&gt; &lt;p&gt;There are around 90 trackbacks in my pending list and I can assure you all of them are spam, although as of lately the messages sended are more and more amusing, spamers now craft better messages but are still easily distinguishable from a regular comment or post.&lt;/p&gt; &lt;p&gt;I attached google analytics to the site recently and amusingly enough most of the visitors are from Mexico and a few others from Brazil, USA, Finland, etc. I don&amp;#8217;t enter the blog site that much.&lt;/p&gt; &lt;p&gt;I suspect my site was flagged as a target for trackback spam once a comment got trough or a trackback was accepted, thus from here on I will have to do some moderation.&lt;/p&gt;</content>   <author>    <name>Carlos Daniel</name>    <uri>http://blog.blackchairsoft.com</uri>   </author>   <source>    <title type=\"html\">Blackchair Developers Blog</title>    <subtitle type=\"html\">&lt;span&gt;&lt;/span&gt;</subtitle>    <link rel=\"self\" href=\"http://blog.blackchairsoft.com/feed/atom/\"/>    <id>http://blog.blackchairsoft.com/feed/atom/</id>    <updated>2013-11-09T16:30:54+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-us\">   <title type=\"html\">What's Going On With TurboGears?</title>   <link href=\"http://www.mengu.net/post/whats-going-on-with-turbogears\"/>   <id>http://www.mengu.net/post/whats-going-on-with-turbogears</id>   <updated>2011-11-19T23:55:28+00:00</updated>   <content type=\"html\">&lt;p&gt;If you are using Python and looking for a web framework or if you are just looking to do web programming with Python, you will look out your options and among Django, web2py and pyramid you will notice TurboGears. As a Python developer and TurboGears user, I will let you guys know what is going on with TurboGears lately and will let you have a chance with TurboGears.&lt;/p&gt;  &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/DvvDP.png&quot; alt=&quot;TurboGears Introduction&quot; /&gt;&lt;/p&gt;  &lt;h2&gt;A Short Introduction First&lt;/h2&gt;  &lt;p&gt;TurboGears is a full stack MVC web framework that is built on top of Pylons and which includes an ORM, a templating system, database migration tool, web helpers, authentication and authorization system by default just like Django. If you are wondering, there are two main differences between Django and TurboGears. &lt;/p&gt;  &lt;ul&gt; &lt;li&gt;&lt;p&gt;TurboGears is using class based controllers and object dispatch.&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;TurboGears is built using external Python libraries such as Pylons, WebOB, paster whereas everything in Django is built for Django.&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt;</content>   <author>    <name>Mengu Kagan</name>    <uri>http://www.mengu.net/</uri>   </author>   <source>    <title type=\"html\">Mengu.net - turbogears</title>    <subtitle type=\"html\">mengu on web programming.</subtitle>    <link rel=\"self\" href=\"http://www.mengu.net/feed/turbogears\"/>    <id>http://www.mengu.net/feed/turbogears</id>    <updated>2015-03-20T04:00:05+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en\">   <title type=\"html\">TurboGears2 DebugBar</title>   <link href=\"http://blog.axant.it/archives/405\"/>   <id>http://blog.axant.it/?p=405</id>   <updated>2011-11-12T19:30:47+00:00</updated>   <content type=\"html\">&lt;p&gt;Recently some work has been done to extend the hooks support in TurboGears, to play a little with the new hooks I decided to try creating the famous and envied Django Debug Toolbar. I&amp;#8217;m quite happy of the result and most of the features are there. In a few days I&amp;#8217;ll be able to place it on a public repository and I&amp;#8217;ll release it concurrently with the 2.1.4 release of TurboGears.&lt;/p&gt; &lt;p&gt;&lt;div id=&quot;attachment_409&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;a href=&quot;http://blog.axant.it/wp-content/uploads/2011/11/debugbar.png&quot;&gt;&lt;img src=&quot;http://blog.axant.it/wp-content/uploads/2011/11/debugbar-300x223.png&quot; alt=&quot;Debug Toolbar&quot; width=&quot;300&quot; height=&quot;223&quot; class=&quot;size-medium wp-image-409&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Debug Toolbar&lt;/p&gt;&lt;/div&gt;&lt;/p&gt; &lt;p&gt;&lt;div id=&quot;attachment_411&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;a href=&quot;http://blog.axant.it/wp-content/uploads/2011/11/timings.png&quot;&gt;&lt;img src=&quot;http://blog.axant.it/wp-content/uploads/2011/11/timings-300x223.png&quot; alt=&quot;Timings&quot; width=&quot;300&quot; height=&quot;223&quot; class=&quot;size-medium wp-image-411&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Timings&lt;/p&gt;&lt;/div&gt;&lt;/p&gt; &lt;p&gt;&lt;div id=&quot;attachment_412&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;a href=&quot;http://blog.axant.it/wp-content/uploads/2011/11/request.png&quot;&gt;&lt;img src=&quot;http://blog.axant.it/wp-content/uploads/2011/11/request-300x223.png&quot; alt=&quot;Request and Headers&quot; width=&quot;300&quot; height=&quot;223&quot; class=&quot;size-medium wp-image-412&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Request and Headers&lt;/p&gt;&lt;/div&gt;&lt;/p&gt; &lt;p&gt;&lt;div id=&quot;attachment_413&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;a href=&quot;http://blog.axant.it/wp-content/uploads/2011/11/queries.png&quot;&gt;&lt;img src=&quot;http://blog.axant.it/wp-content/uploads/2011/11/queries-300x223.png&quot; alt=&quot;SQLAlchemy Queries&quot; width=&quot;300&quot; height=&quot;223&quot; class=&quot;size-medium wp-image-413&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;SQLAlchemy Queries&lt;/p&gt;&lt;/div&gt;&lt;/p&gt; &lt;p&gt;&lt;div id=&quot;attachment_414&quot; class=&quot;wp-caption alignnone&quot;&gt;&lt;a href=&quot;http://blog.axant.it/wp-content/uploads/2011/11/controllers.png&quot;&gt;&lt;img src=&quot;http://blog.axant.it/wp-content/uploads/2011/11/controllers-300x233.png&quot; alt=&quot;Mounted Controllers&quot; width=&quot;300&quot; height=&quot;233&quot; class=&quot;size-medium wp-image-414&quot; /&gt;&lt;/a&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Mounted Controllers&lt;/p&gt;&lt;/div&gt;&lt;/p&gt; &lt;p&gt;The code has been heavily inspired by the Pyramid Debug Toolbar and have to thank the Pyramid team for the good job they did at making the Toolbar code clean and simple.&lt;/p&gt;</content>   <author>    <name>Alessandro Molina</name>    <uri>http://blog.axant.it</uri>   </author>   <source>    <title type=\"html\">Axant Tech Blog \\ufffd\\ufffd turbogears</title>    <subtitle type=\"html\">AXANT Experience Report</subtitle>    <link rel=\"self\" href=\"http://blog.axant.it/archives/tag/turbogears/feed\"/>    <id>http://blog.axant.it/archives/tag/turbogears/feed</id>    <updated>2014-08-19T09:00:11+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">Programming in C</title>   <link href=\"http://blog.blackchairsoft.com/2011/11/07/programming-in-c/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=programming-in-c\"/>   <id>http://blog.blackchairsoft.com/?p=44</id>   <updated>2011-11-07T23:24:33+00:00</updated>   <content type=\"html\">&lt;p&gt;Currently I don&amp;#8217;t program in C as much as I used to, mainly because I try to choose the right tool for the job and the fact that when I do program in C I end spending much of the time fine tuning the code (to me is like a craft). I don&amp;#8217;t like optimizations that alter the readability of the code that much or other &amp;#8220;underhanded tricks&amp;#8221;, but I do care about memory usage / performance trade-offs, memory leaks, etc.&lt;/p&gt; &lt;p&gt;Last weekend while configuring a mail server, I remembered a small pet project I had a while ago to build a mail server, it was made in C++ and had a few interesting bits of code here and there, I still remember benchmarking it, getting around 20 to 48 messages per second.&lt;/p&gt; &lt;p&gt;Finally I decided to do an experiment and build a simple smtp server in pure C, using redis to manage a queue between it and a mail drop server which parses the email and drops it in the correct Maildir. In the end I did some benchmarking, getting up to 54 messages per second, not bad given that I gave up some optimizations such as using a modified tree structure to parse smtp commands.&lt;/p&gt; &lt;p&gt;Another further optimization I did was cutting down the amount of write calls, for clarity sake the SMTP wrote back in 2 calls, one sending the status, another the terminator character (CRLF), moving both to a single call did make an immense difference, now the benchmark is around 1100 messages per second (using 10 threads, 1kb message payload), or rather having 2 write calls slowed all the process considerably, it meant 2 syscalls, 2 roundtrips, potentially slowed the client parser too.&lt;/p&gt; &lt;p&gt;I could probably get even further improvements by implementing the SMTP PIPELINING extension. The maildrop server on a single thread could keep up with the smtp server so I could even squeeze a bit more performance from the whole mail pipeline.&lt;/p&gt; &lt;p&gt;In the end the experiment was meant to produce very lean, basic (but functional) and high performing servers, while having fun! I was very careful with memory management and does not seem to leak any, valgrind still identifies some small leaks related to hiredis client and pthreads. The memory used by the smtp server with 10 threads stays at max 760kb as measured by RSS (ps -a -o comm,rss), the maildrop is only 504kb.&lt;/p&gt;</content>   <author>    <name>Carlos Daniel</name>    <uri>http://blog.blackchairsoft.com</uri>   </author>   <source>    <title type=\"html\">Blackchair Developers Blog</title>    <subtitle type=\"html\">&lt;span&gt;&lt;/span&gt;</subtitle>    <link rel=\"self\" href=\"http://blog.blackchairsoft.com/feed/atom/\"/>    <id>http://blog.blackchairsoft.com/feed/atom/</id>    <updated>2013-11-09T16:30:54+00:00</updated>   </source>  </entry>   <entry>   <title type=\"html\">Request For Ideas for Hiring Pond</title>   <link href=\"http://codersbuffet.blogspot.com/2011/10/request-for-ideas-for-hiring-pond.html\"/>   <id>tag:blogger.com,1999:blog-1176744327252521223.post-4474799999076339015</id>   <updated>2011-10-18T20:44:25+00:00</updated>   <content type=\"html\">So, a favor to ask of people: I'm working on a web application to help people manage their resumes. As I've gotten further in, I've realized I don't have an actual todo list for it. So, since I'm making this to be used by others, I'll ask everybody here:&lt;br /&gt;&lt;br /&gt;What would you want to see? Currently, I've added enough code to allow the program to output something very close to my online resume ( http://www.icelus.org/ ). Next up, I have the following features on my todo list already:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;add docutils to output strings where appropriate (everywhere?)&lt;/li&gt;&lt;li&gt;add login&lt;/li&gt;&lt;li&gt;add ability to edit own resume&lt;/li&gt;&lt;li&gt;add ability to compile new custom resumes&lt;/li&gt;&lt;li&gt;add ability to output PDF&lt;/li&gt;&lt;li&gt;add ability to output ODT&lt;/li&gt;&lt;li&gt;add ability to output DOC&lt;/li&gt;&lt;li&gt;add generic logo&lt;/li&gt;&lt;li&gt;add generic photo / head (shadow) shot&lt;/li&gt;&lt;li&gt;add ability to login using Google, Yahoo, Facebook, etc&lt;/li&gt;&lt;li&gt;add ability to send resumes directly from Hiring Pond&lt;/li&gt;&lt;li&gt;add ability to track where resumes have gone&lt;/li&gt;&lt;li&gt;add ability to track job hunt progress&lt;/li&gt;&lt;li&gt;add ability to display current employment status (employed, unemployed, contracting)&lt;/li&gt;&lt;li&gt;add ability to display current employment seeking status (not at all, active, passive)&lt;/li&gt;&lt;li&gt;add logo to qrcode&lt;/li&gt;&lt;li&gt;change colors of qrcode&lt;/li&gt;&lt;li&gt;change color scheme for all of hiring pond to sunset and water&lt;/li&gt;&lt;li&gt;add fisherman silhouette as hiring pond logo&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;What else would you all want to see in order to make you want to use this?</content>   <author>    <name>Michael Pedersen</name>    <email>noreply@blogger.com</email>    <uri>http://codersbuffet.blogspot.com/search/label/turbogears</uri>   </author>   <source>    <title type=\"html\">The Coder's Buffet</title>    <subtitle type=\"html\">As a developer, I explore numerous bits of technology. Some stick, some suck, and all of them teach me. It's time for me to tell the world why I use what I use.</subtitle>    <link rel=\"self\" href=\"http://codersbuffet.blogspot.com/feeds/posts/default/-/turbogears\"/>    <id>tag:blogger.com,1999:blog-1176744327252521223</id>    <updated>2015-03-20T03:00:06+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en\">   <title type=\"html\">TurboGears2 Performance Improvements</title>   <link href=\"http://blog.axant.it/archives/400\"/>   <id>http://blog.axant.it/?p=400</id>   <updated>2011-10-04T15:35:48+00:00</updated>   <content type=\"html\">&lt;p&gt;As recently some effort has been involved in improving the performances of TurboGears2, I was curious to see how much things improved. As usually, the test isn&amp;#8217;t really reliable in any way and was just for fun.&lt;/p&gt; &lt;p&gt;All the graphs report the request/sec the application has been able to perform on my computer with only 1 concurrent client. So higher is better.&lt;/p&gt; &lt;p&gt;Here is the comparison between TG2.0 and TG2dev (will be 2.1.4)&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://docs.google.com/spreadsheet/oimg?key=0AuIJBJ437w0BdHNHdUlwclF4WWtJcTBxZzJId0hLT0E&amp;oid=2&amp;zx=lp41836o721b&quot; /&gt;&lt;/p&gt; &lt;p&gt;I also compared various setups with different template engines on TG2dev &lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://docs.google.com/spreadsheet/oimg?key=0AuIJBJ437w0BdHNHdUlwclF4WWtJcTBxZzJId0hLT0E&amp;oid=1&amp;zx=tjwtm6ymhmbj&quot; alt=&quot;&quot; /&gt;&lt;/p&gt; &lt;p&gt;The comparison happened on an application similar to the quickstarted one.&lt;br /&gt; Actually as there is no database involved in this application the template engine impacts a lot and so was a good benchmark for the template engines themselves.&lt;/p&gt;</content>   <author>    <name>Alessandro Molina</name>    <uri>http://blog.axant.it</uri>   </author>   <source>    <title type=\"html\">Axant Tech Blog \\ufffd\\ufffd turbogears</title>    <subtitle type=\"html\">AXANT Experience Report</subtitle>    <link rel=\"self\" href=\"http://blog.axant.it/archives/tag/turbogears/feed\"/>    <id>http://blog.axant.it/archives/tag/turbogears/feed</id>    <updated>2014-08-19T09:00:11+00:00</updated>   </source>  </entry>   <entry>   <title type=\"html\">raptorizemw - Fact:  Every WSGI app is better with a raptor.</title>   <link href=\"http://threebean.org/blog/2011/10/03/raptorizemw-fact-every-wsgi-app-is-better-with-a-raptor/\"/>   <id>http://threebean.org/blog/2011/10/03/raptorizemw-fact-every-wsgi-app-is-better-with-a-raptor/</id>   <updated>2011-10-04T00:35:34+00:00</updated>   <content type=\"html\">&lt;p&gt;It's done.  An over-engineered &lt;a href=&quot;http://wsgi.readthedocs.org/en/latest/&quot; target=&quot;_blank&quot;&gt;WSGI   middleware&lt;/a&gt; component that adds a velociraptor to every page served.  Fact: Every WSGI app is better with a raptor.&lt;/p&gt;  &lt;p&gt;It's called &lt;a href=&quot;http://pypi.python.org/pypi/raptorizemw&quot;&gt;raptorizemw&lt;/a&gt; (pronounced &quot;awesome&quot;) and the only way to use it is in production.&lt;/p&gt;</content>   <author>    <name>Ralph Bean</name>    <uri>http://threebean.org/blog</uri>   </author>   <source>    <title type=\"html\">[three]Bean</title>    <subtitle type=\"html\">Creates a Blog</subtitle>    <link rel=\"self\" href=\"http://threebean.org/blog/category/turbogears/feed/index.xml\"/>    <id>http://threebean.org/blog/category/turbogears/feed/index.xml</id>    <updated>2015-03-19T14:30:06+00:00</updated>   </source>  </entry>   <entry>   <title type=\"html\">Announcement: TurboGears2 2.1.3 Released!</title>   <link href=\"http://codersbuffet.blogspot.com/2011/09/announcement-turbogears2-213-released.html\"/>   <id>tag:blogger.com,1999:blog-1176744327252521223.post-7595285113976133518</id>   <updated>2011-09-28T21:22:07+00:00</updated>   <content type=\"html\">We are pleased to announce the latest release of &lt;a href=&quot;http://www.turbogears.org/&quot;&gt;TurboGears&lt;/a&gt;, 2.1.3!&lt;br /&gt;&lt;br /&gt;This release adds support for the &lt;a href=&quot;http://www.mongodb.org/&quot;&gt;Mongo object database&lt;/a&gt; and the &lt;a href=&quot;http://merciless.sourceforge.net/&quot;&gt;Ming ORM&lt;/a&gt; for it, in addition to bringing in some small bugfixes. The full changelog is below&lt;br /&gt;&lt;br /&gt;The number of changes is, admittedly, small, but don't underestimate the importance: &lt;a href=&quot;http://en.wikipedia.org/wiki/NoSQL&quot;&gt;NoSQL databases&lt;/a&gt; are an important tool for the web, and adding the support for Mongo brings &lt;a href=&quot;http://www.turbogears.org/&quot;&gt;TurboGears&lt;/a&gt; into the group of frameworks that not only supports it, but supports it well.&lt;br /&gt;&lt;br /&gt;We're already looking forward to expanding support and closing even more issues for 2.1.4, so we'll see you next month for that release!&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;* Added support for MongoDB into the quickstart template&lt;br /&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;* Added lurl (lazy_url) support for late evaluation&lt;br /&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;* Adding tests module back into source distribution. Solves ticket 115&lt;br /&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;* Template caching is now manageable by TG applications&lt;br /&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;* Clean up output for flash() in default quickstart&lt;br /&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;* Performance enhancements&lt;br /&gt;&lt;span class=&quot;Apple-tab-span&quot;&gt; &lt;/span&gt;* Fixed missing dependencies in TG quickstart on Python 2.4&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>   <author>    <name>Michael Pedersen</name>    <email>noreply@blogger.com</email>    <uri>http://codersbuffet.blogspot.com/search/label/turbogears</uri>   </author>   <source>    <title type=\"html\">The Coder's Buffet</title>    <subtitle type=\"html\">As a developer, I explore numerous bits of technology. Some stick, some suck, and all of them teach me. It's time for me to tell the world why I use what I use.</subtitle>    <link rel=\"self\" href=\"http://codersbuffet.blogspot.com/feeds/posts/default/-/turbogears\"/>    <id>tag:blogger.com,1999:blog-1176744327252521223</id>    <updated>2015-03-20T03:00:06+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">Iconia Tab Android 3.2 Update!</title>   <link href=\"http://blog.blackchairsoft.com/2011/09/26/iconia-tab-android-3-2-update/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=iconia-tab-android-3-2-update\"/>   <id>http://blog.blackchairsoft.com/?p=40</id>   <updated>2011-09-26T23:19:09+00:00</updated>   <content type=\"html\">&lt;p&gt;Finally the android 3.2 update has arrived, this time the update process was much smoother then with 3.1, with the last one I had to do a restore to original 3.0.1 version and then update clean, now it just worked.&lt;/p&gt; &lt;p&gt;I haven&amp;#8217;t yet looked at all the changes but at least they improved the obvious ones, youtube no longer crashes like crazy, and in general the system seems more stable.&lt;/p&gt; &lt;p&gt;Another visible thing is the app compatibly, apps designed for smaller screen now have an option to resize adequately to tablet sizes, it works well enough.&lt;/p&gt; &lt;p&gt;Other than that I don&amp;#8217;t see many changes, we&amp;#8217;ll see what brings the 4.0 Ice Cream Sandwich release, I hope Acer pushes it too to the current generation of it&amp;#8217;s tablets.&lt;/p&gt;</content>   <author>    <name>Carlos Daniel</name>    <uri>http://blog.blackchairsoft.com</uri>   </author>   <source>    <title type=\"html\">Blackchair Developers Blog</title>    <subtitle type=\"html\">&lt;span&gt;&lt;/span&gt;</subtitle>    <link rel=\"self\" href=\"http://blog.blackchairsoft.com/feed/atom/\"/>    <id>http://blog.blackchairsoft.com/feed/atom/</id>    <updated>2013-11-09T16:30:54+00:00</updated>   </source>  </entry>   <entry>   <title type=\"html\">TurboGears 2.1 and Foreclosures (more empty houses than homeless people)</title>   <link href=\"http://threebean.org/blog/2011/09/24/turbogears-2-1-and-foreclosures-more-empty-houses-than-homeless-people/\"/>   <id>http://threebean.org/blog/2011/09/24/turbogears-2-1-and-foreclosures-more-empty-houses-than-homeless-people/</id>   <updated>2011-09-24T20:01:21+00:00</updated>   <content type=\"html\">&lt;p&gt;I wrote an app that scrapes foreclosure data from my county of residence and plots it six ways from Sunday in a TurboGears2.1 app.  You can find it at &lt;a href=&quot;http://monroe-threebean.rhcloud.com/&quot;&gt;http://monroe-threebean.rhcloud.com/&lt;/a&gt;, hosted on redhat's openshift cloud.&lt;/p&gt;  &lt;p&gt;It's used by activists with &lt;a href=&quot;http://takebackroc.rocus.org/&quot;&gt;Take Back   the Land, Rochester&lt;/a&gt; and my local branch of the &lt;a href=&quot;http://rochesteriso.org&quot;&gt;ISO&lt;/a&gt; to find upcoming evictions before they happen and organize the neighborhoods to stop the shuttering of homes.  Get a hundred people at the door of the house before the cops come, and no-one is getting evicted (we've had &lt;a href=&quot;http://socialistworker.org/2011/05/11/activist-takes-back-her-home&quot;&gt;some&lt;/a&gt; &lt;a href=&quot;http://socialistworker.org/2011/08/23/no-eviction-for-cathy-lennon&quot;&gt;successes&lt;/a&gt;).&lt;/p&gt;  &lt;p&gt;We're living in some absurd times where banks got bailed out by the trillions yet still get to collect on our student debt and mortgages.  Most of us are being ruined.  If you're not, then your neighbor is.&lt;/p&gt;  &lt;p&gt;If you're in Boston, check out &lt;a&gt;&lt;/a&gt;Vida Urbana&lt;/p&gt; or if you're in Chicago, check out the &lt;a href=&quot;http://chicagoantieviction.org/&quot;&gt;Chicago   Anti-Eviction Campaign&lt;/a&gt;.  Anywhere you go, check out the &lt;a href=&quot;http://internationalsocialist.org&quot;&gt;ISO&lt;/a&gt;.  &lt;p&gt;&lt;a href=&quot;http://github.com/ralphbean/monroe&quot;&gt;Fork my code&lt;/a&gt;, port it to your home town, and start organizing!&lt;/p&gt;</content>   <author>    <name>Ralph Bean</name>    <uri>http://threebean.org/blog</uri>   </author>   <source>    <title type=\"html\">[three]Bean</title>    <subtitle type=\"html\">Creates a Blog</subtitle>    <link rel=\"self\" href=\"http://threebean.org/blog/category/turbogears/feed/index.xml\"/>    <id>http://threebean.org/blog/category/turbogears/feed/index.xml</id>    <updated>2015-03-19T14:30:06+00:00</updated>   </source>  </entry>   <entry>   <title type=\"html\">TurboGears and Ming/Mongo</title>   <link href=\"http://codersbuffet.blogspot.com/2011/09/turbogears-and-mingmongo.html\"/>   <id>tag:blogger.com,1999:blog-1176744327252521223.post-6641951277180466211</id>   <updated>2011-09-18T21:29:30+00:00</updated>   <content type=\"html\">I know that my followers are few, and my posts are too infrequent. I'm looking for ways to change my posting frequency.&lt;br /&gt;&lt;br /&gt;But, even still, I have an important request: &lt;a href=&quot;http://www.turbogears.org/&quot;&gt;TurboGears&lt;/a&gt; 2.1.3 is getting ready to be released. We're adding &lt;a href=&quot;http://merciless.sourceforge.net/tour.html&quot;&gt;Ming&lt;/a&gt;/&lt;a href=&quot;http://www.mongodb.org/&quot;&gt;Mongo&lt;/a&gt; support in this release. Anybody who can, please review the changes (&lt;a href=&quot;http://sourceforge.net/p/turbogears2/tg2/&quot;&gt;core&lt;/a&gt;, &lt;a href=&quot;http://sourceforge.net/p/turbogears2/tg2devtools/&quot;&gt;devtools&lt;/a&gt;, and &lt;a href=&quot;http://sourceforge.net/p/turbogears2/tg2docs/&quot;&gt;docs&lt;/a&gt;), run tests, etc. We need to make sure we've got this as correct as possible for everybody.&lt;br /&gt;&lt;br /&gt;Thank you for your time!</content>   <author>    <name>Michael Pedersen</name>    <email>noreply@blogger.com</email>    <uri>http://codersbuffet.blogspot.com/search/label/turbogears</uri>   </author>   <source>    <title type=\"html\">The Coder's Buffet</title>    <subtitle type=\"html\">As a developer, I explore numerous bits of technology. Some stick, some suck, and all of them teach me. It's time for me to tell the world why I use what I use.</subtitle>    <link rel=\"self\" href=\"http://codersbuffet.blogspot.com/feeds/posts/default/-/turbogears\"/>    <id>tag:blogger.com,1999:blog-1176744327252521223</id>    <updated>2015-03-20T03:00:06+00:00</updated>   </source>  </entry>   <entry xml:lang=\"en-US\">   <title type=\"html\">The long overdue &quot;Shootout&quot; update</title>   <link href=\"http://blog.curiasolutions.com/the-long-overdue-shootout-update.html\"/>   <id>tag:blog.curiasolutions.com,2011-09-12:the-long-overdue-shootout-update.html</id>   <updated>2011-09-12T19:08:00+00:00</updated>   <content type=\"html\">&lt;p&gt;It's been several months since I've had a chance to update &lt;a class=&quot;reference external&quot; href=&quot;http://blog.curiasolutions.com/pages/the-great-web-framework-shootout.html&quot;&gt;The Great Web Framework Shootout&lt;/a&gt;, but this weekend I decided that it was time to dig in and freshen things up a bit.&lt;/p&gt; &lt;p&gt;Not only have most of the frameworks seen new releases since the last revision, but I finally decided to move all of the tests over to Amazon's &amp;quot;release&amp;quot; version of the Ubuntu LTS AMI.&lt;/p&gt; &lt;p&gt;Below is a quick summary of what's new in this revision:&lt;/p&gt; &lt;ul class=&quot;simple&quot;&gt; &lt;li&gt;All tests were performed on the updated Ubuntu LTS AMI (ami-fbbf7892 ubuntu-images-us/ubuntu-lucid-10.04-amd64-server-20110719.manifest.xml)&lt;/li&gt; &lt;li&gt;The updated AMI was configured with Python 2.6.5, PHP 5.3.2, Ruby&amp;nbsp;1.9.2p290, Apache 2.2.14 (default config),&amp;nbsp;mod_wsgi 2.8 (embedded mode), and mod_passenger 3.0.9&lt;/li&gt; &lt;li&gt;Rails 2.x and 3.0 were dropped from the &amp;quot;full stack(ish)&amp;quot; tests in favor of Rails 3.1.&lt;/li&gt; &lt;li&gt;CakePHP 1.2 was dropped from the PHP tests in favor of 1.3,&amp;nbsp;but Symfony and Yii were added as they seem to have considerable market share.&lt;/li&gt; &lt;li&gt;CakePHP's caching engine was incorrectly configured during the last round of tests, and this has been corrected.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class=&quot;reference external&quot; href=&quot;http://profiles.google.com/seedifferently&quot;&gt;Circle me on Google+&lt;/a&gt; to keep track of further updates, and feel free to contact me there with any questions or comments.&lt;/p&gt;</content>   <author>    <name>Curia</name>    <uri>http://blog.curiasolutions.com/</uri>   </author>   <source>    <title type=\"html\">Curia Blog</title>    <link rel=\"self\" href=\"http://blog.curiasolutions.com/feeds/all.rss.xml\"/>    <id>http://blog.curiasolutions.com/feeds/all.rss.xml</id>    <updated>2014-10-30T05:30:04+00:00</updated>   </source>  </entry>   <entry>   <title type=\"html\">Announcement: TurboGears2 2.1.2 Released!</title>   <link href=\"http://codersbuffet.blogspot.com/2011/08/announcement-turbogears2-212-released.html\"/>   <id>tag:blogger.com,1999:blog-1176744327252521223.post-7443864970469834568</id>   <updated>2011-08-24T20:58:33+00:00</updated>   <content type=\"html\">&lt;br /&gt;&lt;br /&gt;We are pleased to announce the latest release of TurboGears, 2.1.2!&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;This is a maintenance/bugfix release for the 2.1 series which also adds some new features. The full changelog is below.&lt;br /&gt;&lt;br /&gt;Highlights for this release include the beginnings of our new book &quot;TurboGears2 Web Applications: Batteries Included&quot;, Python 2.7 support, improved Jinja2 support, and quite a few bug fixes.&lt;br /&gt;You can see the book as it stands right now at http://www.turbogears.org/book/ . We're working towards getting more details and more of the older documentation updated to go into the book.&lt;br /&gt;&lt;br /&gt;&lt;a name=&quot;more&quot;&gt;&lt;/a&gt;&lt;br /&gt;We took longer to reach this release milestone than we had planned, but Real Life(tm) takes its toll on everybody during the summer months, it seems.&lt;br /&gt;&lt;br /&gt;Even still, I can speak for the whole team when I say that we look forward to continuing to serve the community with quality code, and we look forward to your continued support!&lt;br /&gt;&lt;br /&gt;Full Change Log Here:&lt;br /&gt;&lt;br /&gt;For TG2.x Core:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Improved content-type handling ( https://sourceforge.net/p/turbogears2/tickets/73/ )&lt;/li&gt;  &lt;li&gt;Fixed dotted filename support for Genshi and Chameleon.Genshi&lt;/li&gt;  &lt;li&gt;Removed lxml dependency; now preparation of virtualenv is much easier on 64 bit systems&lt;/li&gt;  &lt;li&gt;Upgraded Chameleon.Genshi support to Chameleon1.3rc&lt;/li&gt;  &lt;li&gt;Set up render_genshi on demand only, improves Google App Engine support&lt;/li&gt;  &lt;li&gt;Support for Python 2.7&lt;/li&gt;  &lt;li&gt;Improved Jinja2 and Jinja2 filters support ( https://sourceforge.net/p/turbogears2/tickets/107/ )&lt;/li&gt;  &lt;li&gt;Added option to prevent auto-saving sessions ( https://sourceforge.net/p/turbogears2/tickets/83/ )&lt;/li&gt;  &lt;li&gt;Fixed crash where multiple templates were registered and user called override_template ( https://sourceforge.net/p/turbogears2/tickets/82/ )&lt;/li&gt;  &lt;li&gt;Fixed problem with &quot;:&quot; in error messages ( https://sourceforge.net/p/turbogears2/tickets/86/ )&lt;/li&gt;  &lt;li&gt;Improved i18n support&lt;/li&gt;  &lt;li&gt;Improved pagination support ( https://sourceforge.net/p/turbogears2/tickets/99/ )&lt;/li&gt;  &lt;li&gt;Fixed warning resets when in debug mode ( https://sourceforge.net/p/turbogears2/tickets/84/ )&lt;/li&gt;  &lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;For TG2.x Devtools:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Improved Genshi support in quickstart template&lt;/li&gt;  &lt;li&gt;Improved content-type handling ( https://sourceforge.net/p/turbogears2/tickets/73/ )&lt;/li&gt;  &lt;li&gt;Improved bootstrap if database is under version control&lt;/li&gt;  &lt;li&gt;Changed default password hashing to SHA256 ( https://sourceforge.net/p/turbogears2/tickets/94/ )&lt;/li&gt;  &lt;li&gt;New &quot;--minimal&quot; quickstart template&lt;/li&gt;  &lt;li&gt;Separated password hashing mechanism to make it more easily usable ( https://sourceforge.net/p/turbogears2/tickets/67/ )&lt;/li&gt;  &lt;li&gt;Fixed Unicode return type in auth.py ( https://sourceforge.net/p/turbogears2/tickets/89/ )&lt;/li&gt;  &lt;li&gt;Added missing dependencies for Python 2.4 and the quickstart app ( https://sourceforge.net/p/turbogears2/tickets/100/ )&lt;/li&gt;  &lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;For TG2.x Docs:&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Introduced new book beginnings&lt;/li&gt;  &lt;li&gt;Rewrote 20 Minute Wiki, brought it forward to working with TG2.1.2&lt;/li&gt;  &lt;li&gt;Rewrote installation instructions, much simplified&lt;/li&gt;  &lt;li&gt;Began description of new application for tutorial/book&lt;/li&gt;  &lt;li&gt;Improved documentation on how to contribute&lt;/li&gt;  &lt;li&gt;Made all standard modules autodocumented in the appendices&lt;/li&gt;  &lt;li&gt;&quot;ignore_parameters&quot; documented ( https://sourceforge.net/p/turbogears2/tickets/15/ )&lt;/li&gt;  &lt;li&gt;&quot;tg_avoid_touch&quot; (method to avoid saving sessions) documented ( https://sourceforge.net/p/turbogears2/tickets/83/ )&lt;/li&gt;  &lt;li&gt;Updated references regarding _default and _lookup ( https://sourceforge.net/p/turbogears2/tickets/5/ )&lt;/li&gt;  &lt;li&gt;Documented custom filters for Jinja2&lt;/li&gt;  &lt;li&gt;&quot;migrate&quot; command is now documented ( https://sourceforge.net/p/turbogears2/tickets/106/ )&lt;/li&gt;  &lt;li&gt;Documented pagination parameters&lt;/li&gt;  &lt;li&gt;Documented &quot;--minimal&quot; quickstart option ( https://sourceforge.net/p/turbogears2/tickets/102/ )&lt;/li&gt;  &lt;li&gt;Changed references to &quot;aptitude&quot; to &quot;apt-get&quot; ( https://sourceforge.net/p/turbogears2/tickets/104/ )&lt;/li&gt;  &lt;/ul&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content>   <author>    <name>Michael Pedersen</name>    <email>noreply@blogger.com</email>    <uri>http://codersbuffet.blogspot.com/search/label/turbogears</uri>   </author>   <source>    <title type=\"html\">The Coder's Buffet</title>    <subtitle type=\"html\">As a developer, I explore numerous bits of technology. Some stick, some suck, and all of them teach me. It's time for me to tell the world why I use what I use.</subtitle>    <link rel=\"self\" href=\"http://codersbuffet.blogspot.com/feeds/posts/default/-/turbogears\"/>    <id>tag:blogger.com,1999:blog-1176744327252521223</id>    <updated>2015-03-20T03:00:06+00:00</updated>   </source>  </entry>  </feed> ", 
    "identity": {
        "subtype": "", 
        "is_error": false, 
        "version": "", 
        "protocol": "", 
        "language": "", 
        "service": "", 
        "has_dataset": false, 
        "has_metadata": false
    }, 
    "digest": "d9c8acbc715bc0565d4f91ccfc06f5ec", 
    "source_url": "http://planet.turbogears.org/atom.xml"
}