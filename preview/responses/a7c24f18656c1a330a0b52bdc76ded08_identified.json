{
    "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?> <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns=\"http://purl.org/rss/1.0/\" xmlns:taxo=\"http://purl.org/rss/1.0/modules/taxonomy/\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:syn=\"http://purl.org/rss/1.0/modules/syndication/\" xmlns:admin=\"http://webns.net/mvcb/\">   <channel rdf:about=\"http://blog.gmane.org/gmane.comp.compression.xz.devel\">     <title>gmane.comp.compression.xz.devel</title>     <link>http://blog.gmane.org/gmane.comp.compression.xz.devel</link>     <description/>     <syn:updatePeriod>hourly</syn:updatePeriod>     <syn:updateFrequency>1</syn:updateFrequency>     <syn:updateBase>1901-01-01T00:00+00:00</syn:updateBase>     <items>       <rdf:Seq>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/222\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/216\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/208\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/207\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/206\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/205\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/198\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/192\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/189\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/187\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/184\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/177\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/174\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/168\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/166\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/163\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/162\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/161\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/158\"/>         <rdf:li rdf:resource=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/156\"/>       </rdf:Seq>     </items>     <image rdf:resource=\"http://gmane.org/img/gmane-25t.png\"/>     <textinput rdf:resource=\"\"/>   </channel>   <image rdf:about=\"http://gmane.org/img/gmane-25t.png\">     <title>Gmane</title>     <url>http://gmane.org/img/gmane-25t.png</url>     <link>http://gmane.org</link>   </image>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/222\">     <title>XZ Utils 5.2.1</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/222</link>     <description>&lt;pre&gt;XZ Utils 5.2.1 is available at &amp;lt;http://tukaani.org/xz/&amp;gt;. Here is an  extract from the NEWS file:    * Fixed a compression-ratio regression in fast mode of LZMA1 and     LZMA2. The bug is present in 5.1.4beta and 5.2.0 releases.    * Fixed a portability problem in xz that affected at least OpenBSD.    * Fixed xzdiff to be compatible with FreeBSD's mktemp which differs     from most other mktemp implementations.    * Changed CPU core count detection to use cpuset_getaffinity() on     FreeBSD.  &lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2015-02-26T17:12:09</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/216\">     <title>Fairly Complete MSVC 2013 Solution/Project</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/216</link>     <description>&lt;pre&gt;Hi,  I've created vs2013 based solution for lzma DLL, lzma static and most utils. It based on the works of Garen &amp;amp; M\\ufffd\\ufffdrti\\ufffd\\ufffd\\ufffd\\ufffd Mo\\ufffd\\ufffdeiko. It can be found at https://github.com/mindw/xz vs2013_520 branch.  The cmake branch has the build system ported to cmake (only for VS). It enabled me to build xz for Python 2.7 use. (Intel C++ Compiler targeted at VS2008).  Any interest?   -gabi   &lt;/pre&gt;</description>     <dc:creator>Gabi Davar</dc:creator>     <dc:date>2015-01-23T11:19:01</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/208\">     <title>How to compress a folder with xz ?</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/208</link>     <description>&lt;pre&gt;Hi, all,  The forum webpage give an error. So I hope you will forgive me for sending to xz-devel, in the hope that someone may advice.  According to the man page of xz, it seems that xz folderName or xz folderName/ is enough. However, when running: xz /etc/ I get; xz: /etc/: Is a directory, skipping  I saw that it is possible with the tar command, with soem command options, but isn't it possible with xz ?  regards, Kevin   &lt;/pre&gt;</description>     <dc:creator>Kevin Wilson</dc:creator>     <dc:date>2014-11-09T18:24:07</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/207\">     <title>Optimizing lzma_memcmplen for non-x86 processors</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/207</link>     <description>&lt;pre&gt;XZ Utils 5.1.4beta got a speed optimization for buffer comparisons which improves encoding speed. It works on systems that support unaligned memory access. The relevant code is in src/liblzma/common/memcmplen.h:      http://git.tukaani.org/?p=xz.git;a=blob;f=src/liblzma/common/memcmplen.h  Different architectures get the best performance with different code. The code should be decent for x86-64 and maybe also for 32-bit x86 (at least the SSE2 version). Those may still have some room left for improvement and help is welcome to improve them. However, no one has looked at how the code could be improved for non-x86 archs, so I'm especially interested in finding people to help with that.  I have heard that the generic versions work on little endian 32-bit ARM and 32-bit big endian PowerPC. On those the generic code is slightly faster than the byte-by-byte buffer comparison, but perhaps arch-specific code could do better. The method used for x86-64 could be good for other 64-bit CPUs too if __builtin_ctzll maps to&lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2014-10-13T19:28:10</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/206\">     <title>XZ Utils 5.0.7</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/206</link>     <description>&lt;pre&gt;XZ Utils 5.0.7 is available at &amp;lt;http://tukaani.org/xz/&amp;gt;. Here is an  extract from the NEWS file:      * Fix regressions introduced in 5.0.6:          - Fix building with non-GNU make.          - Fix invalid Libs.private value in liblzma.pc which broke           static linking against liblzma if the linker flags were           taken from pkg-config.  &lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2014-09-20T18:04:06</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/205\">     <title>XZ Utils 5.0.6 and 5.1.4beta</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/205</link>     <description>&lt;pre&gt;XZ Utils 5.0.6 and 5.1.4beta are available at &amp;lt;http://tukaani.org/xz/&amp;gt;. Here is an extract from the NEWS file:  5.0.6 (2014-09-14)      * xzgrep now exits with status 0 if at least one file matched.      * A few minor portability and build system fixes  5.1.4beta (2014-09-14)      * All fixes from 5.0.6      * liblzma: Fixed the use of presets in threaded encoder       initialization.      * xz --block-list and --block-size can now be used together       in single-threaded mode. Previously the combination only       worked in multi-threaded mode.      * Added support for LZMA_IGNORE_CHECK to liblzma and made it       available in xz as --ignore-check.      * liblzma speed optimizations:          - Initialization of a new LZMA1 or LZMA2 encoder has been           optimized. (The speed of reinitializing an already-allocated           encoder isn't affected.) This helps when compressing many           small buffers with lzma_stream_buffer_encode() and other           similar situations where an already-allocate&lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2014-09-14T19:46:01</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/198\">     <title>Disabling CRC/SHA-256 checks on decompression</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/198</link>     <description>&lt;pre&gt;Would it be possible to add a flag to disable these checks during  decompression?  I have data format and lots of data encoded in it (RPMs,  in case you wonder) which has its own integrity checking, and  unfortunately, all the existing XZ streams have been built with SHA-256  hashing.  Being able to disable hashing would result in a nice speed-up  for me (based on preliminary tests using hand-crafted RPMs).  &lt;/pre&gt;</description>     <dc:creator>Florian Weimer</dc:creator>     <dc:date>2014-07-31T14:40:05</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/192\">     <title>xzgrep should success if at least one file matches</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/192</link>     <description>&lt;pre&gt;Hi, in RHBZ, there was reported problem with xzgrep, we should exit 0 when at lest one file contains matching string.  Grep behaves similarly.  Original bugreport: https://bugzilla.redhat.com/show_bug.cgi?id=1108085  Patch is attached, Pavel &lt;/pre&gt;</description>     <dc:creator>Pavel Raiskup</dc:creator>     <dc:date>2014-06-11T14:22:51</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/189\">     <title>XZ for Java 1.5</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/189</link>     <description>&lt;pre&gt;XZ for Java 1.5 is available at &amp;lt;http://tukaani.org/xz/java.html&amp;gt; and in the Maven Central (groupId = org.tukaani, artifactId = xz). Here is an extract from the NEWS file:      * Fix a wrong assertion in BCJ decoders.      * Use a field instead of reallocating a temporary one-byte buffer       in read() and write() implementations in several classes.  &lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2014-03-08T11:43:54</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/187\">     <title>Solaris packages (done) and C99 code removal</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/187</link>     <description>&lt;pre&gt;Hi folks,  I've compiled up xz 5.0.4 on the following machines:  xz.5.0.4.SPARC.32bit.Solaris.10.pkg xz.5.0.4.SPARC.32bit.Solaris.8.pkg xz.5.0.4.SPARC.32bit.Solaris.9.pkg xz.5.0.4.SPARC.64bit.Solaris.10.pkg xz.5.0.4.SPARC.64bit.Solaris.11.pkg xz.5.0.4.SPARC.64bit.Solaris.7.pkg xz.5.0.4.SPARC.64bit.Solaris.8.pkg xz.5.0.4.SPARC.64bit.Solaris.9.pkg xz.5.0.4.i86pc.64bit.Solaris.11.pkg xz.5.0.4.i86pc.Solaris.10.pkg xz.5.0.4.i86pc.Solaris.11.pkg  Compilers used (the highest version that will work on that O.S.): Solaris 7: Sun Studio 8 Solaris 8: Sun Studio 11  Solaris 9: Solaris Studio 12 Solaris 10 and Solaris 11: Sun Studio 12.3  The Solaris 7 was more problematic, the C99 support is very minimal in Sun Studio 8. I took out the C99 specific code in the xz source tree, making it C89 friendly (and thus portable to a lot more compilers - you should do this to the main code base IMHO). See the attached diff. I didn't do this in the test/* files.  The packages are now on: http://www.ibiblio.org/pub/packages/solaris/s&lt;/pre&gt;</description>     <dc:creator>Mark Ashley</dc:creator>     <dc:date>2014-03-02T06:06:00</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/184\">     <title>[java] assert in SimpleInputStream's constructor</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/184</link>     <description>&lt;pre&gt;Hi,  I'm in the process of adding BCJ support to Apache Commons Compress' 7z package.  Basically I do something like     X86Options.getInputStream(stream)   with XZ's X86Options class.  Which leads to an AssertionError.  X86Options does      public InputStream getInputStream(InputStream in) {         return new SimpleInputStream(in, new X86(false, startOffset));     }  and SimpleInputStream does      SimpleInputStream(InputStream in, SimpleFilter simpleFilter) {         ...         assert simpleFilter == null;  which is obviously wrong.  I think != is intended (and matches the comment right in front of the assert).  Cheers          Stefan   &lt;/pre&gt;</description>     <dc:creator>Stefan Bodewig</dc:creator>     <dc:date>2014-02-28T11:32:08</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/177\">     <title>Inserting Compressed Data Into Compressed File</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/177</link>     <description>&lt;pre&gt;Hello, I am trying to make a compressed map file for a game I'm working  on but I'm having a bit of trouble with making changes to the compressed  file. The map files that my game creates are very big but a lot of that  data is repetitive so I what I do is I create a big empty map and then  compress it. This allows me to have massive maps within tiny files. Now  I realize they are only small because it is compressing repeated 0's but  even when the actual values of the tiles of the map are implemented they  will still be rather repetitive so the size should still remain somewhat  small.  With that being said I've been trying to find out how to write  compressed data to a compressed file. My game's map structure is  formatted in a way such that a collection of tiles is grouped into a  block. So each XZ Block contains a certain amount of tiles. What I would  like to do is when a player changes tiles of the map the map would find  the XZ Block that the modified tile is in and rewrite that entire  compressed blo&lt;/pre&gt;</description>     <dc:creator>Brandon Fergerson</dc:creator>     <dc:date>2014-02-02T22:12:33</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/174\">     <title>LZMA documentation</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/174</link>     <description>&lt;pre&gt;Hello there!  I am currently working on a project that will utilize liblzma. I found it first inside XZ Utils and I really like its performance. But then I was kinda surprised to not find any LZMA documentation, although a lzma.h file is installed into the sytem\\ufffd\\ufffd\\ufffds default include path.  I also couldn\\ufffd\\ufffd\\ufffdt find any link on the offical xz utils site. So if anyone could link me to the correct place with the documentation, that\\ufffd\\ufffd\\ufffdd be nice.  My workstation is Mac OS X 10.9  Kind regardsm Ingwie  &lt;/pre&gt;</description>     <dc:creator>Kevin Ingwersen</dc:creator>     <dc:date>2013-12-16T20:55:14</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/168\">     <title>Creating an archive without timestamps</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/168</link>     <description>&lt;pre&gt;How do I create an XZ compressed archive, which could be compared by md5?  Right now, running \"tar cJfp\" creates a tarball, gives it a timestamp and the rest is history, because the timestamp is always different and I cannot compare such an archive... Is it possible to avoid it?  gzip has -n, what about XZ and it's implementation on Tar?  Ernestas &lt;/pre&gt;</description>     <dc:creator>Ernestas Luko\\ufffd\\ufffdevi\\ufffd\\ufffdius</dc:creator>     <dc:date>2013-11-10T12:42:11</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/166\">     <title>xz: Make --block-list and --block-size work together in</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/166</link>     <description>&lt;pre&gt;This makes --block-list and --block-size work together in single-thread mode, as per the FIXME  I've verified this works by testing with --block-size=3000  --block-list=1024,2048,4096 as well as stepping through the block decoder in the debugger.  For some reason, the single threaded mode still yields smaller files. I'm looking into that.    &lt;/pre&gt;</description>     <dc:creator>James M Leddy</dc:creator>     <dc:date>2013-11-02T21:55:54</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/163\">     <title>XZ Utils 5.1.3alpha</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/163</link>     <description>&lt;pre&gt;XZ Utils 5.1.3alpha is available at &amp;lt;http://tukaani.org/xz/&amp;gt;. Here is an extract from the NEWS file:    * All fixes from 5.0.5    * liblzma:        - Fixed a deadlock in the threaded encoder.        - Made the uses of lzma_allocator const correct.        - Added lzma_block_uncomp_encode() to create uncompressed         .xz Blocks using LZMA2 uncompressed chunks.        - Added support for native threads on Windows and the ability         to detect the number of CPU cores.    * xz:        - Fixed a race condition in the signal handling. It was         possible that e.g. the first SIGINT didn't make xz exit         if reading or writing blocked and one had bad luck. The fix         is non-trivial, so as of writing it is unknown if it will be         backported to the v5.0 branch.        - Made the progress indicator work correctly in threaded mode.        - Threaded encoder now works together with --block-list=SIZES.        - Added preliminary support for --flush-timeout=TIMEOUT.         It can be useful for (&lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2013-10-26T14:16:34</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/162\">     <title>Parallel xzcat</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/162</link>     <description>&lt;pre&gt;Here is a parallel implementation of xzcat:  http://git.annexia.org/?p=pxzcat.git;a=tree  Some test results:    4 cores:  xzcat: 23.8 s  pxzcat: 8.1 s   speed up: 2.9   8 cores:  xzcat: 26.8 s  pxzcat: 10.5 s  speed up: 2.55  I just wrote this as a quick hack in a couple of hours, so while it may be of interest it's not a long term solution.  (It would be better to get the xzcat -T flag working).  Notes on functionality/limitations:  (1) Unless the xz file was built using the --block-size parameter with a smallish block size (eg. 16 megabytes) then pxzcat **WILL NOT WORK**.  (2) I have not tested it with multi-stream files, but it should work with them.  (3) It requires that the input and output files are real files.  It does not work for streaming.  Notes on performance:  - Scalability is not too bad on my laptop (4 core machine above) but much worse on a theoretically higher performing machine with SSDs (8 core machine above).  I don't really understand why that is.  - For reasons I don't understand, both &lt;/pre&gt;</description>     <dc:creator>Richard W.M. Jones</dc:creator>     <dc:date>2013-10-21T21:46:25</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/161\">     <title>XZ for Java 1.4</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/161</link>     <description>&lt;pre&gt;XZ for Java 1.4 is available at &amp;lt;http://tukaani.org/xz/java.html&amp;gt; and in the Maven Central (groupId = org.tukaani, artifactId = xz). Here is an extract from the NEWS file:    * Add LZMAInputStream for decoding .lzma files and raw LZMA streams.  &lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2013-09-22T10:22:56</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/158\">     <title>XZ Utils 5.0.5</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/158</link>     <description>&lt;pre&gt;XZ Utils 5.0.5 is available at &amp;lt;http://tukaani.org/xz/&amp;gt;. Here is an  extract from the NEWS file:    * lzmadec and liblzma's lzma_alone_decoder(): Support decompressing     .lzma files that have less common settings in the headers     (dictionary size other than 2^n or 2^n + 2^(n-1), or uncompressed     size greater than 256 GiB). The limitations existed to avoid false     positives when detecting .lzma files. The lc + lp &amp;lt;= 4 limitation     still remains since liblzma's LZMA decoder has that limitation.      NOTE: xz's .lzma support or liblzma's lzma_auto_decoder() are NOT     affected by this change. They still consider uncommon .lzma     headers as not being in the .lzma format. Changing this would     give way too many false positives.    * xz:        - Interaction of preset and custom filter chain options was         made less illogical. This affects only certain less typical         uses cases so few people are expected to notice this change.          Now when a custom filter chain option (e.g. --lzma2)&lt;/pre&gt;</description>     <dc:creator>Lasse Collin</dc:creator>     <dc:date>2013-06-30T17:02:01</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/156\">     <title>xz-utils streaming patch</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/156</link>     <description>&lt;pre&gt;Hi,  Attached is a patch that enables 'streaming' support for xz output, in short LZMA_SYNC_FLUSH is  called every X milliseconds.  We find it helpful so that we can effectively do: ---- tail -f foobar.log.xz | nc w.x.y.z 1234 ----  Meanwhile foobar.log.xz is effectively being generated with: ---- tail -f foobar.log | xz -c --select-timeout 500 &amp;gt; foobar.log.xz ----  This means the receiver then gets something that is decodeable in X milliseconds rather than  having to wait for a whole block to be generated and flushed, which might be a considerable time  if whatever is writing to foobar.log is low volume (100 bytes per second for example).  The patch is for 5.0.0 (what is currently in Debian 'oldstable/squeeze') but if the community  likes the look of the patch, I can roll a version for whatever is at the HEAD of the git tree.  Feedback welcomed.  Cheers  &lt;/pre&gt;</description>     <dc:creator>Alexander Clouter</dc:creator>     <dc:date>2013-06-26T18:18:11</dc:date>   </item>   <item rdf:about=\"http://comments.gmane.org/gmane.comp.compression.xz.devel/152\">     <title>Random access to xz files</title>     <link>http://comments.gmane.org/gmane.comp.compression.xz.devel/152</link>     <description>&lt;pre&gt;Hi,  I'm trying to write an NBD driver for XZ files.  This requires random access to the files.  So far I've have loaded the index from the file, and I'm using lzma_index_iter_locate (successfully) to locate the block and uncompressed offset that contains the byte of interest.  However I'm stuck as to where I go from there.  I am able to decode the block header using lzma_block_header_decode. But should I need to do that?  Isn't the block already \"loaded\" in the index?  I'm also able to read the data from the block (although decoding fails at the end of the block -- I don't understand why).  Here is my current code -- see especially the function 'xzfile_pread' in the first file:  http://oirase.annexia.org/tmp/xzfile.c http://oirase.annexia.org/tmp/xzfile.h http://oirase.annexia.org/tmp/xz.c  I suppose the answer is \"no\", but is this stuff documented anywhere?  Rich.  &lt;/pre&gt;</description>     <dc:creator>Richard W.M. Jones</dc:creator>     <dc:date>2013-06-23T10:25:05</dc:date>   </item>   <textinput rdf:about=\"http://search.gmane.org/?group=$group=gmane.comp.compression.xz.devel\">     <title>Search Engine</title>     <description>Search the mailing list at Gmane</description>     <name>query</name>     <link>http://search.gmane.org/?group=$group=gmane.comp.compression.xz.devel</link>   </textinput> </rdf:RDF> ", 
    "identity": {
        "subtype": "dataset", 
        "is_error": false, 
        "version": "", 
        "protocol": "RDF", 
        "language": "", 
        "service": "", 
        "has_dataset": false, 
        "has_metadata": false
    }, 
    "digest": "a7c24f18656c1a330a0b52bdc76ded08", 
    "source_url": "http://rss.gmane.org/topics/excerpts/gmane.comp.compression.xz.devel"
}